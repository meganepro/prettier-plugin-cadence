// Generated from CadenceParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CadenceParserListener = require('./CadenceParserListener').CadenceParserListener;
var grammarFileName = "CadenceParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00cb\u095c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004",
    "\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t",
    "\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004",
    "\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t",
    "\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004",
    "\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t",
    "\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004",
    "\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t",
    "\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0003",
    "\u0002\u0005\u0002\u0240\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0005\u0003\u0247\n\u0003\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u024b\n\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u0251\n\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0007\u0006\u025c\n\u0006\f\u0006\u000e\u0006\u025f\u000b\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0264\n\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u0276\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u027c\n",
    "\f\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0282\n\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u028d\n\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0293\n\u0010\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u0297\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u02a1\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u02a6",
    "\n\u0013\u0007\u0013\u02a8\n\u0013\f\u0013\u000e\u0013\u02ab\u000b\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u02ba\n\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u02c6\n\u001a\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u02ca\n\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u02ce",
    "\n\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u02d4\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003",
    " \u0005 \u02dc\n \u0003!\u0006!\u02df\n!\r!\u000e!\u02e0\u0003\"\u0003",
    "\"\u0005\"\u02e5\n\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0007#\u02ee\n#\f#\u000e#\u02f1\u000b#\u0003$\u0003$\u0005$\u02f5",
    "\n$\u0003%\u0003%\u0003%\u0007%\u02fa\n%\f%\u000e%\u02fd\u000b%\u0003",
    "&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0005\'\u030b\n\'\u0003\'\u0003\'\u0003(\u0003(\u0003",
    ")\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0005,\u031f\n,\u0005,\u0321\n,\u0003-\u0003",
    "-\u0003-\u0007-\u0326\n-\f-\u000e-\u0329\u000b-\u0003.\u0003.\u0005",
    ".\u032d\n.\u0003/\u0003/\u0003/\u0003/\u0005/\u0333\n/\u00030\u0003",
    "0\u00030\u00030\u00050\u0339\n0\u00031\u00031\u00031\u00031\u00032\u0003",
    "2\u00032\u00072\u0342\n2\f2\u000e2\u0345\u000b2\u00033\u00033\u0003",
    "4\u00034\u00034\u00034\u00054\u034d\n4\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00055\u035f\n5\u00035\u00055\u0362\n5\u00036\u00066\u0365",
    "\n6\r6\u000e6\u0366\u00037\u00037\u00037\u00037\u00037\u00038\u0003",
    "8\u00038\u00058\u0371\n8\u00038\u00038\u00058\u0375\n8\u00039\u0005",
    "9\u0378\n9\u00039\u00039\u0003:\u0003:\u0005:\u037e\n:\u0003;\u0003",
    ";\u0005;\u0382\n;\u0003;\u0005;\u0385\n;\u0003;\u0005;\u0388\n;\u0003",
    "<\u0003<\u0003=\u0003=\u0003>\u0005>\u038f\n>\u0003?\u0003?\u0005?\u0393",
    "\n?\u0003?\u0003?\u0003@\u0003@\u0005@\u0399\n@\u0003@\u0003@\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0007B\u03a2\nB\fB\u000eB\u03a5\u000b",
    "B\u0003C\u0003C\u0005C\u03a9\nC\u0003D\u0005D\u03ac\nD\u0003D\u0003",
    "D\u0003D\u0003E\u0003E\u0003E\u0007E\u03b4\nE\fE\u000eE\u03b7\u000b",
    "E\u0003F\u0003F\u0005F\u03bb\nF\u0003G\u0003G\u0003G\u0003H\u0003H\u0003",
    "I\u0003I\u0003I\u0003I\u0005I\u03c6\nI\u0003J\u0003J\u0003J\u0003K\u0003",
    "K\u0005K\u03cd\nK\u0003L\u0003L\u0003M\u0003M\u0003N\u0003N\u0005N\u03d5",
    "\nN\u0003N\u0003N\u0005N\u03d9\nN\u0003N\u0003N\u0003O\u0003O\u0003",
    "P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0007R\u03e8",
    "\nR\fR\u000eR\u03eb\u000bR\u0003S\u0003S\u0003S\u0005S\u03f0\nS\u0003",
    "T\u0003T\u0005T\u03f4\nT\u0003T\u0003T\u0003U\u0003U\u0003U\u0007U\u03fb",
    "\nU\fU\u000eU\u03fe\u000bU\u0003V\u0003V\u0003V\u0005V\u0403\nV\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u040d\nW\u0003",
    "W\u0005W\u0410\nW\u0003X\u0006X\u0413\nX\rX\u000eX\u0414\u0003Y\u0003",
    "Y\u0005Y\u0419\nY\u0003Y\u0003Y\u0003Y\u0005Y\u041e\nY\u0003Z\u0003",
    "Z\u0003[\u0003[\u0003[\u0005[\u0425\n[\u0003\\\u0003\\\u0005\\\u0429",
    "\n\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0007]\u0430\n]\f]\u000e]",
    "\u0433\u000b]\u0003]\u0005]\u0436\n]\u0003^\u0003^\u0003_\u0003_\u0003",
    "_\u0005_\u043d\n_\u0003_\u0003_\u0003`\u0003`\u0003`\u0007`\u0444\n",
    "`\f`\u000e`\u0447\u000b`\u0003`\u0005`\u044a\n`\u0003a\u0003a\u0003",
    "a\u0003a\u0003b\u0003b\u0003b\u0005b\u0453\nb\u0003b\u0003b\u0003b\u0005",
    "b\u0458\nb\u0003b\u0003b\u0003b\u0005b\u045d\nb\u0003c\u0005c\u0460",
    "\nc\u0003c\u0003c\u0005c\u0464\nc\u0003d\u0005d\u0467\nd\u0003d\u0003",
    "d\u0005d\u046b\nd\u0003d\u0005d\u046e\nd\u0003e\u0003e\u0003e\u0003",
    "e\u0003f\u0003f\u0003f\u0005f\u0477\nf\u0003f\u0003f\u0003f\u0005f\u047c",
    "\nf\u0003f\u0003f\u0003g\u0005g\u0481\ng\u0003g\u0003g\u0003h\u0005",
    "h\u0486\nh\u0003h\u0003h\u0003i\u0003i\u0003i\u0005i\u048d\ni\u0003",
    "i\u0003i\u0005i\u0491\ni\u0005i\u0493\ni\u0003i\u0003i\u0003j\u0003",
    "j\u0005j\u0499\nj\u0003j\u0003j\u0003k\u0003k\u0005k\u049f\nk\u0003",
    "k\u0003k\u0003l\u0005l\u04a4\nl\u0003l\u0003l\u0003l\u0005l\u04a9\n",
    "l\u0003l\u0003l\u0003m\u0003m\u0003n\u0003n\u0003n\u0003o\u0005o\u04b3",
    "\no\u0003o\u0003o\u0005o\u04b7\no\u0003p\u0005p\u04ba\np\u0003p\u0003",
    "p\u0003p\u0005p\u04bf\np\u0003p\u0005p\u04c2\np\u0003p\u0003p\u0005",
    "p\u04c6\np\u0003p\u0003p\u0003q\u0006q\u04cb\nq\rq\u000eq\u04cc\u0003",
    "r\u0003r\u0005r\u04d1\nr\u0003s\u0005s\u04d4\ns\u0003s\u0003s\u0003",
    "s\u0003t\u0003t\u0003t\u0007t\u04dc\nt\ft\u000et\u04df\u000bt\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0005u\u04e8\nu\u0005u\u04ea",
    "\nu\u0003v\u0003v\u0003w\u0003w\u0003x\u0003x\u0003x\u0005x\u04f3\n",
    "x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003y\u0006y\u04fb\ny\ry\u000e",
    "y\u04fc\u0003z\u0003z\u0005z\u0501\nz\u0003{\u0003{\u0003{\u0003|\u0003",
    "|\u0003|\u0007|\u0509\n|\f|\u000e|\u050c\u000b|\u0003}\u0003}\u0005",
    "}\u0510\n}\u0003~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0005\u007f\u0518\n\u007f\u0003\u0080\u0005\u0080\u051b\n\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u0520\n\u0080\u0003\u0080",
    "\u0005\u0080\u0523\n\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003",
    "\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0083\u0007",
    "\u0083\u052e\n\u0083\f\u0083\u000e\u0083\u0531\u000b\u0083\u0003\u0084",
    "\u0003\u0084\u0003\u0085\u0005\u0085\u0536\n\u0085\u0003\u0085\u0005",
    "\u0085\u0539\n\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u053d\n\u0085",
    "\u0005\u0085\u053f\n\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005",
    "\u0085\u0544\n\u0085\u0003\u0085\u0005\u0085\u0547\n\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0086\u0003\u0086\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0088\u0007\u0088\u0552\n\u0088\f\u0088\u000e\u0088",
    "\u0555\u000b\u0088\u0003\u0089\u0003\u0089\u0003\u008a\u0005\u008a\u055a",
    "\n\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a",
    "\u0005\u008a\u0561\n\u008a\u0003\u008a\u0003\u008a\u0003\u008b\u0003",
    "\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0007",
    "\u008d\u056c\n\u008d\f\u008d\u000e\u008d\u056f\u000b\u008d\u0003\u008e",
    "\u0003\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0005\u008f\u0579\n\u008f\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0091\u0003\u0091\u0003\u0091\u0005",
    "\u0091\u0583\n\u0091\u0003\u0091\u0003\u0091\u0003\u0092\u0003\u0092",
    "\u0005\u0092\u0589\n\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u058d",
    "\n\u0092\u0003\u0092\u0005\u0092\u0590\n\u0092\u0003\u0093\u0003\u0093",
    "\u0003\u0093\u0003\u0093\u0003\u0094\u0005\u0094\u0597\n\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u059c\n\u0094\u0003\u0094",
    "\u0005\u0094\u059f\n\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0096\u0005\u0096\u05a5\n\u0096\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0005\u0096\u05aa\n\u0096\u0003\u0096\u0003\u0096\u0003\u0097\u0003",
    "\u0097\u0003\u0097\u0003\u0097\u0003\u0098\u0007\u0098\u05b3\n\u0098",
    "\f\u0098\u000e\u0098\u05b6\u000b\u0098\u0003\u0099\u0003\u0099\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u05bf",
    "\n\u009a\u0003\u009b\u0005\u009b\u05c2\n\u009b\u0003\u009b\u0003\u009b",
    "\u0005\u009b\u05c6\n\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0003",
    "\u009c\u0003\u009c\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u05d0",
    "\n\u009d\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009f",
    "\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a0\u0005\u00a0\u05de\n\u00a0\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a3\u0006\u00a3\u05e9\n\u00a3\r\u00a3\u000e\u00a3\u05ea\u0003\u00a4",
    "\u0003\u00a4\u0003\u00a4\u0005\u00a4\u05f0\n\u00a4\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a8\u0007\u00a8\u0601\n\u00a8\f\u00a8\u000e\u00a8\u0604",
    "\u000b\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0007\u00a9\u0609\n",
    "\u00a9\f\u00a9\u000e\u00a9\u060c\u000b\u00a9\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0005\u00aa\u061e\n\u00aa\u0003\u00aa\u0003",
    "\u00aa\u0003\u00aa\u0005\u00aa\u0623\n\u00aa\u0003\u00ab\u0006\u00ab",
    "\u0626\n\u00ab\r\u00ab\u000e\u00ab\u0627\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad\u0630\n\u00ad",
    "\u0003\u00ad\u0005\u00ad\u0633\n\u00ad\u0003\u00ad\u0003\u00ad\u0003",
    "\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad\u063b\n\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0007\u00ad\u0640\n\u00ad\f\u00ad",
    "\u000e\u00ad\u0643\u000b\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003",
    "\u00af\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u064d",
    "\n\u00b0\u0003\u00b1\u0003\u00b1\u0005\u00b1\u0651\n\u00b1\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0007\u00b2\u0658\n",
    "\u00b2\f\u00b2\u000e\u00b2\u065b\u000b\u00b2\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0005\u00b3\u0660\n\u00b3\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b4\u0005\u00b4\u0665\n\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4",
    "\u0005\u00b4\u066a\n\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b7\u0006\u00b7\u0672\n\u00b7\r\u00b7\u000e",
    "\u00b7\u0673\u0003\u00b8\u0003\u00b8\u0005\u00b8\u0678\n\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u067d\n\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0005\u00b8\u0682\n\u00b8\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u068a",
    "\n\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9",
    "\u0690\n\u00b9\u0003\u00ba\u0003\u00ba\u0005\u00ba\u0694\n\u00ba\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0007\u00bb\u0699\n\u00bb\f\u00bb\u000e",
    "\u00bb\u069c\u000b\u00bb\u0003\u00bc\u0005\u00bc\u069f\n\u00bc\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bd\u0003\u00bd\u0005\u00bd\u06a5\n\u00bd",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be",
    "\u06ac\n\u00be\u0003\u00be\u0005\u00be\u06af\n\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0005\u00be\u06b4\n\u00be\u0003\u00bf\u0006\u00bf",
    "\u06b7\n\u00bf\r\u00bf\u000e\u00bf\u06b8\u0003\u00c0\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0005\u00c1\u06c2",
    "\n\u00c1\u0005\u00c1\u06c4\n\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2",
    "\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2",
    "\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2",
    "\u0003\u00c2\u0005\u00c2\u06d6\n\u00c2\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0005\u00c3\u06e3\n\u00c3\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u06f0\n",
    "\u00c4\u0003\u00c5\u0003\u00c5\u0005\u00c5\u06f4\n\u00c5\u0003\u00c5",
    "\u0005\u00c5\u06f7\n\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c6\u0005",
    "\u00c6\u06fc\n\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6\u0700\n\u00c6",
    "\u0003\u00c6\u0005\u00c6\u0703\n\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6\u070a\n\u00c6\u0003\u00c7",
    "\u0003\u00c7\u0005\u00c7\u070e\n\u00c7\u0003\u00c7\u0003\u00c7\u0005",
    "\u00c7\u0712\n\u00c7\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0007\u00c8",
    "\u0717\n\u00c8\f\u00c8\u000e\u00c8\u071a\u000b\u00c8\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0005\u00c9\u071f\n\u00c9\u0005\u00c9\u0721\n\u00c9",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0007\u00cb\u072a\n\u00cb\f\u00cb\u000e\u00cb\u072d\u000b",
    "\u00cb\u0003\u00cc\u0005\u00cc\u0730\n\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0005\u00cc\u0734\n\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005",
    "\u00cc\u0739\n\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0005\u00cd\u0740\n\u00cd\u0005\u00cd\u0742\n\u00cd\u0003",
    "\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0747\n\u00ce\u0003\u00ce",
    "\u0003\u00ce\u0005\u00ce\u074b\n\u00ce\u0003\u00cf\u0003\u00cf\u0003",
    "\u00cf\u0003\u00cf\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0005\u00d1\u075d\n\u00d1\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d2\u0007\u00d2\u0762\n\u00d2\f\u00d2\u000e\u00d2\u0765\u000b",
    "\u00d2\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0005\u00d3\u076a\n\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4\u0003\u00d5\u0003\u00d5",
    "\u0005\u00d5\u0772\n\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003",
    "\u00d6\u0003\u00d6\u0003\u00d6\u0007\u00d6\u077a\n\u00d6\f\u00d6\u000e",
    "\u00d6\u077d\u000b\u00d6\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0781\n",
    "\u00d7\u0003\u00d7\u0005\u00d7\u0784\n\u00d7\u0003\u00d8\u0006\u00d8",
    "\u0787\n\u00d8\r\u00d8\u000e\u00d8\u0788\u0003\u00d9\u0003\u00d9\u0003",
    "\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0792",
    "\n\u00d9\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0005\u00da",
    "\u0798\n\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00db\u0003",
    "\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0007",
    "\u00dc\u07aa\n\u00dc\f\u00dc\u000e\u00dc\u07ad\u000b\u00dc\u0003\u00dc",
    "\u0007\u00dc\u07b0\n\u00dc\f\u00dc\u000e\u00dc\u07b3\u000b\u00dc\u0003",
    "\u00dd\u0005\u00dd\u07b6\n\u00dd\u0003\u00dd\u0003\u00dd\u0005\u00dd",
    "\u07ba\n\u00dd\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0003\u00de\u0005\u00de\u07c2\n\u00de\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0005\u00df\u07cc\n\u00df\u0005\u00df\u07ce\n\u00df\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003",
    "\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003",
    "\u00e4\u0003\u00e4\u0005\u00e4\u07df\n\u00e4\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0007\u00e5\u07e6\n\u00e5\f\u00e5",
    "\u000e\u00e5\u07e9\u000b\u00e5\u0003\u00e6\u0005\u00e6\u07ec\n\u00e6",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6\u07f1\n\u00e6\u0003",
    "\u00e7\u0003\u00e7\u0005\u00e7\u07f5\n\u00e7\u0003\u00e8\u0006\u00e8",
    "\u07f8\n\u00e8\r\u00e8\u000e\u00e8\u07f9\u0003\u00e9\u0003\u00e9\u0003",
    "\u00e9\u0003\u00e9\u0003\u00ea\u0006\u00ea\u0801\n\u00ea\r\u00ea\u000e",
    "\u00ea\u0802\u0003\u00eb\u0003\u00eb\u0003\u00eb\u0003\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec",
    "\u0005\u00ec\u0816\n\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005",
    "\u00ec\u0821\n\u00ec\u0007\u00ec\u0823\n\u00ec\f\u00ec\u000e\u00ec\u0826",
    "\u000b\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003\u00ee",
    "\u0005\u00ee\u082d\n\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee\u0831",
    "\n\u00ee\u0003\u00ef\u0003\u00ef\u0005\u00ef\u0835\n\u00ef\u0003\u00f0",
    "\u0003\u00f0\u0005\u00f0\u0839\n\u00f0\u0003\u00f0\u0003\u00f0\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0007\u00f1\u0840\n\u00f1\f\u00f1\u000e",
    "\u00f1\u0843\u000b\u00f1\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2",
    "\u0005\u00f2\u0849\n\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2\u084d",
    "\n\u00f2\u0003\u00f3\u0006\u00f3\u0850\n\u00f3\r\u00f3\u000e\u00f3\u0851",
    "\u0003\u00f4\u0003\u00f4\u0005\u00f4\u0856\n\u00f4\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f4\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u085e",
    "\n\u00f5\u0005\u00f5\u0860\n\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0007\u00f6\u0867\n\u00f6\f\u00f6\u000e\u00f6",
    "\u086a\u000b\u00f6\u0003\u00f7\u0005\u00f7\u086d\n\u00f7\u0003\u00f7",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0005\u00f7\u0873\n\u00f7\u0003",
    "\u00f8\u0006\u00f8\u0876\n\u00f8\r\u00f8\u000e\u00f8\u0877\u0003\u00f9",
    "\u0003\u00f9\u0003\u00f9\u0003\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fa",
    "\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fb\u0003\u00fb\u0003\u00fb",
    "\u0007\u00fb\u0887\n\u00fb\f\u00fb\u000e\u00fb\u088a\u000b\u00fb\u0003",
    "\u00fb\u0005\u00fb\u088d\n\u00fb\u0003\u00fc\u0003\u00fc\u0003\u00fc",
    "\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00ff",
    "\u0003\u00ff\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0101\u0003\u0101",
    "\u0003\u0101\u0007\u0101\u089f\n\u0101\f\u0101\u000e\u0101\u08a2\u000b",
    "\u0101\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003",
    "\u0102\u0005\u0102\u08aa\n\u0102\u0003\u0102\u0005\u0102\u08ad\n\u0102",
    "\u0003\u0103\u0003\u0103\u0003\u0103\u0007\u0103\u08b2\n\u0103\f\u0103",
    "\u000e\u0103\u08b5\u000b\u0103\u0003\u0104\u0003\u0104\u0003\u0105\u0003",
    "\u0105\u0003\u0106\u0003\u0106\u0003\u0106\u0003\u0107\u0003\u0107\u0003",
    "\u0107\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0109\u0003\u0109\u0003",
    "\u010a\u0003\u010a\u0003\u010a\u0003\u010b\u0003\u010b\u0003\u010b\u0003",
    "\u010b\u0003\u010c\u0003\u010c\u0003\u010c\u0003\u010d\u0003\u010d\u0003",
    "\u010e\u0003\u010e\u0003\u010f\u0003\u010f\u0003\u0110\u0003\u0110\u0005",
    "\u0110\u08d8\n\u0110\u0003\u0110\u0003\u0110\u0003\u0110\u0005\u0110",
    "\u08dd\n\u0110\u0003\u0111\u0003\u0111\u0005\u0111\u08e1\n\u0111\u0003",
    "\u0112\u0003\u0112\u0005\u0112\u08e5\n\u0112\u0003\u0113\u0003\u0113",
    "\u0006\u0113\u08e9\n\u0113\r\u0113\u000e\u0113\u08ea\u0003\u0114\u0003",
    "\u0114\u0003\u0115\u0003\u0115\u0005\u0115\u08f1\n\u0115\u0003\u0116",
    "\u0003\u0116\u0006\u0116\u08f5\n\u0116\r\u0116\u000e\u0116\u08f6\u0003",
    "\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0005\u0117\u08fd\n\u0117",
    "\u0003\u0118\u0005\u0118\u0900\n\u0118\u0003\u0118\u0003\u0118\u0005",
    "\u0118\u0904\n\u0118\u0003\u0118\u0005\u0118\u0907\n\u0118\u0003\u0119",
    "\u0003\u0119\u0003\u011a\u0003\u011a\u0003\u011b\u0003\u011b\u0003\u011c",
    "\u0003\u011c\u0003\u011c\u0005\u011c\u0912\n\u011c\u0003\u011d\u0003",
    "\u011d\u0006\u011d\u0916\n\u011d\r\u011d\u000e\u011d\u0917\u0003\u011d",
    "\u0003\u011d\u0003\u011d\u0006\u011d\u091d\n\u011d\r\u011d\u000e\u011d",
    "\u091e\u0003\u011d\u0005\u011d\u0922\n\u011d\u0003\u011e\u0003\u011e",
    "\u0007\u011e\u0926\n\u011e\f\u011e\u000e\u011e\u0929\u000b\u011e\u0003",
    "\u011e\u0003\u011e\u0003\u011e\u0007\u011e\u092e\n\u011e\f\u011e\u000e",
    "\u011e\u0931\u000b\u011e\u0003\u011e\u0005\u011e\u0934\n\u011e\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0005\u011f\u093e\n\u011f\u0003\u011f\u0003\u011f",
    "\u0007\u011f\u0942\n\u011f\f\u011f\u000e\u011f\u0945\u000b\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0003\u011f\u0003\u011f\u0005\u011f\u0950\n\u011f\u0003\u011f",
    "\u0003\u011f\u0007\u011f\u0954\n\u011f\f\u011f\u000e\u011f\u0957\u000b",
    "\u011f\u0003\u011f\u0005\u011f\u095a\n\u011f\u0003\u011f\u0003\u07b1",
    "\u0004\u0158\u01d6\u0120\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8",
    "\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0",
    "\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8",
    "\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0",
    "\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108",
    "\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120",
    "\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138",
    "\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150",
    "\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168",
    "\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180",
    "\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198",
    "\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0",
    "\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8",
    "\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0",
    "\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8",
    "\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210",
    "\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228",
    "\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u0002\u0015",
    "\u0003\u0002\"#\u0003\u0002st\u0003\u0002{|\u0006\u0002\u0003\u0003",
    "\u001b\u001b\u001d\u001fVV\b\u0002\r\r\u0014\u0014\u0017\u0017\"$++",
    "BB\u0003\u0002./\u0003\u0002\u00a3\u00a6\u0003\u0002<=\u0003\u00028",
    ":\u0003\u0002RS\u0003\u0002TU\u0007\u0002\u0091\u0091\u0098\u009a\u009f",
    "\u00a0\u00a3\u00a3\u00ae\u00af\u0003\u0002\u009e\u009f\u0003\u0002\u008e",
    "\u008f\u0012\u0002\b\t\f\r\u000f\u000f\u0011\u0012\u0015\u0015\u0018",
    "\u0018\u001b!$(006ACNPU\\_cwyz\u008e\u008f\u0011\u0002\b\b\n\u001b\u001d",
    "$)/15ABOOV[`bfgxx{\u0087\u0089\u0089\u008b\u008d\u009d\u009d\u0006\u0002",
    "\u009b\u009c\u009e\u009f\u00a1\u00a3\u00a7\u00ad\u0004\u0002[[``\u0003",
    "\u0002\u00b4\u00b8\u0002\u09b5\u0002\u023f\u0003\u0002\u0002\u0002\u0004",
    "\u0246\u0003\u0002\u0002\u0002\u0006\u0248\u0003\u0002\u0002\u0002\b",
    "\u0254\u0003\u0002\u0002\u0002\n\u0258\u0003\u0002\u0002\u0002\f\u0263",
    "\u0003\u0002\u0002\u0002\u000e\u0265\u0003\u0002\u0002\u0002\u0010\u0269",
    "\u0003\u0002\u0002\u0002\u0012\u026d\u0003\u0002\u0002\u0002\u0014\u0275",
    "\u0003\u0002\u0002\u0002\u0016\u0277\u0003\u0002\u0002\u0002\u0018\u0281",
    "\u0003\u0002\u0002\u0002\u001a\u0283\u0003\u0002\u0002\u0002\u001c\u0288",
    "\u0003\u0002\u0002\u0002\u001e\u0290\u0003\u0002\u0002\u0002 \u0296",
    "\u0003\u0002\u0002\u0002\"\u029a\u0003\u0002\u0002\u0002$\u029e\u0003",
    "\u0002\u0002\u0002&\u02ac\u0003\u0002\u0002\u0002(\u02af\u0003\u0002",
    "\u0002\u0002*\u02b2\u0003\u0002\u0002\u0002,\u02b4\u0003\u0002\u0002",
    "\u0002.\u02bb\u0003\u0002\u0002\u00020\u02be\u0003\u0002\u0002\u0002",
    "2\u02c5\u0003\u0002\u0002\u00024\u02c7\u0003\u0002\u0002\u00026\u02cb",
    "\u0003\u0002\u0002\u00028\u02cf\u0003\u0002\u0002\u0002:\u02d1\u0003",
    "\u0002\u0002\u0002<\u02d5\u0003\u0002\u0002\u0002>\u02d8\u0003\u0002",
    "\u0002\u0002@\u02de\u0003\u0002\u0002\u0002B\u02e2\u0003\u0002\u0002",
    "\u0002D\u02e8\u0003\u0002\u0002\u0002F\u02f2\u0003\u0002\u0002\u0002",
    "H\u02f6\u0003\u0002\u0002\u0002J\u02fe\u0003\u0002\u0002\u0002L\u0300",
    "\u0003\u0002\u0002\u0002N\u030e\u0003\u0002\u0002\u0002P\u0310\u0003",
    "\u0002\u0002\u0002R\u0312\u0003\u0002\u0002\u0002T\u0317\u0003\u0002",
    "\u0002\u0002V\u0320\u0003\u0002\u0002\u0002X\u0322\u0003\u0002\u0002",
    "\u0002Z\u032c\u0003\u0002\u0002\u0002\\\u032e\u0003\u0002\u0002\u0002",
    "^\u0334\u0003\u0002\u0002\u0002`\u033a\u0003\u0002\u0002\u0002b\u033e",
    "\u0003\u0002\u0002\u0002d\u0346\u0003\u0002\u0002\u0002f\u0348\u0003",
    "\u0002\u0002\u0002h\u035e\u0003\u0002\u0002\u0002j\u0364\u0003\u0002",
    "\u0002\u0002l\u0368\u0003\u0002\u0002\u0002n\u036d\u0003\u0002\u0002",
    "\u0002p\u0377\u0003\u0002\u0002\u0002r\u037d\u0003\u0002\u0002\u0002",
    "t\u037f\u0003\u0002\u0002\u0002v\u0389\u0003\u0002\u0002\u0002x\u038b",
    "\u0003\u0002\u0002\u0002z\u038e\u0003\u0002\u0002\u0002|\u0390\u0003",
    "\u0002\u0002\u0002~\u0396\u0003\u0002\u0002\u0002\u0080\u039c\u0003",
    "\u0002\u0002\u0002\u0082\u039e\u0003\u0002\u0002\u0002\u0084\u03a8\u0003",
    "\u0002\u0002\u0002\u0086\u03ab\u0003\u0002\u0002\u0002\u0088\u03b0\u0003",
    "\u0002\u0002\u0002\u008a\u03b8\u0003\u0002\u0002\u0002\u008c\u03bc\u0003",
    "\u0002\u0002\u0002\u008e\u03bf\u0003\u0002\u0002\u0002\u0090\u03c1\u0003",
    "\u0002\u0002\u0002\u0092\u03c7\u0003\u0002\u0002\u0002\u0094\u03cc\u0003",
    "\u0002\u0002\u0002\u0096\u03ce\u0003\u0002\u0002\u0002\u0098\u03d0\u0003",
    "\u0002\u0002\u0002\u009a\u03d2\u0003\u0002\u0002\u0002\u009c\u03dc\u0003",
    "\u0002\u0002\u0002\u009e\u03de\u0003\u0002\u0002\u0002\u00a0\u03e0\u0003",
    "\u0002\u0002\u0002\u00a2\u03e4\u0003\u0002\u0002\u0002\u00a4\u03ec\u0003",
    "\u0002\u0002\u0002\u00a6\u03f1\u0003\u0002\u0002\u0002\u00a8\u03f7\u0003",
    "\u0002\u0002\u0002\u00aa\u03ff\u0003\u0002\u0002\u0002\u00ac\u040c\u0003",
    "\u0002\u0002\u0002\u00ae\u0412\u0003\u0002\u0002\u0002\u00b0\u0418\u0003",
    "\u0002\u0002\u0002\u00b2\u041f\u0003\u0002\u0002\u0002\u00b4\u0424\u0003",
    "\u0002\u0002\u0002\u00b6\u0426\u0003\u0002\u0002\u0002\u00b8\u042c\u0003",
    "\u0002\u0002\u0002\u00ba\u0437\u0003\u0002\u0002\u0002\u00bc\u0439\u0003",
    "\u0002\u0002\u0002\u00be\u0440\u0003\u0002\u0002\u0002\u00c0\u044b\u0003",
    "\u0002\u0002\u0002\u00c2\u045c\u0003\u0002\u0002\u0002\u00c4\u045f\u0003",
    "\u0002\u0002\u0002\u00c6\u0466\u0003\u0002\u0002\u0002\u00c8\u046f\u0003",
    "\u0002\u0002\u0002\u00ca\u0473\u0003\u0002\u0002\u0002\u00cc\u0480\u0003",
    "\u0002\u0002\u0002\u00ce\u0485\u0003\u0002\u0002\u0002\u00d0\u0489\u0003",
    "\u0002\u0002\u0002\u00d2\u0496\u0003\u0002\u0002\u0002\u00d4\u049c\u0003",
    "\u0002\u0002\u0002\u00d6\u04a3\u0003\u0002\u0002\u0002\u00d8\u04ac\u0003",
    "\u0002\u0002\u0002\u00da\u04ae\u0003\u0002\u0002\u0002\u00dc\u04b2\u0003",
    "\u0002\u0002\u0002\u00de\u04b9\u0003\u0002\u0002\u0002\u00e0\u04ca\u0003",
    "\u0002\u0002\u0002\u00e2\u04d0\u0003\u0002\u0002\u0002\u00e4\u04d3\u0003",
    "\u0002\u0002\u0002\u00e6\u04d8\u0003\u0002\u0002\u0002\u00e8\u04e9\u0003",
    "\u0002\u0002\u0002\u00ea\u04eb\u0003\u0002\u0002\u0002\u00ec\u04ed\u0003",
    "\u0002\u0002\u0002\u00ee\u04ef\u0003\u0002\u0002\u0002\u00f0\u04fa\u0003",
    "\u0002\u0002\u0002\u00f2\u0500\u0003\u0002\u0002\u0002\u00f4\u0502\u0003",
    "\u0002\u0002\u0002\u00f6\u0505\u0003\u0002\u0002\u0002\u00f8\u050d\u0003",
    "\u0002\u0002\u0002\u00fa\u0511\u0003\u0002\u0002\u0002\u00fc\u0517\u0003",
    "\u0002\u0002\u0002\u00fe\u051a\u0003\u0002\u0002\u0002\u0100\u0526\u0003",
    "\u0002\u0002\u0002\u0102\u0528\u0003\u0002\u0002\u0002\u0104\u052f\u0003",
    "\u0002\u0002\u0002\u0106\u0532\u0003\u0002\u0002\u0002\u0108\u053e\u0003",
    "\u0002\u0002\u0002\u010a\u054a\u0003\u0002\u0002\u0002\u010c\u054c\u0003",
    "\u0002\u0002\u0002\u010e\u0553\u0003\u0002\u0002\u0002\u0110\u0556\u0003",
    "\u0002\u0002\u0002\u0112\u0559\u0003\u0002\u0002\u0002\u0114\u0564\u0003",
    "\u0002\u0002\u0002\u0116\u0566\u0003\u0002\u0002\u0002\u0118\u056d\u0003",
    "\u0002\u0002\u0002\u011a\u0570\u0003\u0002\u0002\u0002\u011c\u0578\u0003",
    "\u0002\u0002\u0002\u011e\u057a\u0003\u0002\u0002\u0002\u0120\u057f\u0003",
    "\u0002\u0002\u0002\u0122\u0586\u0003\u0002\u0002\u0002\u0124\u0591\u0003",
    "\u0002\u0002\u0002\u0126\u0596\u0003\u0002\u0002\u0002\u0128\u05a0\u0003",
    "\u0002\u0002\u0002\u012a\u05a4\u0003\u0002\u0002\u0002\u012c\u05ad\u0003",
    "\u0002\u0002\u0002\u012e\u05b4\u0003\u0002\u0002\u0002\u0130\u05b7\u0003",
    "\u0002\u0002\u0002\u0132\u05b9\u0003\u0002\u0002\u0002\u0134\u05c1\u0003",
    "\u0002\u0002\u0002\u0136\u05c9\u0003\u0002\u0002\u0002\u0138\u05cf\u0003",
    "\u0002\u0002\u0002\u013a\u05d1\u0003\u0002\u0002\u0002\u013c\u05d5\u0003",
    "\u0002\u0002\u0002\u013e\u05d9\u0003\u0002\u0002\u0002\u0140\u05df\u0003",
    "\u0002\u0002\u0002\u0142\u05e2\u0003\u0002\u0002\u0002\u0144\u05e8\u0003",
    "\u0002\u0002\u0002\u0146\u05ef\u0003\u0002\u0002\u0002\u0148\u05f1\u0003",
    "\u0002\u0002\u0002\u014a\u05f5\u0003\u0002\u0002\u0002\u014c\u05f9\u0003",
    "\u0002\u0002\u0002\u014e\u05fd\u0003\u0002\u0002\u0002\u0150\u0605\u0003",
    "\u0002\u0002\u0002\u0152\u0622\u0003\u0002\u0002\u0002\u0154\u0625\u0003",
    "\u0002\u0002\u0002\u0156\u0629\u0003\u0002\u0002\u0002\u0158\u063a\u0003",
    "\u0002\u0002\u0002\u015a\u0644\u0003\u0002\u0002\u0002\u015c\u0646\u0003",
    "\u0002\u0002\u0002\u015e\u064c\u0003\u0002\u0002\u0002\u0160\u064e\u0003",
    "\u0002\u0002\u0002\u0162\u0654\u0003\u0002\u0002\u0002\u0164\u065f\u0003",
    "\u0002\u0002\u0002\u0166\u0664\u0003\u0002\u0002\u0002\u0168\u066b\u0003",
    "\u0002\u0002\u0002\u016a\u066e\u0003\u0002\u0002\u0002\u016c\u0671\u0003",
    "\u0002\u0002\u0002\u016e\u0689\u0003\u0002\u0002\u0002\u0170\u068f\u0003",
    "\u0002\u0002\u0002\u0172\u0691\u0003\u0002\u0002\u0002\u0174\u0695\u0003",
    "\u0002\u0002\u0002\u0176\u069e\u0003\u0002\u0002\u0002\u0178\u06a2\u0003",
    "\u0002\u0002\u0002\u017a\u06b3\u0003\u0002\u0002\u0002\u017c\u06b6\u0003",
    "\u0002\u0002\u0002\u017e\u06ba\u0003\u0002\u0002\u0002\u0180\u06c3\u0003",
    "\u0002\u0002\u0002\u0182\u06d5\u0003\u0002\u0002\u0002\u0184\u06e2\u0003",
    "\u0002\u0002\u0002\u0186\u06ef\u0003\u0002\u0002\u0002\u0188\u06f1\u0003",
    "\u0002\u0002\u0002\u018a\u0709\u0003\u0002\u0002\u0002\u018c\u0711\u0003",
    "\u0002\u0002\u0002\u018e\u0713\u0003\u0002\u0002\u0002\u0190\u071b\u0003",
    "\u0002\u0002\u0002\u0192\u0722\u0003\u0002\u0002\u0002\u0194\u0726\u0003",
    "\u0002\u0002\u0002\u0196\u072f\u0003\u0002\u0002\u0002\u0198\u0741\u0003",
    "\u0002\u0002\u0002\u019a\u0743\u0003\u0002\u0002\u0002\u019c\u074c\u0003",
    "\u0002\u0002\u0002\u019e\u0750\u0003\u0002\u0002\u0002\u01a0\u075c\u0003",
    "\u0002\u0002\u0002\u01a2\u075e\u0003\u0002\u0002\u0002\u01a4\u0769\u0003",
    "\u0002\u0002\u0002\u01a6\u076d\u0003\u0002\u0002\u0002\u01a8\u076f\u0003",
    "\u0002\u0002\u0002\u01aa\u0776\u0003\u0002\u0002\u0002\u01ac\u0783\u0003",
    "\u0002\u0002\u0002\u01ae\u0786\u0003\u0002\u0002\u0002\u01b0\u0791\u0003",
    "\u0002\u0002\u0002\u01b2\u0793\u0003\u0002\u0002\u0002\u01b4\u079c\u0003",
    "\u0002\u0002\u0002\u01b6\u07a1\u0003\u0002\u0002\u0002\u01b8\u07b9\u0003",
    "\u0002\u0002\u0002\u01ba\u07bb\u0003\u0002\u0002\u0002\u01bc\u07c3\u0003",
    "\u0002\u0002\u0002\u01be\u07cf\u0003\u0002\u0002\u0002\u01c0\u07d2\u0003",
    "\u0002\u0002\u0002\u01c2\u07d6\u0003\u0002\u0002\u0002\u01c4\u07d9\u0003",
    "\u0002\u0002\u0002\u01c6\u07dc\u0003\u0002\u0002\u0002\u01c8\u07e2\u0003",
    "\u0002\u0002\u0002\u01ca\u07eb\u0003\u0002\u0002\u0002\u01cc\u07f2\u0003",
    "\u0002\u0002\u0002\u01ce\u07f7\u0003\u0002\u0002\u0002\u01d0\u07fb\u0003",
    "\u0002\u0002\u0002\u01d2\u0800\u0003\u0002\u0002\u0002\u01d4\u0804\u0003",
    "\u0002\u0002\u0002\u01d6\u0815\u0003\u0002\u0002\u0002\u01d8\u0827\u0003",
    "\u0002\u0002\u0002\u01da\u082a\u0003\u0002\u0002\u0002\u01dc\u0834\u0003",
    "\u0002\u0002\u0002\u01de\u0836\u0003\u0002\u0002\u0002\u01e0\u083c\u0003",
    "\u0002\u0002\u0002\u01e2\u0848\u0003\u0002\u0002\u0002\u01e4\u084f\u0003",
    "\u0002\u0002\u0002\u01e6\u0853\u0003\u0002\u0002\u0002\u01e8\u085a\u0003",
    "\u0002\u0002\u0002\u01ea\u0863\u0003\u0002\u0002\u0002\u01ec\u0872\u0003",
    "\u0002\u0002\u0002\u01ee\u0875\u0003\u0002\u0002\u0002\u01f0\u0879\u0003",
    "\u0002\u0002\u0002\u01f2\u087d\u0003\u0002\u0002\u0002\u01f4\u0883\u0003",
    "\u0002\u0002\u0002\u01f6\u088e\u0003\u0002\u0002\u0002\u01f8\u0891\u0003",
    "\u0002\u0002\u0002\u01fa\u0894\u0003\u0002\u0002\u0002\u01fc\u0896\u0003",
    "\u0002\u0002\u0002\u01fe\u0898\u0003\u0002\u0002\u0002\u0200\u089b\u0003",
    "\u0002\u0002\u0002\u0202\u08ac\u0003\u0002\u0002\u0002\u0204\u08ae\u0003",
    "\u0002\u0002\u0002\u0206\u08b6\u0003\u0002\u0002\u0002\u0208\u08b8\u0003",
    "\u0002\u0002\u0002\u020a\u08ba\u0003\u0002\u0002\u0002\u020c\u08bd\u0003",
    "\u0002\u0002\u0002\u020e\u08c0\u0003\u0002\u0002\u0002\u0210\u08c3\u0003",
    "\u0002\u0002\u0002\u0212\u08c5\u0003\u0002\u0002\u0002\u0214\u08c8\u0003",
    "\u0002\u0002\u0002\u0216\u08cc\u0003\u0002\u0002\u0002\u0218\u08cf\u0003",
    "\u0002\u0002\u0002\u021a\u08d1\u0003\u0002\u0002\u0002\u021c\u08d3\u0003",
    "\u0002\u0002\u0002\u021e\u08dc\u0003\u0002\u0002\u0002\u0220\u08e0\u0003",
    "\u0002\u0002\u0002\u0222\u08e4\u0003\u0002\u0002\u0002\u0224\u08e8\u0003",
    "\u0002\u0002\u0002\u0226\u08ec\u0003\u0002\u0002\u0002\u0228\u08f0\u0003",
    "\u0002\u0002\u0002\u022a\u08f4\u0003\u0002\u0002\u0002\u022c\u08fc\u0003",
    "\u0002\u0002\u0002\u022e\u0906\u0003\u0002\u0002\u0002\u0230\u0908\u0003",
    "\u0002\u0002\u0002\u0232\u090a\u0003\u0002\u0002\u0002\u0234\u090c\u0003",
    "\u0002\u0002\u0002\u0236\u0911\u0003\u0002\u0002\u0002\u0238\u0921\u0003",
    "\u0002\u0002\u0002\u023a\u0933\u0003\u0002\u0002\u0002\u023c\u0959\u0003",
    "\u0002\u0002\u0002\u023e\u0240\u0005\u00aeX\u0002\u023f\u023e\u0003",
    "\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002\u0240\u0241\u0003",
    "\u0002\u0002\u0002\u0241\u0242\u0007\u0002\u0002\u0003\u0242\u0003\u0003",
    "\u0002\u0002\u0002\u0243\u0247\u0005\u0006\u0004\u0002\u0244\u0247\u0005",
    "\b\u0005\u0002\u0245\u0247\u0005\u0012\n\u0002\u0246\u0243\u0003\u0002",
    "\u0002\u0002\u0246\u0244\u0003\u0002\u0002\u0002\u0246\u0245\u0003\u0002",
    "\u0002\u0002\u0247\u0005\u0003\u0002\u0002\u0002\u0248\u024a\u0007\u0015",
    "\u0002\u0002\u0249\u024b\u0007\u000b\u0002\u0002\u024a\u0249\u0003\u0002",
    "\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002",
    "\u0002\u0002\u024c\u024d\u0005\u0158\u00ad\u0002\u024d\u024e\u0007\u0018",
    "\u0002\u0002\u024e\u0250\u0005\u0172\u00ba\u0002\u024f\u0251\u0005(",
    "\u0015\u0002\u0250\u024f\u0003\u0002\u0002\u0002\u0250\u0251\u0003\u0002",
    "\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252\u0253\u0005|",
    "?\u0002\u0253\u0007\u0003\u0002\u0002\u0002\u0254\u0255\u0007!\u0002",
    "\u0002\u0255\u0256\u0005\n\u0006\u0002\u0256\u0257\u0005|?\u0002\u0257",
    "\t\u0003\u0002\u0002\u0002\u0258\u025d\u0005\f\u0007\u0002\u0259\u025a",
    "\u0007\u0098\u0002\u0002\u025a\u025c\u0005\f\u0007\u0002\u025b\u0259",
    "\u0003\u0002\u0002\u0002\u025c\u025f\u0003\u0002\u0002\u0002\u025d\u025b",
    "\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002\u025e\u000b",
    "\u0003\u0002\u0002\u0002\u025f\u025d\u0003\u0002\u0002\u0002\u0260\u0264",
    "\u0005\u0172\u00ba\u0002\u0261\u0264\u0005\u000e\b\u0002\u0262\u0264",
    "\u0005\u0010\t\u0002\u0263\u0260\u0003\u0002\u0002\u0002\u0263\u0261",
    "\u0003\u0002\u0002\u0002\u0263\u0262\u0003\u0002\u0002\u0002\u0264\r",
    "\u0003\u0002\u0002\u0002\u0265\u0266\u0007\u000b\u0002\u0002\u0266\u0267",
    "\u0005\u0158\u00ad\u0002\u0267\u0268\u0005\u008cG\u0002\u0268\u000f",
    "\u0003\u0002\u0002\u0002\u0269\u026a\t\u0002\u0002\u0002\u026a\u026b",
    "\u0005\u0158\u00ad\u0002\u026b\u026c\u0005\u008cG\u0002\u026c\u0011",
    "\u0003\u0002\u0002\u0002\u026d\u026e\u0007)\u0002\u0002\u026e\u026f",
    "\u0005|?\u0002\u026f\u0270\u0007!\u0002\u0002\u0270\u0271\u0005\u0172",
    "\u00ba\u0002\u0271\u0013\u0003\u0002\u0002\u0002\u0272\u0276\u0005\u0016",
    "\f\u0002\u0273\u0276\u0005\u001a\u000e\u0002\u0274\u0276\u0005\u001c",
    "\u000f\u0002\u0275\u0272\u0003\u0002\u0002\u0002\u0275\u0273\u0003\u0002",
    "\u0002\u0002\u0275\u0274\u0003\u0002\u0002\u0002\u0276\u0015\u0003\u0002",
    "\u0002\u0002\u0277\u0278\u0007\u0019\u0002\u0002\u0278\u0279\u0005\n",
    "\u0006\u0002\u0279\u027b\u0005|?\u0002\u027a\u027c\u0005\u0018\r\u0002",
    "\u027b\u027a\u0003\u0002\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002",
    "\u027c\u0017\u0003\u0002\u0002\u0002\u027d\u027e\u0007\u0013\u0002\u0002",
    "\u027e\u0282\u0005|?\u0002\u027f\u0280\u0007\u0013\u0002\u0002\u0280",
    "\u0282\u0005\u0016\f\u0002\u0281\u027d\u0003\u0002\u0002\u0002\u0281",
    "\u027f\u0003\u0002\u0002\u0002\u0282\u0019\u0003\u0002\u0002\u0002\u0283",
    "\u0284\u0007\u0012\u0002\u0002\u0284\u0285\u0005\n\u0006\u0002\u0285",
    "\u0286\u0007\u0013\u0002\u0002\u0286\u0287\u0005|?\u0002\u0287\u001b",
    "\u0003\u0002\u0002\u0002\u0288\u0289\u0007*\u0002\u0002\u0289\u028a",
    "\u0005\u0172\u00ba\u0002\u028a\u028c\u0007\u0092\u0002\u0002\u028b\u028d",
    "\u0005\u001e\u0010\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028c\u028d",
    "\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002\u028e\u028f",
    "\u0007\u0095\u0002\u0002\u028f\u001d\u0003\u0002\u0002\u0002\u0290\u0292",
    "\u0005 \u0011\u0002\u0291\u0293\u0005\u001e\u0010\u0002\u0292\u0291",
    "\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002\u0002\u0293\u001f",
    "\u0003\u0002\u0002\u0002\u0294\u0297\u0005\"\u0012\u0002\u0295\u0297",
    "\u0005&\u0014\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0296\u0295",
    "\u0003\u0002\u0002\u0002\u0297\u0298\u0003\u0002\u0002\u0002\u0298\u0299",
    "\u0005\u00aeX\u0002\u0299!\u0003\u0002\u0002\u0002\u029a\u029b\u0007",
    "\u000b\u0002\u0002\u029b\u029c\u0005$\u0013\u0002\u029c\u029d\u0007",
    "\u0099\u0002\u0002\u029d#\u0003\u0002\u0002\u0002\u029e\u02a0\u0005",
    "\u0158\u00ad\u0002\u029f\u02a1\u0005(\u0015\u0002\u02a0\u029f\u0003",
    "\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002\u0002\u02a1\u02a9\u0003",
    "\u0002\u0002\u0002\u02a2\u02a3\u0007\u0098\u0002\u0002\u02a3\u02a5\u0005",
    "\u0158\u00ad\u0002\u02a4\u02a6\u0005(\u0015\u0002\u02a5\u02a4\u0003",
    "\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02a8\u0003",
    "\u0002\u0002\u0002\u02a7\u02a2\u0003\u0002\u0002\u0002\u02a8\u02ab\u0003",
    "\u0002\u0002\u0002\u02a9\u02a7\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003",
    "\u0002\u0002\u0002\u02aa%\u0003\u0002\u0002\u0002\u02ab\u02a9\u0003",
    "\u0002\u0002\u0002\u02ac\u02ad\u0007\u000f\u0002\u0002\u02ad\u02ae\u0007",
    "\u0099\u0002\u0002\u02ae\'\u0003\u0002\u0002\u0002\u02af\u02b0\u0007",
    " \u0002\u0002\u02b0\u02b1\u0005*\u0016\u0002\u02b1)\u0003\u0002\u0002",
    "\u0002\u02b2\u02b3\u0005\u0172\u00ba\u0002\u02b3+\u0003\u0002\u0002",
    "\u0002\u02b4\u02b9\u0005.\u0018\u0002\u02b5\u02ba\u0005\u0004\u0003",
    "\u0002\u02b6\u02ba\u0005\u0016\f\u0002\u02b7\u02ba\u0005\u001c\u000f",
    "\u0002\u02b8\u02ba\u0005> \u0002\u02b9\u02b5\u0003\u0002\u0002\u0002",
    "\u02b9\u02b6\u0003\u0002\u0002\u0002\u02b9\u02b7\u0003\u0002\u0002\u0002",
    "\u02b9\u02b8\u0003\u0002\u0002\u0002\u02ba-\u0003\u0002\u0002\u0002",
    "\u02bb\u02bc\u00050\u0019\u0002\u02bc\u02bd\u0007\u0099\u0002\u0002",
    "\u02bd/\u0003\u0002\u0002\u0002\u02be\u02bf\u0005\u0202\u0102\u0002",
    "\u02bf1\u0003\u0002\u0002\u0002\u02c0\u02c6\u00054\u001b\u0002\u02c1",
    "\u02c6\u00056\u001c\u0002\u02c2\u02c6\u00058\u001d\u0002\u02c3\u02c6",
    "\u0005:\u001e\u0002\u02c4\u02c6\u0005<\u001f\u0002\u02c5\u02c0\u0003",
    "\u0002\u0002\u0002\u02c5\u02c1\u0003\u0002\u0002\u0002\u02c5\u02c2\u0003",
    "\u0002\u0002\u0002\u02c5\u02c3\u0003\u0002\u0002\u0002\u02c5\u02c4\u0003",
    "\u0002\u0002\u0002\u02c63\u0003\u0002\u0002\u0002\u02c7\u02c9\u0007",
    "\n\u0002\u0002\u02c8\u02ca\u00050\u0019\u0002\u02c9\u02c8\u0003\u0002",
    "\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca5\u0003\u0002",
    "\u0002\u0002\u02cb\u02cd\u0007\u000e\u0002\u0002\u02cc\u02ce\u00050",
    "\u0019\u0002\u02cd\u02cc\u0003\u0002\u0002\u0002\u02cd\u02ce\u0003\u0002",
    "\u0002\u0002\u02ce7\u0003\u0002\u0002\u0002\u02cf\u02d0\u0007\u0016",
    "\u0002\u0002\u02d09\u0003\u0002\u0002\u0002\u02d1\u02d3\u0007,\u0002",
    "\u0002\u02d2\u02d4\u0005\u0172\u00ba\u0002\u02d3\u02d2\u0003\u0002\u0002",
    "\u0002\u02d3\u02d4\u0003\u0002\u0002\u0002\u02d4;\u0003\u0002\u0002",
    "\u0002\u02d5\u02d6\u0007-\u0002\u0002\u02d6\u02d7\u0005\u0172\u00ba",
    "\u0002\u02d7=\u0003\u0002\u0002\u0002\u02d8\u02d9\u0007\u0011\u0002",
    "\u0002\u02d9\u02db\u0005|?\u0002\u02da\u02dc\u0005@!\u0002\u02db\u02da",
    "\u0003\u0002\u0002\u0002\u02db\u02dc\u0003\u0002\u0002\u0002\u02dc?",
    "\u0003\u0002\u0002\u0002\u02dd\u02df\u0005B\"\u0002\u02de\u02dd\u0003",
    "\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02de\u0003",
    "\u0002\u0002\u0002\u02e0\u02e1\u0003\u0002\u0002\u0002\u02e1A\u0003",
    "\u0002\u0002\u0002\u02e2\u02e4\u0007\f\u0002\u0002\u02e3\u02e5\u0005",
    "D#\u0002\u02e4\u02e3\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002",
    "\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e7\u0005|",
    "?\u0002\u02e7C\u0003\u0002\u0002\u0002\u02e8\u02ef\u0005F$\u0002\u02e9",
    "\u02ea\u0005F$\u0002\u02ea\u02eb\u0007\u0098\u0002\u0002\u02eb\u02ec",
    "\u0005F$\u0002\u02ec\u02ee\u0003\u0002\u0002\u0002\u02ed\u02e9\u0003",
    "\u0002\u0002\u0002\u02ee\u02f1\u0003\u0002\u0002\u0002\u02ef\u02ed\u0003",
    "\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002\u0002\u02f0E\u0003",
    "\u0002\u0002\u0002\u02f1\u02ef\u0003\u0002\u0002\u0002\u02f2\u02f4\u0005",
    "\u0158\u00ad\u0002\u02f3\u02f5\u0005(\u0015\u0002\u02f4\u02f3\u0003",
    "\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5G\u0003",
    "\u0002\u0002\u0002\u02f6\u02fb\u0005\u0202\u0102\u0002\u02f7\u02f8\u0007",
    "\u0091\u0002\u0002\u02f8\u02fa\u0005\u0202\u0102\u0002\u02f9\u02f7\u0003",
    "\u0002\u0002\u0002\u02fa\u02fd\u0003\u0002\u0002\u0002\u02fb\u02f9\u0003",
    "\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fcI\u0003",
    "\u0002\u0002\u0002\u02fd\u02fb\u0003\u0002\u0002\u0002\u02fe\u02ff\t",
    "\u0003\u0002\u0002\u02ffK\u0003\u0002\u0002\u0002\u0300\u0301\u0007",
    "x\u0002\u0002\u0301\u030a\u0007\u0093\u0002\u0002\u0302\u0303\u0007",
    "y\u0002\u0002\u0303\u0304\u0007\u0099\u0002\u0002\u0304\u0305\u0005",
    "P)\u0002\u0305\u0306\u0007\u0098\u0002\u0002\u0306\u0307\u0007z\u0002",
    "\u0002\u0307\u0308\u0007\u0099\u0002\u0002\u0308\u0309\u0005N(\u0002",
    "\u0309\u030b\u0003\u0002\u0002\u0002\u030a\u0302\u0003\u0002\u0002\u0002",
    "\u030a\u030b\u0003\u0002\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002",
    "\u030c\u030d\u0007\u0096\u0002\u0002\u030dM\u0003\u0002\u0002\u0002",
    "\u030e\u030f\u0007\u00b7\u0002\u0002\u030fO\u0003\u0002\u0002\u0002",
    "\u0310\u0311\u0005\u023a\u011e\u0002\u0311Q\u0003\u0002\u0002\u0002",
    "\u0312\u0313\t\u0004\u0002\u0002\u0313\u0314\u0007\u0093\u0002\u0002",
    "\u0314\u0315\u0005T+\u0002\u0315\u0316\u0007\u0096\u0002\u0002\u0316",
    "S\u0003\u0002\u0002\u0002\u0317\u0318\u0005\u023a\u011e\u0002\u0318",
    "U\u0003\u0002\u0002\u0002\u0319\u0321\u0007\u00b7\u0002\u0002\u031a",
    "\u0321\u0007\u00b6\u0002\u0002\u031b\u031e\u0007\u00b9\u0002\u0002\u031c",
    "\u031d\u0007\u0091\u0002\u0002\u031d\u031f\u0007\u00b6\u0002\u0002\u031e",
    "\u031c\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f",
    "\u0321\u0003\u0002\u0002\u0002\u0320\u0319\u0003\u0002\u0002\u0002\u0320",
    "\u031a\u0003\u0002\u0002\u0002\u0320\u031b\u0003\u0002\u0002\u0002\u0321",
    "W\u0003\u0002\u0002\u0002\u0322\u0327\u0005Z.\u0002\u0323\u0324\u0007",
    "\u0098\u0002\u0002\u0324\u0326\u0005Z.\u0002\u0325\u0323\u0003\u0002",
    "\u0002\u0002\u0326\u0329\u0003\u0002\u0002\u0002\u0327\u0325\u0003\u0002",
    "\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328Y\u0003\u0002",
    "\u0002\u0002\u0329\u0327\u0003\u0002\u0002\u0002\u032a\u032d\u0005\\",
    "/\u0002\u032b\u032d\u0005^0\u0002\u032c\u032a\u0003\u0002\u0002\u0002",
    "\u032c\u032b\u0003\u0002\u0002\u0002\u032d[\u0003\u0002\u0002\u0002",
    "\u032e\u032f\u0005\u01da\u00ee\u0002\u032f\u0332\u0007\u0099\u0002\u0002",
    "\u0330\u0333\u0005\u01da\u00ee\u0002\u0331\u0333\u0005\u01f4\u00fb\u0002",
    "\u0332\u0330\u0003\u0002\u0002\u0002\u0332\u0331\u0003\u0002\u0002\u0002",
    "\u0333]\u0003\u0002\u0002\u0002\u0334\u0335\u0005\u01da\u00ee\u0002",
    "\u0335\u0338\u0005\u0216\u010c\u0002\u0336\u0339\u0005\u01da\u00ee\u0002",
    "\u0337\u0339\u0005\u01d6\u00ec\u0002\u0338\u0336\u0003\u0002\u0002\u0002",
    "\u0338\u0337\u0003\u0002\u0002\u0002\u0339_\u0003\u0002\u0002\u0002",
    "\u033a\u033b\u0007\u009b\u0002\u0002\u033b\u033c\u0005b2\u0002\u033c",
    "\u033d\u0007\u009c\u0002\u0002\u033da\u0003\u0002\u0002\u0002\u033e",
    "\u0343\u0005d3\u0002\u033f\u0340\u0007\u0098\u0002\u0002\u0340\u0342",
    "\u0005d3\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0342\u0345\u0003",
    "\u0002\u0002\u0002\u0343\u0341\u0003\u0002\u0002\u0002\u0343\u0344\u0003",
    "\u0002\u0002\u0002\u0344c\u0003\u0002\u0002\u0002\u0345\u0343\u0003",
    "\u0002\u0002\u0002\u0346\u0347\u0005\u01d6\u00ec\u0002\u0347e\u0003",
    "\u0002\u0002\u0002\u0348\u034c\t\u0005\u0002\u0002\u0349\u034a\u0007",
    "\u0093\u0002\u0002\u034a\u034b\u0007&\u0002\u0002\u034b\u034d\u0007",
    "\u0096\u0002\u0002\u034c\u0349\u0003\u0002\u0002\u0002\u034c\u034d\u0003",
    "\u0002\u0002\u0002\u034dg\u0003\u0002\u0002\u0002\u034e\u035f\u0005",
    "~@\u0002\u034f\u035f\u0005\u0086D\u0002\u0350\u035f\u0005\u0090I\u0002",
    "\u0351\u035f\u0005\u00d6l\u0002\u0352\u035f\u0005l7\u0002\u0353\u035f",
    "\u0005n8\u0002\u0354\u035f\u0005\u00dco\u0002\u0355\u035f\u0005\u00fe",
    "\u0080\u0002\u0356\u035f\u0005\u0108\u0085\u0002\u0357\u035f\u0005\u0112",
    "\u008a\u0002\u0358\u035f\u0005\u009aN\u0002\u0359\u035f\u0005\u0128",
    "\u0095\u0002\u035a\u035f\u0005\u012a\u0096\u0002\u035b\u035f\u0005\u0132",
    "\u009a\u0002\u035c\u035f\u0005\u0138\u009d\u0002\u035d\u035f\u0005\u0142",
    "\u00a2\u0002\u035e\u034e\u0003\u0002\u0002\u0002\u035e\u034f\u0003\u0002",
    "\u0002\u0002\u035e\u0350\u0003\u0002\u0002\u0002\u035e\u0351\u0003\u0002",
    "\u0002\u0002\u035e\u0352\u0003\u0002\u0002\u0002\u035e\u0353\u0003\u0002",
    "\u0002\u0002\u035e\u0354\u0003\u0002\u0002\u0002\u035e\u0355\u0003\u0002",
    "\u0002\u0002\u035e\u0356\u0003\u0002\u0002\u0002\u035e\u0357\u0003\u0002",
    "\u0002\u0002\u035e\u0358\u0003\u0002\u0002\u0002\u035e\u0359\u0003\u0002",
    "\u0002\u0002\u035e\u035a\u0003\u0002\u0002\u0002\u035e\u035b\u0003\u0002",
    "\u0002\u0002\u035e\u035c\u0003\u0002\u0002\u0002\u035e\u035d\u0003\u0002",
    "\u0002\u0002\u035f\u0361\u0003\u0002\u0002\u0002\u0360\u0362\u0007\u009a",
    "\u0002\u0002\u0361\u0360\u0003\u0002\u0002\u0002\u0361\u0362\u0003\u0002",
    "\u0002\u0002\u0362i\u0003\u0002\u0002\u0002\u0363\u0365\u0005h5\u0002",
    "\u0364\u0363\u0003\u0002\u0002\u0002\u0365\u0366\u0003\u0002\u0002\u0002",
    "\u0366\u0364\u0003\u0002\u0002\u0002\u0366\u0367\u0003\u0002\u0002\u0002",
    "\u0367k\u0003\u0002\u0002\u0002\u0368\u0369\u0005f4\u0002\u0369\u036a",
    "\u0007\u0004\u0002\u0002\u036a\u036b\u0005\u0202\u0102\u0002\u036b\u036c",
    "\u0005|?\u0002\u036cm\u0003\u0002\u0002\u0002\u036d\u036e\u0005p9\u0002",
    "\u036e\u0370\u0005r:\u0002\u036f\u0371\u0005\u00a0Q\u0002\u0370\u036f",
    "\u0003\u0002\u0002\u0002\u0370\u0371\u0003\u0002\u0002\u0002\u0371\u0372",
    "\u0003\u0002\u0002\u0002\u0372\u0374\u0005t;\u0002\u0373\u0375\u0005",
    "x=\u0002\u0374\u0373\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002",
    "\u0002\u0002\u0375o\u0003\u0002\u0002\u0002\u0376\u0378\u0005\u0154",
    "\u00ab\u0002\u0377\u0376\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002",
    "\u0002\u0002\u0378\u0379\u0003\u0002\u0002\u0002\u0379\u037a\u0007\u0017",
    "\u0002\u0002\u037aq\u0003\u0002\u0002\u0002\u037b\u037e\u0005\u0202",
    "\u0102\u0002\u037c\u037e\u0005\u021e\u0110\u0002\u037d\u037b\u0003\u0002",
    "\u0002\u0002\u037d\u037c\u0003\u0002\u0002\u0002\u037es\u0003\u0002",
    "\u0002\u0002\u037f\u0384\u0005\u00a6T\u0002\u0380\u0382\u0007.\u0002",
    "\u0002\u0381\u0380\u0003\u0002\u0002\u0002\u0381\u0382\u0003\u0002\u0002",
    "\u0002\u0382\u0385\u0003\u0002\u0002\u0002\u0383\u0385\u0007/\u0002",
    "\u0002\u0384\u0381\u0003\u0002\u0002\u0002\u0384\u0383\u0003\u0002\u0002",
    "\u0002\u0385\u0387\u0003\u0002\u0002\u0002\u0386\u0388\u0005v<\u0002",
    "\u0387\u0386\u0003\u0002\u0002\u0002\u0387\u0388\u0003\u0002\u0002\u0002",
    "\u0388u\u0003\u0002\u0002\u0002\u0389\u038a\u0005\u01d8\u00ed\u0002",
    "\u038aw\u0003\u0002\u0002\u0002\u038b\u038c\u0005|?\u0002\u038cy\u0003",
    "\u0002\u0002\u0002\u038d\u038f\u0005\u00aeX\u0002\u038e\u038d\u0003",
    "\u0002\u0002\u0002\u038e\u038f\u0003\u0002\u0002\u0002\u038f{\u0003",
    "\u0002\u0002\u0002\u0390\u0392\u0007\u0092\u0002\u0002\u0391\u0393\u0005",
    "\u00aeX\u0002\u0392\u0391\u0003\u0002\u0002\u0002\u0392\u0393\u0003",
    "\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002\u0002\u0394\u0395\u0007",
    "\u0095\u0002\u0002\u0395}\u0003\u0002\u0002\u0002\u0396\u0398\u0007",
    "\u001a\u0002\u0002\u0397\u0399\u0005\u0080A\u0002\u0398\u0397\u0003",
    "\u0002\u0002\u0002\u0398\u0399\u0003\u0002\u0002\u0002\u0399\u039a\u0003",
    "\u0002\u0002\u0002\u039a\u039b\u0005\u0082B\u0002\u039b\u007f\u0003",
    "\u0002\u0002\u0002\u039c\u039d\t\u0006\u0002\u0002\u039d\u0081\u0003",
    "\u0002\u0002\u0002\u039e\u03a3\u0005\u0084C\u0002\u039f\u03a0\u0007",
    "\u0091\u0002\u0002\u03a0\u03a2\u0005\u0084C\u0002\u03a1\u039f\u0003",
    "\u0002\u0002\u0002\u03a2\u03a5\u0003\u0002\u0002\u0002\u03a3\u03a1\u0003",
    "\u0002\u0002\u0002\u03a3\u03a4\u0003\u0002\u0002\u0002\u03a4\u0083\u0003",
    "\u0002\u0002\u0002\u03a5\u03a3\u0003\u0002\u0002\u0002\u03a6\u03a9\u0005",
    "\u0202\u0102\u0002\u03a7\u03a9\u0005\u021e\u0110\u0002\u03a8\u03a6\u0003",
    "\u0002\u0002\u0002\u03a8\u03a7\u0003\u0002\u0002\u0002\u03a9\u0085\u0003",
    "\u0002\u0002\u0002\u03aa\u03ac\u0005\u0154\u00ab\u0002\u03ab\u03aa\u0003",
    "\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003",
    "\u0002\u0002\u0002\u03ad\u03ae\u0007\"\u0002\u0002\u03ae\u03af\u0005",
    "\u0088E\u0002\u03af\u0087\u0003\u0002\u0002\u0002\u03b0\u03b5\u0005",
    "\u008aF\u0002\u03b1\u03b2\u0007\u0098\u0002\u0002\u03b2\u03b4\u0005",
    "\u008aF\u0002\u03b3\u03b1\u0003\u0002\u0002\u0002\u03b4\u03b7\u0003",
    "\u0002\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003",
    "\u0002\u0002\u0002\u03b6\u0089\u0003\u0002\u0002\u0002\u03b7\u03b5\u0003",
    "\u0002\u0002\u0002\u03b8\u03ba\u0005\u0158\u00ad\u0002\u03b9\u03bb\u0005",
    "\u008cG\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003",
    "\u0002\u0002\u0002\u03bb\u008b\u0003\u0002\u0002\u0002\u03bc\u03bd\u0007",
    "\u00a3\u0002\u0002\u03bd\u03be\u0005\u0172\u00ba\u0002\u03be\u008d\u0003",
    "\u0002\u0002\u0002\u03bf\u03c0\u0005\u0202\u0102\u0002\u03c0\u008f\u0003",
    "\u0002\u0002\u0002\u03c1\u03c2\u0005\u0092J\u0002\u03c2\u03c5\u0005",
    "\u008eH\u0002\u03c3\u03c4\u0007\u0099\u0002\u0002\u03c4\u03c6\u0005",
    "\u01d6\u00ec\u0002\u03c5\u03c3\u0003\u0002\u0002\u0002\u03c5\u03c6\u0003",
    "\u0002\u0002\u0002\u03c6\u0091\u0003\u0002\u0002\u0002\u03c7\u03c8\u0005",
    "f4\u0002\u03c8\u03c9\t\u0002\u0002\u0002\u03c9\u0093\u0003\u0002\u0002",
    "\u0002\u03ca\u03cd\u0005\u0096L\u0002\u03cb\u03cd\u0005\u0098M\u0002",
    "\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cc\u03cb\u0003\u0002\u0002\u0002",
    "\u03cd\u0095\u0003\u0002\u0002\u0002\u03ce\u03cf\u0005\u0184\u00c3\u0002",
    "\u03cf\u0097\u0003\u0002\u0002\u0002\u03d0\u03d1\u0005\u008eH\u0002",
    "\u03d1\u0099\u0003\u0002\u0002\u0002\u03d2\u03d4\u0005\u009cO\u0002",
    "\u03d3\u03d5\u0005\u00a0Q\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002",
    "\u03d4\u03d5\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002",
    "\u03d6\u03d8\u0005\u00a6T\u0002\u03d7\u03d9\t\u0007\u0002\u0002\u03d8",
    "\u03d7\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003\u0002\u0002\u0002\u03d9",
    "\u03da\u0003\u0002\u0002\u0002\u03da\u03db\u0005\u009eP\u0002\u03db",
    "\u009b\u0003\u0002\u0002\u0002\u03dc\u03dd\u00071\u0002\u0002\u03dd",
    "\u009d\u0003\u0002\u0002\u0002\u03de\u03df\u0005|?\u0002\u03df\u009f",
    "\u0003\u0002\u0002\u0002\u03e0\u03e1\u0007\u009b\u0002\u0002\u03e1\u03e2",
    "\u0005\u00a2R\u0002\u03e2\u03e3\u0007\u009c\u0002\u0002\u03e3\u00a1",
    "\u0003\u0002\u0002\u0002\u03e4\u03e9\u0005\u00a4S\u0002\u03e5\u03e6",
    "\u0007\u0098\u0002\u0002\u03e6\u03e8\u0005\u00a4S\u0002\u03e7\u03e5",
    "\u0003\u0002\u0002\u0002\u03e8\u03eb\u0003\u0002\u0002\u0002\u03e9\u03e7",
    "\u0003\u0002\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea\u00a3",
    "\u0003\u0002\u0002\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03ec\u03ef",
    "\u0005\u01dc\u00ef\u0002\u03ed\u03ee\u0007\u0099\u0002\u0002\u03ee\u03f0",
    "\u0005\u01d6\u00ec\u0002\u03ef\u03ed\u0003\u0002\u0002\u0002\u03ef\u03f0",
    "\u0003\u0002\u0002\u0002\u03f0\u00a5\u0003\u0002\u0002\u0002\u03f1\u03f3",
    "\u0007\u0093\u0002\u0002\u03f2\u03f4\u0005\u00a8U\u0002\u03f3\u03f2",
    "\u0003\u0002\u0002\u0002\u03f3\u03f4\u0003\u0002\u0002\u0002\u03f4\u03f5",
    "\u0003\u0002\u0002\u0002\u03f5\u03f6\u0007\u0096\u0002\u0002\u03f6\u00a7",
    "\u0003\u0002\u0002\u0002\u03f7\u03fc\u0005\u00aaV\u0002\u03f8\u03f9",
    "\u0007\u0098\u0002\u0002\u03f9\u03fb\u0005\u00aaV\u0002\u03fa\u03f8",
    "\u0003\u0002\u0002\u0002\u03fb\u03fe\u0003\u0002\u0002\u0002\u03fc\u03fa",
    "\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u00a9",
    "\u0003\u0002\u0002\u0002\u03fe\u03fc\u0003\u0002\u0002\u0002\u03ff\u0402",
    "\u0005\u01dc\u00ef\u0002\u0400\u0401\u0007\u0099\u0002\u0002\u0401\u0403",
    "\u0005\u01d6\u00ec\u0002\u0402\u0400\u0003\u0002\u0002\u0002\u0402\u0403",
    "\u0003\u0002\u0002\u0002\u0403\u00ab\u0003\u0002\u0002\u0002\u0404\u040d",
    "\u0005\u0004\u0003\u0002\u0405\u040d\u0005h5\u0002\u0406\u040d\u0005",
    "\u00b0Y\u0002\u0407\u040d\u0005\u0014\u000b\u0002\u0408\u040d\u0005",
    ",\u0017\u0002\u0409\u040d\u00052\u001a\u0002\u040a\u040d\u0005> \u0002",
    "\u040b\u040d\u0005\u0172\u00ba\u0002\u040c\u0404\u0003\u0002\u0002\u0002",
    "\u040c\u0405\u0003\u0002\u0002\u0002\u040c\u0406\u0003\u0002\u0002\u0002",
    "\u040c\u0407\u0003\u0002\u0002\u0002\u040c\u0408\u0003\u0002\u0002\u0002",
    "\u040c\u0409\u0003\u0002\u0002\u0002\u040c\u040a\u0003\u0002\u0002\u0002",
    "\u040c\u040b\u0003\u0002\u0002\u0002\u040d\u040f\u0003\u0002\u0002\u0002",
    "\u040e\u0410\u0007\u009a\u0002\u0002\u040f\u040e\u0003\u0002\u0002\u0002",
    "\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u00ad\u0003\u0002\u0002\u0002",
    "\u0411\u0413\u0005\u00acW\u0002\u0412\u0411\u0003\u0002\u0002\u0002",
    "\u0413\u0414\u0003\u0002\u0002\u0002\u0414\u0412\u0003\u0002\u0002\u0002",
    "\u0414\u0415\u0003\u0002\u0002\u0002\u0415\u00af\u0003\u0002\u0002\u0002",
    "\u0416\u0419\u0005\u0094K\u0002\u0417\u0419\u0005\u0090I\u0002\u0418",
    "\u0416\u0003\u0002\u0002\u0002\u0418\u0417\u0003\u0002\u0002\u0002\u0419",
    "\u041a\u0003\u0002\u0002\u0002\u041a\u041d\u0005\u00b2Z\u0002\u041b",
    "\u041e\u0005\u0094K\u0002\u041c\u041e\u0005\u00b4[\u0002\u041d\u041b",
    "\u0003\u0002\u0002\u0002\u041d\u041c\u0003\u0002\u0002\u0002\u041e\u00b1",
    "\u0003\u0002\u0002\u0002\u041f\u0420\t\b\u0002\u0002\u0420\u00b3\u0003",
    "\u0002\u0002\u0002\u0421\u0425\u0005\u022c\u0117\u0002\u0422\u0425\u0005",
    "\u00b6\\\u0002\u0423\u0425\u0005\u00bc_\u0002\u0424\u0421\u0003\u0002",
    "\u0002\u0002\u0424\u0422\u0003\u0002\u0002\u0002\u0424\u0423\u0003\u0002",
    "\u0002\u0002\u0425\u00b5\u0003\u0002\u0002\u0002\u0426\u0428\u0007\u0094",
    "\u0002\u0002\u0427\u0429\u0005\u00b8]\u0002\u0428\u0427\u0003\u0002",
    "\u0002\u0002\u0428\u0429\u0003\u0002\u0002\u0002\u0429\u042a\u0003\u0002",
    "\u0002\u0002\u042a\u042b\u0007\u0097\u0002\u0002\u042b\u00b7\u0003\u0002",
    "\u0002\u0002\u042c\u0431\u0005\u00ba^\u0002\u042d\u042e\u0007\u0098",
    "\u0002\u0002\u042e\u0430\u0005\u00ba^\u0002\u042f\u042d\u0003\u0002",
    "\u0002\u0002\u0430\u0433\u0003\u0002\u0002\u0002\u0431\u042f\u0003\u0002",
    "\u0002\u0002\u0431\u0432\u0003\u0002\u0002\u0002\u0432\u0435\u0003\u0002",
    "\u0002\u0002\u0433\u0431\u0003\u0002\u0002\u0002\u0434\u0436\u0007\u0098",
    "\u0002\u0002\u0435\u0434\u0003\u0002\u0002\u0002\u0435\u0436\u0003\u0002",
    "\u0002\u0002\u0436\u00b9\u0003\u0002\u0002\u0002\u0437\u0438\u0005\u0172",
    "\u00ba\u0002\u0438\u00bb\u0003\u0002\u0002\u0002\u0439\u043c\u0007\u0094",
    "\u0002\u0002\u043a\u043d\u0005\u00be`\u0002\u043b\u043d\u0007\u0099",
    "\u0002\u0002\u043c\u043a\u0003\u0002\u0002\u0002\u043c\u043b\u0003\u0002",
    "\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e\u043f\u0007\u0097",
    "\u0002\u0002\u043f\u00bd\u0003\u0002\u0002\u0002\u0440\u0445\u0005\u00c0",
    "a\u0002\u0441\u0442\u0007\u0098\u0002\u0002\u0442\u0444\u0005\u00c0",
    "a\u0002\u0443\u0441\u0003\u0002\u0002\u0002\u0444\u0447\u0003\u0002",
    "\u0002\u0002\u0445\u0443\u0003\u0002\u0002\u0002\u0445\u0446\u0003\u0002",
    "\u0002\u0002\u0446\u0449\u0003\u0002\u0002\u0002\u0447\u0445\u0003\u0002",
    "\u0002\u0002\u0448\u044a\u0007\u0098\u0002\u0002\u0449\u0448\u0003\u0002",
    "\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002\u044a\u00bf\u0003\u0002",
    "\u0002\u0002\u044b\u044c\u0005\u0172\u00ba\u0002\u044c\u044d\u0007\u0099",
    "\u0002\u0002\u044d\u044e\u0005\u0172\u00ba\u0002\u044e\u00c1\u0003\u0002",
    "\u0002\u0002\u044f\u0457\u0007\u0092\u0002\u0002\u0450\u0452\u0005\u00c4",
    "c\u0002\u0451\u0453\u0005\u00c6d\u0002\u0452\u0451\u0003\u0002\u0002",
    "\u0002\u0452\u0453\u0003\u0002\u0002\u0002\u0453\u0458\u0003\u0002\u0002",
    "\u0002\u0454\u0455\u0005\u00c6d\u0002\u0455\u0456\u0005\u00c4c\u0002",
    "\u0456\u0458\u0003\u0002\u0002\u0002\u0457\u0450\u0003\u0002\u0002\u0002",
    "\u0457\u0454\u0003\u0002\u0002\u0002\u0458\u0459\u0003\u0002\u0002\u0002",
    "\u0459\u045a\u0007\u0095\u0002\u0002\u045a\u045d\u0003\u0002\u0002\u0002",
    "\u045b\u045d\u0005|?\u0002\u045c\u044f\u0003\u0002\u0002\u0002\u045c",
    "\u045b\u0003\u0002\u0002\u0002\u045d\u00c3\u0003\u0002\u0002\u0002\u045e",
    "\u0460\u0005\u0156\u00ac\u0002\u045f\u045e\u0003\u0002\u0002\u0002\u045f",
    "\u0460\u0003\u0002\u0002\u0002\u0460\u0461\u0003\u0002\u0002\u0002\u0461",
    "\u0463\u0007%\u0002\u0002\u0462\u0464\u0005|?\u0002\u0463\u0462\u0003",
    "\u0002\u0002\u0002\u0463\u0464\u0003\u0002\u0002\u0002\u0464\u00c5\u0003",
    "\u0002\u0002\u0002\u0465\u0467\u0005\u0156\u00ac\u0002\u0466\u0465\u0003",
    "\u0002\u0002\u0002\u0466\u0467\u0003\u0002\u0002\u0002\u0467\u0468\u0003",
    "\u0002\u0002\u0002\u0468\u046a\u0007&\u0002\u0002\u0469\u046b\u0005",
    "\u00c8e\u0002\u046a\u0469\u0003\u0002\u0002\u0002\u046a\u046b\u0003",
    "\u0002\u0002\u0002\u046b\u046d\u0003\u0002\u0002\u0002\u046c\u046e\u0005",
    "|?\u0002\u046d\u046c\u0003\u0002\u0002\u0002\u046d\u046e\u0003\u0002",
    "\u0002\u0002\u046e\u00c7\u0003\u0002\u0002\u0002\u046f\u0470\u0007\u0093",
    "\u0002\u0002\u0470\u0471\u0005\u0202\u0102\u0002\u0471\u0472\u0007\u0096",
    "\u0002\u0002\u0472\u00c9\u0003\u0002\u0002\u0002\u0473\u047b\u0007\u0092",
    "\u0002\u0002\u0474\u0476\u0005\u00ccg\u0002\u0475\u0477\u0005\u00ce",
    "h\u0002\u0476\u0475\u0003\u0002\u0002\u0002\u0476\u0477\u0003\u0002",
    "\u0002\u0002\u0477\u047c\u0003\u0002\u0002\u0002\u0478\u0479\u0005\u00ce",
    "h\u0002\u0479\u047a\u0005\u00ccg\u0002\u047a\u047c\u0003\u0002\u0002",
    "\u0002\u047b\u0474\u0003\u0002\u0002\u0002\u047b\u0478\u0003\u0002\u0002",
    "\u0002\u047c\u047d\u0003\u0002\u0002\u0002\u047d\u047e\u0007\u0095\u0002",
    "\u0002\u047e\u00cb\u0003\u0002\u0002\u0002\u047f\u0481\u0005\u0156\u00ac",
    "\u0002\u0480\u047f\u0003\u0002\u0002\u0002\u0480\u0481\u0003\u0002\u0002",
    "\u0002\u0481\u0482\u0003\u0002\u0002\u0002\u0482\u0483\u0007%\u0002",
    "\u0002\u0483\u00cd\u0003\u0002\u0002\u0002\u0484\u0486\u0005\u0156\u00ac",
    "\u0002\u0485\u0484\u0003\u0002\u0002\u0002\u0485\u0486\u0003\u0002\u0002",
    "\u0002\u0486\u0487\u0003\u0002\u0002\u0002\u0487\u0488\u0007&\u0002",
    "\u0002\u0488\u00cf\u0003\u0002\u0002\u0002\u0489\u0492\u0007\u0092\u0002",
    "\u0002\u048a\u048c\u0005\u00d2j\u0002\u048b\u048d\u0005\u00d4k\u0002",
    "\u048c\u048b\u0003\u0002\u0002\u0002\u048c\u048d\u0003\u0002\u0002\u0002",
    "\u048d\u0493\u0003\u0002\u0002\u0002\u048e\u0490\u0005\u00d4k\u0002",
    "\u048f\u0491\u0005\u00d2j\u0002\u0490\u048f\u0003\u0002\u0002\u0002",
    "\u0490\u0491\u0003\u0002\u0002\u0002\u0491\u0493\u0003\u0002\u0002\u0002",
    "\u0492\u048a\u0003\u0002\u0002\u0002\u0492\u048e\u0003\u0002\u0002\u0002",
    "\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0495\u0007\u0095\u0002\u0002",
    "\u0495\u00d1\u0003\u0002\u0002\u0002\u0496\u0498\u0007\'\u0002\u0002",
    "\u0497\u0499\u0005\u00c8e\u0002\u0498\u0497\u0003\u0002\u0002\u0002",
    "\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u049a\u0003\u0002\u0002\u0002",
    "\u049a\u049b\u0005|?\u0002\u049b\u00d3\u0003\u0002\u0002\u0002\u049c",
    "\u049e\u0007(\u0002\u0002\u049d\u049f\u0005\u00c8e\u0002\u049e\u049d",
    "\u0003\u0002\u0002\u0002\u049e\u049f\u0003\u0002\u0002\u0002\u049f\u04a0",
    "\u0003\u0002\u0002\u0002\u04a0\u04a1\u0005|?\u0002\u04a1\u00d5\u0003",
    "\u0002\u0002\u0002\u04a2\u04a4\u0005f4\u0002\u04a3\u04a2\u0003\u0002",
    "\u0002\u0002\u04a3\u04a4\u0003\u0002\u0002\u0002\u04a4\u04a5\u0003\u0002",
    "\u0002\u0002\u04a5\u04a6\u0007B\u0002\u0002\u04a6\u04a8\u0005\u00d8",
    "m\u0002\u04a7\u04a9\u0005\u00a0Q\u0002\u04a8\u04a7\u0003\u0002\u0002",
    "\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u04aa\u0003\u0002\u0002",
    "\u0002\u04aa\u04ab\u0005\u00dan\u0002\u04ab\u00d7\u0003\u0002\u0002",
    "\u0002\u04ac\u04ad\u0005\u0202\u0102\u0002\u04ad\u00d9\u0003\u0002\u0002",
    "\u0002\u04ae\u04af\u0007\u00a3\u0002\u0002\u04af\u04b0\u0005\u01d6\u00ec",
    "\u0002\u04b0\u00db\u0003\u0002\u0002\u0002\u04b1\u04b3\u0005f4\u0002",
    "\u04b2\u04b1\u0003\u0002\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002",
    "\u04b3\u04b6\u0003\u0002\u0002\u0002\u04b4\u04b7\u0005\u00dep\u0002",
    "\u04b5\u04b7\u0005\u00eex\u0002\u04b6\u04b4\u0003\u0002\u0002\u0002",
    "\u04b6\u04b5\u0003\u0002\u0002\u0002\u04b7\u00dd\u0003\u0002\u0002\u0002",
    "\u04b8\u04ba\u00070\u0002\u0002\u04b9\u04b8\u0003\u0002\u0002\u0002",
    "\u04b9\u04ba\u0003\u0002\u0002\u0002\u04ba\u04bb\u0003\u0002\u0002\u0002",
    "\u04bb\u04bc\u0007\u0014\u0002\u0002\u04bc\u04be\u0005\u00eav\u0002",
    "\u04bd\u04bf\u0005\u00a0Q\u0002\u04be\u04bd\u0003\u0002\u0002\u0002",
    "\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c1\u0003\u0002\u0002\u0002",
    "\u04c0\u04c2\u0005\u01fe\u0100\u0002\u04c1\u04c0\u0003\u0002\u0002\u0002",
    "\u04c1\u04c2\u0003\u0002\u0002\u0002\u04c2\u04c3\u0003\u0002\u0002\u0002",
    "\u04c3\u04c5\u0007\u0092\u0002\u0002\u04c4\u04c6\u0005\u00e0q\u0002",
    "\u04c5\u04c4\u0003\u0002\u0002\u0002\u04c5\u04c6\u0003\u0002\u0002\u0002",
    "\u04c6\u04c7\u0003\u0002\u0002\u0002\u04c7\u04c8\u0007\u0095\u0002\u0002",
    "\u04c8\u00df\u0003\u0002\u0002\u0002\u04c9\u04cb\u0005\u00e2r\u0002",
    "\u04ca\u04c9\u0003\u0002\u0002\u0002\u04cb\u04cc\u0003\u0002\u0002\u0002",
    "\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cc\u04cd\u0003\u0002\u0002\u0002",
    "\u04cd\u00e1\u0003\u0002\u0002\u0002\u04ce\u04d1\u0005h5\u0002\u04cf",
    "\u04d1\u0005\u00e4s\u0002\u04d0\u04ce\u0003\u0002\u0002\u0002\u04d0",
    "\u04cf\u0003\u0002\u0002\u0002\u04d1\u00e3\u0003\u0002\u0002\u0002\u04d2",
    "\u04d4\u00070\u0002\u0002\u04d3\u04d2\u0003\u0002\u0002\u0002\u04d3",
    "\u04d4\u0003\u0002\u0002\u0002\u04d4\u04d5\u0003\u0002\u0002\u0002\u04d5",
    "\u04d6\u0007\u000b\u0002\u0002\u04d6\u04d7\u0005\u00e6t\u0002\u04d7",
    "\u00e5\u0003\u0002\u0002\u0002\u04d8\u04dd\u0005\u00e8u\u0002\u04d9",
    "\u04da\u0007\u0098\u0002\u0002\u04da\u04dc\u0005\u00e8u\u0002\u04db",
    "\u04d9\u0003\u0002\u0002\u0002\u04dc\u04df\u0003\u0002\u0002\u0002\u04dd",
    "\u04db\u0003\u0002\u0002\u0002\u04dd\u04de\u0003\u0002\u0002\u0002\u04de",
    "\u00e7\u0003\u0002\u0002\u0002\u04df\u04dd\u0003\u0002\u0002\u0002\u04e0",
    "\u04ea\u0005\u01f8\u00fd\u0002\u04e1\u04e7\u0005\u00ecw\u0002\u04e2",
    "\u04e8\u0005\u01de\u00f0\u0002\u04e3\u04e4\u0007\u0093\u0002\u0002\u04e4",
    "\u04e5\u0005\u01d6\u00ec\u0002\u04e5\u04e6\u0007\u0096\u0002\u0002\u04e6",
    "\u04e8\u0003\u0002\u0002\u0002\u04e7\u04e2\u0003\u0002\u0002\u0002\u04e7",
    "\u04e3\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8",
    "\u04ea\u0003\u0002\u0002\u0002\u04e9\u04e0\u0003\u0002\u0002\u0002\u04e9",
    "\u04e1\u0003\u0002\u0002\u0002\u04ea\u00e9\u0003\u0002\u0002\u0002\u04eb",
    "\u04ec\u0005\u0202\u0102\u0002\u04ec\u00eb\u0003\u0002\u0002\u0002\u04ed",
    "\u04ee\u0005\u0202\u0102\u0002\u04ee\u00ed\u0003\u0002\u0002\u0002\u04ef",
    "\u04f0\u0007\u0014\u0002\u0002\u04f0\u04f2\u0005\u00eav\u0002\u04f1",
    "\u04f3\u0005\u00a0Q\u0002\u04f2\u04f1\u0003\u0002\u0002\u0002\u04f2",
    "\u04f3\u0003\u0002\u0002\u0002\u04f3\u04f4\u0003\u0002\u0002\u0002\u04f4",
    "\u04f5\u0005\u01fe\u0100\u0002\u04f5\u04f6\u0007\u0092\u0002\u0002\u04f6",
    "\u04f7\u0005\u00f0y\u0002\u04f7\u04f8\u0007\u0095\u0002\u0002\u04f8",
    "\u00ef\u0003\u0002\u0002\u0002\u04f9\u04fb\u0005\u00f2z\u0002\u04fa",
    "\u04f9\u0003\u0002\u0002\u0002\u04fb\u04fc\u0003\u0002\u0002\u0002\u04fc",
    "\u04fa\u0003\u0002\u0002\u0002\u04fc\u04fd\u0003\u0002\u0002\u0002\u04fd",
    "\u00f1\u0003\u0002\u0002\u0002\u04fe\u0501\u0005h5\u0002\u04ff\u0501",
    "\u0005\u00f4{\u0002\u0500\u04fe\u0003\u0002\u0002\u0002\u0500\u04ff",
    "\u0003\u0002\u0002\u0002\u0501\u00f3\u0003\u0002\u0002\u0002\u0502\u0503",
    "\u0007\u000b\u0002\u0002\u0503\u0504\u0005\u00f6|\u0002\u0504\u00f5",
    "\u0003\u0002\u0002\u0002\u0505\u050a\u0005\u00f8}\u0002\u0506\u0507",
    "\u0007\u0098\u0002\u0002\u0507\u0509\u0005\u00f8}\u0002\u0508\u0506",
    "\u0003\u0002\u0002\u0002\u0509\u050c\u0003\u0002\u0002\u0002\u050a\u0508",
    "\u0003\u0002\u0002\u0002\u050a\u050b\u0003\u0002\u0002\u0002\u050b\u00f7",
    "\u0003\u0002\u0002\u0002\u050c\u050a\u0003\u0002\u0002\u0002\u050d\u050f",
    "\u0005\u00ecw\u0002\u050e\u0510\u0005\u00fa~\u0002\u050f\u050e\u0003",
    "\u0002\u0002\u0002\u050f\u0510\u0003\u0002\u0002\u0002\u0510\u00f9\u0003",
    "\u0002\u0002\u0002\u0511\u0512\u0007\u00a3\u0002\u0002\u0512\u0513\u0005",
    "\u00fc\u007f\u0002\u0513\u00fb\u0003\u0002\u0002\u0002\u0514\u0518\u0005",
    "\u022e\u0118\u0002\u0515\u0518\u0005\u023a\u011e\u0002\u0516\u0518\u0005",
    "\u0230\u0119\u0002\u0517\u0514\u0003\u0002\u0002\u0002\u0517\u0515\u0003",
    "\u0002\u0002\u0002\u0517\u0516\u0003\u0002\u0002\u0002\u0518\u00fd\u0003",
    "\u0002\u0002\u0002\u0519\u051b\u0005f4\u0002\u051a\u0519\u0003\u0002",
    "\u0002\u0002\u051a\u051b\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002",
    "\u0002\u0002\u051c\u051d\u0007+\u0002\u0002\u051d\u051f\u0005\u0100",
    "\u0081\u0002\u051e\u0520\u0005\u00a0Q\u0002\u051f\u051e\u0003\u0002",
    "\u0002\u0002\u051f\u0520\u0003\u0002\u0002\u0002\u0520\u0522\u0003\u0002",
    "\u0002\u0002\u0521\u0523\u0005\u01fe\u0100\u0002\u0522\u0521\u0003\u0002",
    "\u0002\u0002\u0522\u0523\u0003\u0002\u0002\u0002\u0523\u0524\u0003\u0002",
    "\u0002\u0002\u0524\u0525\u0005\u0102\u0082\u0002\u0525\u00ff\u0003\u0002",
    "\u0002\u0002\u0526\u0527\u0005\u0202\u0102\u0002\u0527\u0101\u0003\u0002",
    "\u0002\u0002\u0528\u0529\u0007\u0092\u0002\u0002\u0529\u052a\u0005\u0104",
    "\u0083\u0002\u052a\u052b\u0007\u0095\u0002\u0002\u052b\u0103\u0003\u0002",
    "\u0002\u0002\u052c\u052e\u0005\u0106\u0084\u0002\u052d\u052c\u0003\u0002",
    "\u0002\u0002\u052e\u0531\u0003\u0002\u0002\u0002\u052f\u052d\u0003\u0002",
    "\u0002\u0002\u052f\u0530\u0003\u0002\u0002\u0002\u0530\u0105\u0003\u0002",
    "\u0002\u0002\u0531\u052f\u0003\u0002\u0002\u0002\u0532\u0533\u0005h",
    "5\u0002\u0533\u0107\u0003\u0002\u0002\u0002\u0534\u0536\u0005f4\u0002",
    "\u0535\u0534\u0003\u0002\u0002\u0002\u0535\u0536\u0003\u0002\u0002\u0002",
    "\u0536\u0538\u0003\u0002\u0002\u0002\u0537\u0539\u0007\u001c\u0002\u0002",
    "\u0538\u0537\u0003\u0002\u0002\u0002\u0538\u0539\u0003\u0002\u0002\u0002",
    "\u0539\u053f\u0003\u0002\u0002\u0002\u053a\u053c\u0007\u001c\u0002\u0002",
    "\u053b\u053d\u0005f4\u0002\u053c\u053b\u0003\u0002\u0002\u0002\u053c",
    "\u053d\u0003\u0002\u0002\u0002\u053d\u053f\u0003\u0002\u0002\u0002\u053e",
    "\u0535\u0003\u0002\u0002\u0002\u053e\u053a\u0003\u0002\u0002\u0002\u053f",
    "\u0540\u0003\u0002\u0002\u0002\u0540\u0541\u0007\r\u0002\u0002\u0541",
    "\u0543\u0005\u010a\u0086\u0002\u0542\u0544\u0005\u00a0Q\u0002\u0543",
    "\u0542\u0003\u0002\u0002\u0002\u0543\u0544\u0003\u0002\u0002\u0002\u0544",
    "\u0546\u0003\u0002\u0002\u0002\u0545\u0547\u0005\u01fe\u0100\u0002\u0546",
    "\u0545\u0003\u0002\u0002\u0002\u0546\u0547\u0003\u0002\u0002\u0002\u0547",
    "\u0548\u0003\u0002\u0002\u0002\u0548\u0549\u0005\u010c\u0087\u0002\u0549",
    "\u0109\u0003\u0002\u0002\u0002\u054a\u054b\u0005\u0202\u0102\u0002\u054b",
    "\u010b\u0003\u0002\u0002\u0002\u054c\u054d\u0007\u0092\u0002\u0002\u054d",
    "\u054e\u0005\u010e\u0088\u0002\u054e\u054f\u0007\u0095\u0002\u0002\u054f",
    "\u010d\u0003\u0002\u0002\u0002\u0550\u0552\u0005\u0110\u0089\u0002\u0551",
    "\u0550\u0003\u0002\u0002\u0002\u0552\u0555\u0003\u0002\u0002\u0002\u0553",
    "\u0551\u0003\u0002\u0002\u0002\u0553\u0554\u0003\u0002\u0002\u0002\u0554",
    "\u010f\u0003\u0002\u0002\u0002\u0555\u0553\u0003\u0002\u0002\u0002\u0556",
    "\u0557\u0005h5\u0002\u0557\u0111\u0003\u0002\u0002\u0002\u0558\u055a",
    "\u0005f4\u0002\u0559\u0558\u0003\u0002\u0002\u0002\u0559\u055a\u0003",
    "\u0002\u0002\u0002\u055a\u055b\u0003\u0002\u0002\u0002\u055b\u055c\u0007",
    "$\u0002\u0002\u055c\u0560\u0005\u0114\u008b\u0002\u055d\u055e\u0007",
    "\u0099\u0002\u0002\u055e\u0561\u0007\r\u0002\u0002\u055f\u0561\u0005",
    "\u01fe\u0100\u0002\u0560\u055d\u0003\u0002\u0002\u0002\u0560\u055f\u0003",
    "\u0002\u0002\u0002\u0560\u0561\u0003\u0002\u0002\u0002\u0561\u0562\u0003",
    "\u0002\u0002\u0002\u0562\u0563\u0005\u0116\u008c\u0002\u0563\u0113\u0003",
    "\u0002\u0002\u0002\u0564\u0565\u0005\u0202\u0102\u0002\u0565\u0115\u0003",
    "\u0002\u0002\u0002\u0566\u0567\u0007\u0092\u0002\u0002\u0567\u0568\u0005",
    "\u0118\u008d\u0002\u0568\u0569\u0007\u0095\u0002\u0002\u0569\u0117\u0003",
    "\u0002\u0002\u0002\u056a\u056c\u0005\u011a\u008e\u0002\u056b\u056a\u0003",
    "\u0002\u0002\u0002\u056c\u056f\u0003\u0002\u0002\u0002\u056d\u056b\u0003",
    "\u0002\u0002\u0002\u056d\u056e\u0003\u0002\u0002\u0002\u056e\u0119\u0003",
    "\u0002\u0002\u0002\u056f\u056d\u0003\u0002\u0002\u0002\u0570\u0571\u0005",
    "\u011c\u008f\u0002\u0571\u011b\u0003\u0002\u0002\u0002\u0572\u0579\u0005",
    "\u011e\u0090\u0002\u0573\u0579\u0005\u0120\u0091\u0002\u0574\u0579\u0005",
    "\u0122\u0092\u0002\u0575\u0579\u0005\u0124\u0093\u0002\u0576\u0579\u0005",
    "\u0126\u0094\u0002\u0577\u0579\u0005\u00d6l\u0002\u0578\u0572\u0003",
    "\u0002\u0002\u0002\u0578\u0573\u0003\u0002\u0002\u0002\u0578\u0574\u0003",
    "\u0002\u0002\u0002\u0578\u0575\u0003\u0002\u0002\u0002\u0578\u0576\u0003",
    "\u0002\u0002\u0002\u0578\u0577\u0003\u0002\u0002\u0002\u0579\u011d\u0003",
    "\u0002\u0002\u0002\u057a\u057b\u0005\u0092J\u0002\u057b\u057c\u0005",
    "\u008eH\u0002\u057c\u057d\u0005\u01d8\u00ed\u0002\u057d\u057e\u0005",
    "\u00caf\u0002\u057e\u011f\u0003\u0002\u0002\u0002\u057f\u0580\u0005",
    "p9\u0002\u0580\u0582\u0005r:\u0002\u0581\u0583\u0005\u00a0Q\u0002\u0582",
    "\u0581\u0003\u0002\u0002\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583",
    "\u0584\u0003\u0002\u0002\u0002\u0584\u0585\u0005t;\u0002\u0585\u0121",
    "\u0003\u0002\u0002\u0002\u0586\u0588\u0005\u009cO\u0002\u0587\u0589",
    "\u0005\u00a0Q\u0002\u0588\u0587\u0003\u0002\u0002\u0002\u0588\u0589",
    "\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002\u058a\u058f",
    "\u0005\u00a6T\u0002\u058b\u058d\u0007.\u0002\u0002\u058c\u058b\u0003",
    "\u0002\u0002\u0002\u058c\u058d\u0003\u0002\u0002\u0002\u058d\u0590\u0003",
    "\u0002\u0002\u0002\u058e\u0590\u0007/\u0002\u0002\u058f\u058c\u0003",
    "\u0002\u0002\u0002\u058f\u058e\u0003\u0002\u0002\u0002\u0590\u0123\u0003",
    "\u0002\u0002\u0002\u0591\u0592\u0005\u0134\u009b\u0002\u0592\u0593\u0005",
    "\u0136\u009c\u0002\u0593\u0594\u0005\u00caf\u0002\u0594\u0125\u0003",
    "\u0002\u0002\u0002\u0595\u0597\u0005f4\u0002\u0596\u0595\u0003\u0002",
    "\u0002\u0002\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u0598\u0003\u0002",
    "\u0002\u0002\u0598\u0599\u00073\u0002\u0002\u0599\u059b\u0005\u00d8",
    "m\u0002\u059a\u059c\u0005\u01fe\u0100\u0002\u059b\u059a\u0003\u0002",
    "\u0002\u0002\u059b\u059c\u0003\u0002\u0002\u0002\u059c\u059e\u0003\u0002",
    "\u0002\u0002\u059d\u059f\u0005\u00dan\u0002\u059e\u059d\u0003\u0002",
    "\u0002\u0002\u059e\u059f\u0003\u0002\u0002\u0002\u059f\u0127\u0003\u0002",
    "\u0002\u0002\u05a0\u05a1\u00072\u0002\u0002\u05a1\u05a2\u0005|?\u0002",
    "\u05a2\u0129\u0003\u0002\u0002\u0002\u05a3\u05a5\u0005f4\u0002\u05a4",
    "\u05a3\u0003\u0002\u0002\u0002\u05a4\u05a5\u0003\u0002\u0002\u0002\u05a5",
    "\u05a6\u0003\u0002\u0002\u0002\u05a6\u05a7\u00074\u0002\u0002\u05a7",
    "\u05a9\u0005\u01da\u00ee\u0002\u05a8\u05aa\u0005\u01fe\u0100\u0002\u05a9",
    "\u05a8\u0003\u0002\u0002\u0002\u05a9\u05aa\u0003\u0002\u0002\u0002\u05aa",
    "\u05ab\u0003\u0002\u0002\u0002\u05ab\u05ac\u0005\u012c\u0097\u0002\u05ac",
    "\u012b\u0003\u0002\u0002\u0002\u05ad\u05ae\u0007\u0092\u0002\u0002\u05ae",
    "\u05af\u0005\u012e\u0098\u0002\u05af\u05b0\u0007\u0095\u0002\u0002\u05b0",
    "\u012d\u0003\u0002\u0002\u0002\u05b1\u05b3\u0005\u0130\u0099\u0002\u05b2",
    "\u05b1\u0003\u0002\u0002\u0002\u05b3\u05b6\u0003\u0002\u0002\u0002\u05b4",
    "\u05b2\u0003\u0002\u0002\u0002\u05b4\u05b5\u0003\u0002\u0002\u0002\u05b5",
    "\u012f\u0003\u0002\u0002\u0002\u05b6\u05b4\u0003\u0002\u0002\u0002\u05b7",
    "\u05b8\u0005h5\u0002\u05b8\u0131\u0003\u0002\u0002\u0002\u05b9\u05ba",
    "\u0005\u0134\u009b\u0002\u05ba\u05be\u0005\u0136\u009c\u0002\u05bb\u05bf",
    "\u0005|?\u0002\u05bc\u05bf\u0005\u00c2b\u0002\u05bd\u05bf\u0005\u00ca",
    "f\u0002\u05be\u05bb\u0003\u0002\u0002\u0002\u05be\u05bc\u0003\u0002",
    "\u0002\u0002\u05be\u05bd\u0003\u0002\u0002\u0002\u05bf\u0133\u0003\u0002",
    "\u0002\u0002\u05c0\u05c2\u0005\u0154\u00ab\u0002\u05c1\u05c0\u0003\u0002",
    "\u0002\u0002\u05c1\u05c2\u0003\u0002\u0002\u0002\u05c2\u05c3\u0003\u0002",
    "\u0002\u0002\u05c3\u05c5\u00075\u0002\u0002\u05c4\u05c6\u0005\u00a0",
    "Q\u0002\u05c5\u05c4\u0003\u0002\u0002\u0002\u05c5\u05c6\u0003\u0002",
    "\u0002\u0002\u05c6\u05c7\u0003\u0002\u0002\u0002\u05c7\u05c8\u0005\u00a6",
    "T\u0002\u05c8\u0135\u0003\u0002\u0002\u0002\u05c9\u05ca\u0005\u0212",
    "\u010a\u0002\u05ca\u05cb\u0005\u01d6\u00ec\u0002\u05cb\u0137\u0003\u0002",
    "\u0002\u0002\u05cc\u05d0\u0005\u013a\u009e\u0002\u05cd\u05d0\u0005\u013c",
    "\u009f\u0002\u05ce\u05d0\u0005\u013e\u00a0\u0002\u05cf\u05cc\u0003\u0002",
    "\u0002\u0002\u05cf\u05cd\u0003\u0002\u0002\u0002\u05cf\u05ce\u0003\u0002",
    "\u0002\u0002\u05d0\u0139\u0003\u0002\u0002\u0002\u05d1\u05d2\u00076",
    "\u0002\u0002\u05d2\u05d3\u0007A\u0002\u0002\u05d3\u05d4\u0005\u021e",
    "\u0110\u0002\u05d4\u013b\u0003\u0002\u0002\u0002\u05d5\u05d6\u0007@",
    "\u0002\u0002\u05d6\u05d7\u0007A\u0002\u0002\u05d7\u05d8\u0005\u021e",
    "\u0110\u0002\u05d8\u013d\u0003\u0002\u0002\u0002\u05d9\u05da\u00077",
    "\u0002\u0002\u05da\u05db\u0007A\u0002\u0002\u05db\u05dd\u0005\u021e",
    "\u0110\u0002\u05dc\u05de\u0005\u0140\u00a1\u0002\u05dd\u05dc\u0003\u0002",
    "\u0002\u0002\u05dd\u05de\u0003\u0002\u0002\u0002\u05de\u013f\u0003\u0002",
    "\u0002\u0002\u05df\u05e0\u0007\u0099\u0002\u0002\u05e0\u05e1\u0005\u0150",
    "\u00a9\u0002\u05e1\u0141\u0003\u0002\u0002\u0002\u05e2\u05e3\u0007;",
    "\u0002\u0002\u05e3\u05e4\u0005\u0150\u00a9\u0002\u05e4\u05e5\u0007\u0092",
    "\u0002\u0002\u05e5\u05e6\u0007\u0095\u0002\u0002\u05e6\u0143\u0003\u0002",
    "\u0002\u0002\u05e7\u05e9\u0005\u0146\u00a4\u0002\u05e8\u05e7\u0003\u0002",
    "\u0002\u0002\u05e9\u05ea\u0003\u0002\u0002\u0002\u05ea\u05e8\u0003\u0002",
    "\u0002\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002\u05eb\u0145\u0003\u0002",
    "\u0002\u0002\u05ec\u05f0\u0005\u0148\u00a5\u0002\u05ed\u05f0\u0005\u014a",
    "\u00a6\u0002\u05ee\u05f0\u0005\u014c\u00a7\u0002\u05ef\u05ec\u0003\u0002",
    "\u0002\u0002\u05ef\u05ed\u0003\u0002\u0002\u0002\u05ef\u05ee\u0003\u0002",
    "\u0002\u0002\u05f0\u0147\u0003\u0002\u0002\u0002\u05f1\u05f2\t\t\u0002",
    "\u0002\u05f2\u05f3\u0007\u0099\u0002\u0002\u05f3\u05f4\u0005\u014e\u00a8",
    "\u0002\u05f4\u0149\u0003\u0002\u0002\u0002\u05f5\u05f6\u0007>\u0002",
    "\u0002\u05f6\u05f7\u0007\u0099\u0002\u0002\u05f7\u05f8\u0005\u0230\u0119",
    "\u0002\u05f8\u014b\u0003\u0002\u0002\u0002\u05f9\u05fa\u0007?\u0002",
    "\u0002\u05fa\u05fb\u0007\u0099\u0002\u0002\u05fb\u05fc\t\n\u0002\u0002",
    "\u05fc\u014d\u0003\u0002\u0002\u0002\u05fd\u0602\u0005\u0150\u00a9\u0002",
    "\u05fe\u05ff\u0007\u0098\u0002\u0002\u05ff\u0601\u0005\u0150\u00a9\u0002",
    "\u0600\u05fe\u0003\u0002\u0002\u0002\u0601\u0604\u0003\u0002\u0002\u0002",
    "\u0602\u0600\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002\u0002",
    "\u0603\u014f\u0003\u0002\u0002\u0002\u0604\u0602\u0003\u0002\u0002\u0002",
    "\u0605\u060a\u0005\u0202\u0102\u0002\u0606\u0607\u0007\u0091\u0002\u0002",
    "\u0607\u0609\u0005\u0202\u0102\u0002\u0608\u0606\u0003\u0002\u0002\u0002",
    "\u0609\u060c\u0003\u0002\u0002\u0002\u060a\u0608\u0003\u0002\u0002\u0002",
    "\u060a\u060b\u0003\u0002\u0002\u0002\u060b\u0151\u0003\u0002\u0002\u0002",
    "\u060c\u060a\u0003\u0002\u0002\u0002\u060d\u0623\u0007\r\u0002\u0002",
    "\u060e\u0623\u0007I\u0002\u0002\u060f\u0623\u0007J\u0002\u0002\u0610",
    "\u0623\u0007\u001c\u0002\u0002\u0611\u0623\u00077\u0002\u0002\u0612",
    "\u0623\u0007K\u0002\u0002\u0613\u0623\u0007L\u0002\u0002\u0614\u0623",
    "\u0007M\u0002\u0002\u0615\u0623\u0007@\u0002\u0002\u0616\u0623\u0007",
    "6\u0002\u0002\u0617\u0623\u0007N\u0002\u0002\u0618\u0623\u0007O\u0002",
    "\u0002\u0619\u061d\u0007Q\u0002\u0002\u061a\u061b\u0007\u0093\u0002",
    "\u0002\u061b\u061c\t\u000b\u0002\u0002\u061c\u061e\u0007\u0096\u0002",
    "\u0002\u061d\u061a\u0003\u0002\u0002\u0002\u061d\u061e\u0003\u0002\u0002",
    "\u0002\u061e\u0623\u0003\u0002\u0002\u0002\u061f\u0623\u0007P\u0002",
    "\u0002\u0620\u0623\u0005f4\u0002\u0621\u0623\u0005\u0156\u00ac\u0002",
    "\u0622\u060d\u0003\u0002\u0002\u0002\u0622\u060e\u0003\u0002\u0002\u0002",
    "\u0622\u060f\u0003\u0002\u0002\u0002\u0622\u0610\u0003\u0002\u0002\u0002",
    "\u0622\u0611\u0003\u0002\u0002\u0002\u0622\u0612\u0003\u0002\u0002\u0002",
    "\u0622\u0613\u0003\u0002\u0002\u0002\u0622\u0614\u0003\u0002\u0002\u0002",
    "\u0622\u0615\u0003\u0002\u0002\u0002\u0622\u0616\u0003\u0002\u0002\u0002",
    "\u0622\u0617\u0003\u0002\u0002\u0002\u0622\u0618\u0003\u0002\u0002\u0002",
    "\u0622\u0619\u0003\u0002\u0002\u0002\u0622\u061f\u0003\u0002\u0002\u0002",
    "\u0622\u0620\u0003\u0002\u0002\u0002\u0622\u0621\u0003\u0002\u0002\u0002",
    "\u0623\u0153\u0003\u0002\u0002\u0002\u0624\u0626\u0005\u0152\u00aa\u0002",
    "\u0625\u0624\u0003\u0002\u0002\u0002\u0626\u0627\u0003\u0002\u0002\u0002",
    "\u0627\u0625\u0003\u0002\u0002\u0002\u0627\u0628\u0003\u0002\u0002\u0002",
    "\u0628\u0155\u0003\u0002\u0002\u0002\u0629\u062a\t\f\u0002\u0002\u062a",
    "\u0157\u0003\u0002\u0002\u0002\u062b\u062f\b\u00ad\u0001\u0002\u062c",
    "\u0630\u0005\u015a\u00ae\u0002\u062d\u0630\u0005\u015c\u00af\u0002\u062e",
    "\u0630\u0005\u0160\u00b1\u0002\u062f\u062c\u0003\u0002\u0002\u0002\u062f",
    "\u062d\u0003\u0002\u0002\u0002\u062f\u062e\u0003\u0002\u0002\u0002\u0630",
    "\u0632\u0003\u0002\u0002\u0002\u0631\u0633\u0005\u01d8\u00ed\u0002\u0632",
    "\u0631\u0003\u0002\u0002\u0002\u0632\u0633\u0003\u0002\u0002\u0002\u0633",
    "\u063b\u0003\u0002\u0002\u0002\u0634\u063b\u0005\u015e\u00b0\u0002\u0635",
    "\u063b\u0005\u0166\u00b4\u0002\u0636\u063b\u0005\u0168\u00b5\u0002\u0637",
    "\u0638\u0007W\u0002\u0002\u0638\u063b\u0005\u01d6\u00ec\u0002\u0639",
    "\u063b\u0005\u016a\u00b6\u0002\u063a\u062b\u0003\u0002\u0002\u0002\u063a",
    "\u0634\u0003\u0002\u0002\u0002\u063a\u0635\u0003\u0002\u0002\u0002\u063a",
    "\u0636\u0003\u0002\u0002\u0002\u063a\u0637\u0003\u0002\u0002\u0002\u063a",
    "\u0639\u0003\u0002\u0002\u0002\u063b\u0641\u0003\u0002\u0002\u0002\u063c",
    "\u063d\f\u0004\u0002\u0002\u063d\u063e\u0007\b\u0002\u0002\u063e\u0640",
    "\u0005\u01d6\u00ec\u0002\u063f\u063c\u0003\u0002\u0002\u0002\u0640\u0643",
    "\u0003\u0002\u0002\u0002\u0641\u063f\u0003\u0002\u0002\u0002\u0641\u0642",
    "\u0003\u0002\u0002\u0002\u0642\u0159\u0003\u0002\u0002\u0002\u0643\u0641",
    "\u0003\u0002\u0002\u0002\u0644\u0645\u0007\u009d\u0002\u0002\u0645\u015b",
    "\u0003\u0002\u0002\u0002\u0646\u0647\u0005\u0202\u0102\u0002\u0647\u015d",
    "\u0003\u0002\u0002\u0002\u0648\u0649\u0007#\u0002\u0002\u0649\u064d",
    "\u0005\u0158\u00ad\u0002\u064a\u064b\u0007\"\u0002\u0002\u064b\u064d",
    "\u0005\u0158\u00ad\u0002\u064c\u0648\u0003\u0002\u0002\u0002\u064c\u064a",
    "\u0003\u0002\u0002\u0002\u064d\u015f\u0003\u0002\u0002\u0002\u064e\u0650",
    "\u0007\u0093\u0002\u0002\u064f\u0651\u0005\u0162\u00b2\u0002\u0650\u064f",
    "\u0003\u0002\u0002\u0002\u0650\u0651\u0003\u0002\u0002\u0002\u0651\u0652",
    "\u0003\u0002\u0002\u0002\u0652\u0653\u0007\u0096\u0002\u0002\u0653\u0161",
    "\u0003\u0002\u0002\u0002\u0654\u0659\u0005\u0164\u00b3\u0002\u0655\u0656",
    "\u0007\u0098\u0002\u0002\u0656\u0658\u0005\u0164\u00b3\u0002\u0657\u0655",
    "\u0003\u0002\u0002\u0002\u0658\u065b\u0003\u0002\u0002\u0002\u0659\u0657",
    "\u0003\u0002\u0002\u0002\u0659\u065a\u0003\u0002\u0002\u0002\u065a\u0163",
    "\u0003\u0002\u0002\u0002\u065b\u0659\u0003\u0002\u0002\u0002\u065c\u065d",
    "\u0005\u0202\u0102\u0002\u065d\u065e\u0007\u0099\u0002\u0002\u065e\u0660",
    "\u0003\u0002\u0002\u0002\u065f\u065c\u0003\u0002\u0002\u0002\u065f\u0660",
    "\u0003\u0002\u0002\u0002\u0660\u0661\u0003\u0002\u0002\u0002\u0661\u0662",
    "\u0005\u0158\u00ad\u0002\u0662\u0165\u0003\u0002\u0002\u0002\u0663\u0665",
    "\u0005\u01da\u00ee\u0002\u0664\u0663\u0003\u0002\u0002\u0002\u0664\u0665",
    "\u0003\u0002\u0002\u0002\u0665\u0666\u0003\u0002\u0002\u0002\u0666\u0667",
    "\u0007\u0091\u0002\u0002\u0667\u0669\u0005\u00ecw\u0002\u0668\u066a",
    "\u0005\u0160\u00b1\u0002\u0669\u0668\u0003\u0002\u0002\u0002\u0669\u066a",
    "\u0003\u0002\u0002\u0002\u066a\u0167\u0003\u0002\u0002\u0002\u066b\u066c",
    "\u0005\u015c\u00af\u0002\u066c\u066d\u0007\u009f\u0002\u0002\u066d\u0169",
    "\u0003\u0002\u0002\u0002\u066e\u066f\u0005\u0172\u00ba\u0002\u066f\u016b",
    "\u0003\u0002\u0002\u0002\u0670\u0672\u0005\u016e\u00b8\u0002\u0671\u0670",
    "\u0003\u0002\u0002\u0002\u0672\u0673\u0003\u0002\u0002\u0002\u0673\u0671",
    "\u0003\u0002\u0002\u0002\u0673\u0674\u0003\u0002\u0002\u0002\u0674\u016d",
    "\u0003\u0002\u0002\u0002\u0675\u0677\u0007\u0093\u0002\u0002\u0676\u0678",
    "\u0005\u016c\u00b7\u0002\u0677\u0676\u0003\u0002\u0002\u0002\u0677\u0678",
    "\u0003\u0002\u0002\u0002\u0678\u0679\u0003\u0002\u0002\u0002\u0679\u068a",
    "\u0007\u0096\u0002\u0002\u067a\u067c\u0007\u0094\u0002\u0002\u067b\u067d",
    "\u0005\u016c\u00b7\u0002\u067c\u067b\u0003\u0002\u0002\u0002\u067c\u067d",
    "\u0003\u0002\u0002\u0002\u067d\u067e\u0003\u0002\u0002\u0002\u067e\u068a",
    "\u0007\u0097\u0002\u0002\u067f\u0681\u0007\u0092\u0002\u0002\u0680\u0682",
    "\u0005\u016c\u00b7\u0002\u0681\u0680\u0003\u0002\u0002\u0002\u0681\u0682",
    "\u0003\u0002\u0002\u0002\u0682\u0683\u0003\u0002\u0002\u0002\u0683\u068a",
    "\u0007\u0095\u0002\u0002\u0684\u068a\u0005\u0202\u0102\u0002\u0685\u068a",
    "\u0005\u0206\u0104\u0002\u0686\u068a\u0005\u022c\u0117\u0002\u0687\u068a",
    "\u0005\u021e\u0110\u0002\u0688\u068a\u0005\u0170\u00b9\u0002\u0689\u0675",
    "\u0003\u0002\u0002\u0002\u0689\u067a\u0003\u0002\u0002\u0002\u0689\u067f",
    "\u0003\u0002\u0002\u0002\u0689\u0684\u0003\u0002\u0002\u0002\u0689\u0685",
    "\u0003\u0002\u0002\u0002\u0689\u0686\u0003\u0002\u0002\u0002\u0689\u0687",
    "\u0003\u0002\u0002\u0002\u0689\u0688\u0003\u0002\u0002\u0002\u068a\u016f",
    "\u0003\u0002\u0002\u0002\u068b\u0690\t\r\u0002\u0002\u068c\u0690\u0005",
    "\u0212\u010a\u0002\u068d\u0690\u0007\u00a1\u0002\u0002\u068e\u0690\u0007",
    "\u009e\u0002\u0002\u068f\u068b\u0003\u0002\u0002\u0002\u068f\u068c\u0003",
    "\u0002\u0002\u0002\u068f\u068d\u0003\u0002\u0002\u0002\u068f\u068e\u0003",
    "\u0002\u0002\u0002\u0690\u0171\u0003\u0002\u0002\u0002\u0691\u0693\u0005",
    "\u0176\u00bc\u0002\u0692\u0694\u0005\u017c\u00bf\u0002\u0693\u0692\u0003",
    "\u0002\u0002\u0002\u0693\u0694\u0003\u0002\u0002\u0002\u0694\u0173\u0003",
    "\u0002\u0002\u0002\u0695\u069a\u0005\u0172\u00ba\u0002\u0696\u0697\u0007",
    "\u0098\u0002\u0002\u0697\u0699\u0005\u0172\u00ba\u0002\u0698\u0696\u0003",
    "\u0002\u0002\u0002\u0699\u069c\u0003\u0002\u0002\u0002\u069a\u0698\u0003",
    "\u0002\u0002\u0002\u069a\u069b\u0003\u0002\u0002\u0002\u069b\u0175\u0003",
    "\u0002\u0002\u0002\u069c\u069a\u0003\u0002\u0002\u0002\u069d\u069f\u0005",
    "\u021a\u010e\u0002\u069e\u069d\u0003\u0002\u0002\u0002\u069e\u069f\u0003",
    "\u0002\u0002\u0002\u069f\u06a0\u0003\u0002\u0002\u0002\u06a0\u06a1\u0005",
    "\u01b6\u00dc\u0002\u06a1\u0177\u0003\u0002\u0002\u0002\u06a2\u06a4\u0007",
    "X\u0002\u0002\u06a3\u06a5\t\u000e\u0002\u0002\u06a4\u06a3\u0003\u0002",
    "\u0002\u0002\u06a4\u06a5\u0003\u0002\u0002\u0002\u06a5\u0179\u0003\u0002",
    "\u0002\u0002\u06a6\u06a7\u0005\u0218\u010d\u0002\u06a7\u06a8\u0005\u0176",
    "\u00bc\u0002\u06a8\u06b4\u0003\u0002\u0002\u0002\u06a9\u06ac\u0005\u00b2",
    "Z\u0002\u06aa\u06ac\u0005\u017e\u00c0\u0002\u06ab\u06a9\u0003\u0002",
    "\u0002\u0002\u06ab\u06aa\u0003\u0002\u0002\u0002\u06ac\u06ae\u0003\u0002",
    "\u0002\u0002\u06ad\u06af\u0005\u0178\u00bd\u0002\u06ae\u06ad\u0003\u0002",
    "\u0002\u0002\u06ae\u06af\u0003\u0002\u0002\u0002\u06af\u06b0\u0003\u0002",
    "\u0002\u0002\u06b0\u06b1\u0005\u0176\u00bc\u0002\u06b1\u06b4\u0003\u0002",
    "\u0002\u0002\u06b2\u06b4\u0005\u0180\u00c1\u0002\u06b3\u06a6\u0003\u0002",
    "\u0002\u0002\u06b3\u06ab\u0003\u0002\u0002\u0002\u06b3\u06b2\u0003\u0002",
    "\u0002\u0002\u06b4\u017b\u0003\u0002\u0002\u0002\u06b5\u06b7\u0005\u017a",
    "\u00be\u0002\u06b6\u06b5\u0003\u0002\u0002\u0002\u06b7\u06b8\u0003\u0002",
    "\u0002\u0002\u06b8\u06b6\u0003\u0002\u0002\u0002\u06b8\u06b9\u0003\u0002",
    "\u0002\u0002\u06b9\u017d\u0003\u0002\u0002\u0002\u06ba\u06bb\u0007\u009f",
    "\u0002\u0002\u06bb\u06bc\u0005\u0172\u00ba\u0002\u06bc\u06bd\u0007\u0099",
    "\u0002\u0002\u06bd\u017f\u0003\u0002\u0002\u0002\u06be\u06c4\u0007W",
    "\u0002\u0002\u06bf\u06c1\u0007\b\u0002\u0002\u06c0\u06c2\t\u000e\u0002",
    "\u0002\u06c1\u06c0\u0003\u0002\u0002\u0002\u06c1\u06c2\u0003\u0002\u0002",
    "\u0002\u06c2\u06c4\u0003\u0002\u0002\u0002\u06c3\u06be\u0003\u0002\u0002",
    "\u0002\u06c3\u06bf\u0003\u0002\u0002\u0002\u06c4\u06c5\u0003\u0002\u0002",
    "\u0002\u06c5\u06c6\u0005\u01d6\u00ec\u0002\u06c6\u0181\u0003\u0002\u0002",
    "\u0002\u06c7\u06d6\u0005\u01f0\u00f9\u0002\u06c8\u06d6\u0005\u01f2\u00fa",
    "\u0002\u06c9\u06d6\u0005\u00b4[\u0002\u06ca\u06d6\u0005\u0184\u00c3",
    "\u0002\u06cb\u06d6\u0005\u0186\u00c4\u0002\u06cc\u06d6\u0005\u0188\u00c5",
    "\u0002\u06cd\u06d6\u0005\u019c\u00cf\u0002\u06ce\u06d6\u0005\u019e\u00d0",
    "\u0002\u06cf\u06d6\u0005\u01a0\u00d1\u0002\u06d0\u06d6\u0005\u019a\u00ce",
    "\u0002\u06d1\u06d6\u0005\u01a6\u00d4\u0002\u06d2\u06d6\u0005\u01a8\u00d5",
    "\u0002\u06d3\u06d6\u0005\u01b2\u00da\u0002\u06d4\u06d6\u0005\u01b4\u00db",
    "\u0002\u06d5\u06c7\u0003\u0002\u0002\u0002\u06d5\u06c8\u0003\u0002\u0002",
    "\u0002\u06d5\u06c9\u0003\u0002\u0002\u0002\u06d5\u06ca\u0003\u0002\u0002",
    "\u0002\u06d5\u06cb\u0003\u0002\u0002\u0002\u06d5\u06cc\u0003\u0002\u0002",
    "\u0002\u06d5\u06cd\u0003\u0002\u0002\u0002\u06d5\u06ce\u0003\u0002\u0002",
    "\u0002\u06d5\u06cf\u0003\u0002\u0002\u0002\u06d5\u06d0\u0003\u0002\u0002",
    "\u0002\u06d5\u06d1\u0003\u0002\u0002\u0002\u06d5\u06d2\u0003\u0002\u0002",
    "\u0002\u06d5\u06d3\u0003\u0002\u0002\u0002\u06d5\u06d4\u0003\u0002\u0002",
    "\u0002\u06d6\u0183\u0003\u0002\u0002\u0002\u06d7\u06d8\u0007f\u0002",
    "\u0002\u06d8\u06d9\u0007\u0091\u0002\u0002\u06d9\u06e3\u0005\u0202\u0102",
    "\u0002\u06da\u06db\u0007f\u0002\u0002\u06db\u06dc\u0007\u0094\u0002",
    "\u0002\u06dc\u06dd\u0005\u01c8\u00e5\u0002\u06dd\u06de\u0007\u0097\u0002",
    "\u0002\u06de\u06e3\u0003\u0002\u0002\u0002\u06df\u06e0\u0007f\u0002",
    "\u0002\u06e0\u06e1\u0007\u0091\u0002\u0002\u06e1\u06e3\u00071\u0002",
    "\u0002\u06e2\u06d7\u0003\u0002\u0002\u0002\u06e2\u06da\u0003\u0002\u0002",
    "\u0002\u06e2\u06df\u0003\u0002\u0002\u0002\u06e3\u0185\u0003\u0002\u0002",
    "\u0002\u06e4\u06e5\u0007Y\u0002\u0002\u06e5\u06e6\u0007\u0091\u0002",
    "\u0002\u06e6\u06f0\u0005\u0202\u0102\u0002\u06e7\u06e8\u0007Y\u0002",
    "\u0002\u06e8\u06e9\u0007\u0094\u0002\u0002\u06e9\u06ea\u0005\u01c8\u00e5",
    "\u0002\u06ea\u06eb\u0007\u0097\u0002\u0002\u06eb\u06f0\u0003\u0002\u0002",
    "\u0002\u06ec\u06ed\u0007Y\u0002\u0002\u06ed\u06ee\u0007\u0091\u0002",
    "\u0002\u06ee\u06f0\u00071\u0002\u0002\u06ef\u06e4\u0003\u0002\u0002",
    "\u0002\u06ef\u06e7\u0003\u0002\u0002\u0002\u06ef\u06ec\u0003\u0002\u0002",
    "\u0002\u06f0\u0187\u0003\u0002\u0002\u0002\u06f1\u06f3\u0007\u0092\u0002",
    "\u0002\u06f2\u06f4\u0005\u018a\u00c6\u0002\u06f3\u06f2\u0003\u0002\u0002",
    "\u0002\u06f3\u06f4\u0003\u0002\u0002\u0002\u06f4\u06f6\u0003\u0002\u0002",
    "\u0002\u06f5\u06f7\u0005\u00aeX\u0002\u06f6\u06f5\u0003\u0002\u0002",
    "\u0002\u06f6\u06f7\u0003\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002",
    "\u0002\u06f8\u06f9\u0007\u0095\u0002\u0002\u06f9\u0189\u0003\u0002\u0002",
    "\u0002\u06fa\u06fc\u0005\u0192\u00ca\u0002\u06fb\u06fa\u0003\u0002\u0002",
    "\u0002\u06fb\u06fc\u0003\u0002\u0002\u0002\u06fc\u06fd\u0003\u0002\u0002",
    "\u0002\u06fd\u06ff\u0005\u018c\u00c7\u0002\u06fe\u0700\u0007.\u0002",
    "\u0002\u06ff\u06fe\u0003\u0002\u0002\u0002\u06ff\u0700\u0003\u0002\u0002",
    "\u0002\u0700\u0702\u0003\u0002\u0002\u0002\u0701\u0703\u0005v<\u0002",
    "\u0702\u0701\u0003\u0002\u0002\u0002\u0702\u0703\u0003\u0002\u0002\u0002",
    "\u0703\u0704\u0003\u0002\u0002\u0002\u0704\u0705\u0007\u0018\u0002\u0002",
    "\u0705\u070a\u0003\u0002\u0002\u0002\u0706\u0707\u0005\u0192\u00ca\u0002",
    "\u0707\u0708\u0007\u0018\u0002\u0002\u0708\u070a\u0003\u0002\u0002\u0002",
    "\u0709\u06fb\u0003\u0002\u0002\u0002\u0709\u0706\u0003\u0002\u0002\u0002",
    "\u070a\u018b\u0003\u0002\u0002\u0002\u070b\u070d\u0007\u0093\u0002\u0002",
    "\u070c\u070e\u0005\u018e\u00c8\u0002\u070d\u070c\u0003\u0002\u0002\u0002",
    "\u070d\u070e\u0003\u0002\u0002\u0002\u070e\u070f\u0003\u0002\u0002\u0002",
    "\u070f\u0712\u0007\u0096\u0002\u0002\u0710\u0712\u0005\u0204\u0103\u0002",
    "\u0711\u070b\u0003\u0002\u0002\u0002\u0711\u0710\u0003\u0002\u0002\u0002",
    "\u0712\u018d\u0003\u0002\u0002\u0002\u0713\u0718\u0005\u0190\u00c9\u0002",
    "\u0714\u0715\u0007\u0098\u0002\u0002\u0715\u0717\u0005\u0190\u00c9\u0002",
    "\u0716\u0714\u0003\u0002\u0002\u0002\u0717\u071a\u0003\u0002\u0002\u0002",
    "\u0718\u0716\u0003\u0002\u0002\u0002\u0718\u0719\u0003\u0002\u0002\u0002",
    "\u0719\u018f\u0003\u0002\u0002\u0002\u071a\u0718\u0003\u0002\u0002\u0002",
    "\u071b\u0720\u0005\u0202\u0102\u0002\u071c\u071e\u0005\u01d8\u00ed\u0002",
    "\u071d\u071f\u0005\u0214\u010b\u0002\u071e\u071d\u0003\u0002\u0002\u0002",
    "\u071e\u071f\u0003\u0002\u0002\u0002\u071f\u0721\u0003\u0002\u0002\u0002",
    "\u0720\u071c\u0003\u0002\u0002\u0002\u0720\u0721\u0003\u0002\u0002\u0002",
    "\u0721\u0191\u0003\u0002\u0002\u0002\u0722\u0723\u0007\u0094\u0002\u0002",
    "\u0723\u0724\u0005\u0194\u00cb\u0002\u0724\u0725\u0007\u0097\u0002\u0002",
    "\u0725\u0193\u0003\u0002\u0002\u0002\u0726\u072b\u0005\u0196\u00cc\u0002",
    "\u0727\u0728\u0007\u0098\u0002\u0002\u0728\u072a\u0005\u0196\u00cc\u0002",
    "\u0729\u0727\u0003\u0002\u0002\u0002\u072a\u072d\u0003\u0002\u0002\u0002",
    "\u072b\u0729\u0003\u0002\u0002\u0002\u072b\u072c\u0003\u0002\u0002\u0002",
    "\u072c\u0195\u0003\u0002\u0002\u0002\u072d\u072b\u0003\u0002\u0002\u0002",
    "\u072e\u0730\u0005\u0198\u00cd\u0002\u072f\u072e\u0003\u0002\u0002\u0002",
    "\u072f\u0730\u0003\u0002\u0002\u0002\u0730\u0738\u0003\u0002\u0002\u0002",
    "\u0731\u0733\u0005\u0202\u0102\u0002\u0732\u0734\u0007\u00a3\u0002\u0002",
    "\u0733\u0732\u0003\u0002\u0002\u0002\u0733\u0734\u0003\u0002\u0002\u0002",
    "\u0734\u0735\u0003\u0002\u0002\u0002\u0735\u0736\u0005\u0172\u00ba\u0002",
    "\u0736\u0739\u0003\u0002\u0002\u0002\u0737\u0739\u0005\u0184\u00c3\u0002",
    "\u0738\u0731\u0003\u0002\u0002\u0002\u0738\u0737\u0003\u0002\u0002\u0002",
    "\u0739\u0197\u0003\u0002\u0002\u0002\u073a\u0742\u0007P\u0002\u0002",
    "\u073b\u073f\u0007Q\u0002\u0002\u073c\u073d\u0007\u0093\u0002\u0002",
    "\u073d\u073e\t\u000b\u0002\u0002\u073e\u0740\u0007\u0096\u0002\u0002",
    "\u073f\u073c\u0003\u0002\u0002\u0002\u073f\u0740\u0003\u0002\u0002\u0002",
    "\u0740\u0742\u0003\u0002\u0002\u0002\u0741\u073a\u0003\u0002\u0002\u0002",
    "\u0741\u073b\u0003\u0002\u0002\u0002\u0742\u0199\u0003\u0002\u0002\u0002",
    "\u0743\u0746\u0007\u0091\u0002\u0002\u0744\u0747\u0005\u0202\u0102\u0002",
    "\u0745\u0747\u0005\u0206\u0104\u0002\u0746\u0744\u0003\u0002\u0002\u0002",
    "\u0746\u0745\u0003\u0002\u0002\u0002\u0747\u074a\u0003\u0002\u0002\u0002",
    "\u0748\u0749\u0007\u0091\u0002\u0002\u0749\u074b\u0005\u01b6\u00dc\u0002",
    "\u074a\u0748\u0003\u0002\u0002\u0002\u074a\u074b\u0003\u0002\u0002\u0002",
    "\u074b\u019b\u0003\u0002\u0002\u0002\u074c\u074d\u0007\u0093\u0002\u0002",
    "\u074d\u074e\u0005\u021e\u0110\u0002\u074e\u074f\u0007\u0096\u0002\u0002",
    "\u074f\u019d\u0003\u0002\u0002\u0002\u0750\u0751\u0007\u0093\u0002\u0002",
    "\u0751\u0752\u0005\u0172\u00ba\u0002\u0752\u0753\u0007\u0096\u0002\u0002",
    "\u0753\u019f\u0003\u0002\u0002\u0002\u0754\u0755\u0007\u0093\u0002\u0002",
    "\u0755\u075d\u0007\u0096\u0002\u0002\u0756\u0757\u0007\u0093\u0002\u0002",
    "\u0757\u0758\u0005\u01a4\u00d3\u0002\u0758\u0759\u0007\u0098\u0002\u0002",
    "\u0759\u075a\u0005\u01a2\u00d2\u0002\u075a\u075b\u0007\u0096\u0002\u0002",
    "\u075b\u075d\u0003\u0002\u0002\u0002\u075c\u0754\u0003\u0002\u0002\u0002",
    "\u075c\u0756\u0003\u0002\u0002\u0002\u075d\u01a1\u0003\u0002\u0002\u0002",
    "\u075e\u0763\u0005\u01a4\u00d3\u0002\u075f\u0760\u0007\u0098\u0002\u0002",
    "\u0760\u0762\u0005\u01a4\u00d3\u0002\u0761\u075f\u0003\u0002\u0002\u0002",
    "\u0762\u0765\u0003\u0002\u0002\u0002\u0763\u0761\u0003\u0002\u0002\u0002",
    "\u0763\u0764\u0003\u0002\u0002\u0002\u0764\u01a3\u0003\u0002\u0002\u0002",
    "\u0765\u0763\u0003\u0002\u0002\u0002\u0766\u0767\u0005\u0202\u0102\u0002",
    "\u0767\u0768\u0007\u0099\u0002\u0002\u0768\u076a\u0003\u0002\u0002\u0002",
    "\u0769\u0766\u0003\u0002\u0002\u0002\u0769\u076a\u0003\u0002\u0002\u0002",
    "\u076a\u076b\u0003\u0002\u0002\u0002\u076b\u076c\u0005\u0172\u00ba\u0002",
    "\u076c\u01a5\u0003\u0002\u0002\u0002\u076d\u076e\u0007\u009d\u0002\u0002",
    "\u076e\u01a7\u0003\u0002\u0002\u0002\u076f\u0771\u0007\u00b1\u0002\u0002",
    "\u0770\u0772\u0005\u01d6\u00ec\u0002\u0771\u0770\u0003\u0002\u0002\u0002",
    "\u0771\u0772\u0003\u0002\u0002\u0002\u0772\u0773\u0003\u0002\u0002\u0002",
    "\u0773\u0774\u0007\u0091\u0002\u0002\u0774\u0775\u0005\u01aa\u00d6\u0002",
    "\u0775\u01a9\u0003\u0002\u0002\u0002\u0776\u077b\u0005\u01ac\u00d7\u0002",
    "\u0777\u0778\u0007\u0091\u0002\u0002\u0778\u077a\u0005\u01ac\u00d7\u0002",
    "\u0779\u0777\u0003\u0002\u0002\u0002\u077a\u077d\u0003\u0002\u0002\u0002",
    "\u077b\u0779\u0003\u0002\u0002\u0002\u077b\u077c\u0003\u0002\u0002\u0002",
    "\u077c\u01ab\u0003\u0002\u0002\u0002\u077d\u077b\u0003\u0002\u0002\u0002",
    "\u077e\u0780\u0005\u0202\u0102\u0002\u077f\u0781\u0005\u01ae\u00d8\u0002",
    "\u0780\u077f\u0003\u0002\u0002\u0002\u0780\u0781\u0003\u0002\u0002\u0002",
    "\u0781\u0784\u0003\u0002\u0002\u0002\u0782\u0784\u0005\u01ae\u00d8\u0002",
    "\u0783\u077e\u0003\u0002\u0002\u0002\u0783\u0782\u0003\u0002\u0002\u0002",
    "\u0784\u01ad\u0003\u0002\u0002\u0002\u0785\u0787\u0005\u01b0\u00d9\u0002",
    "\u0786\u0785\u0003\u0002\u0002\u0002\u0787\u0788\u0003\u0002\u0002\u0002",
    "\u0788\u0786\u0003\u0002\u0002\u0002\u0788\u0789\u0003\u0002\u0002\u0002",
    "\u0789\u01af\u0003\u0002\u0002\u0002\u078a\u0792\u0007\u009f\u0002\u0002",
    "\u078b\u0792\u0007\u009e\u0002\u0002\u078c\u0792\u0007f\u0002\u0002",
    "\u078d\u078e\u0007\u0094\u0002\u0002\u078e\u078f\u0005\u01c8\u00e5\u0002",
    "\u078f\u0790\u0007\u0097\u0002\u0002\u0790\u0792\u0003\u0002\u0002\u0002",
    "\u0791\u078a\u0003\u0002\u0002\u0002\u0791\u078b\u0003\u0002\u0002\u0002",
    "\u0791\u078c\u0003\u0002\u0002\u0002\u0791\u078d\u0003\u0002\u0002\u0002",
    "\u0792\u01b1\u0003\u0002\u0002\u0002\u0793\u0794\u0007\u0089\u0002\u0002",
    "\u0794\u0797\u0007\u0093\u0002\u0002\u0795\u0796\t\u000f\u0002\u0002",
    "\u0796\u0798\u0007\u0099\u0002\u0002\u0797\u0795\u0003\u0002\u0002\u0002",
    "\u0797\u0798\u0003\u0002\u0002\u0002\u0798\u0799\u0003\u0002\u0002\u0002",
    "\u0799\u079a\u0005\u0172\u00ba\u0002\u079a\u079b\u0007\u0096\u0002\u0002",
    "\u079b\u01b3\u0003\u0002\u0002\u0002\u079c\u079d\u0007\u008a\u0002\u0002",
    "\u079d\u079e\u0007\u0093\u0002\u0002\u079e\u079f\u0005\u0172\u00ba\u0002",
    "\u079f\u07a0\u0007\u0096\u0002\u0002\u07a0\u01b5\u0003\u0002\u0002\u0002",
    "\u07a1\u07ab\u0005\u0182\u00c2\u0002\u07a2\u07aa\u0005\u01b8\u00dd\u0002",
    "\u07a3\u07aa\u0005\u01ba\u00de\u0002\u07a4\u07aa\u0005\u01bc\u00df\u0002",
    "\u07a5\u07aa\u0005\u01be\u00e0\u0002\u07a6\u07aa\u0005\u01c0\u00e1\u0002",
    "\u07a7\u07aa\u0005\u01c2\u00e2\u0002\u07a8\u07aa\u0005\u01c4\u00e3\u0002",
    "\u07a9\u07a2\u0003\u0002\u0002\u0002\u07a9\u07a3\u0003\u0002\u0002\u0002",
    "\u07a9\u07a4\u0003\u0002\u0002\u0002\u07a9\u07a5\u0003\u0002\u0002\u0002",
    "\u07a9\u07a6\u0003\u0002\u0002\u0002\u07a9\u07a7\u0003\u0002\u0002\u0002",
    "\u07a9\u07a8\u0003\u0002\u0002\u0002\u07aa\u07ad\u0003\u0002\u0002\u0002",
    "\u07ab\u07a9\u0003\u0002\u0002\u0002\u07ab\u07ac\u0003\u0002\u0002\u0002",
    "\u07ac\u07b1\u0003\u0002\u0002\u0002\u07ad\u07ab\u0003\u0002\u0002\u0002",
    "\u07ae\u07b0\u0005\u021c\u010f\u0002\u07af\u07ae\u0003\u0002\u0002\u0002",
    "\u07b0\u07b3\u0003\u0002\u0002\u0002\u07b1\u07b2\u0003\u0002\u0002\u0002",
    "\u07b1\u07af\u0003\u0002\u0002\u0002\u07b2\u01b7\u0003\u0002\u0002\u0002",
    "\u07b3\u07b1\u0003\u0002\u0002\u0002\u07b4\u07b6\u0005\u01c6\u00e4\u0002",
    "\u07b5\u07b4\u0003\u0002\u0002\u0002\u07b5\u07b6\u0003\u0002\u0002\u0002",
    "\u07b6\u07b7\u0003\u0002\u0002\u0002\u07b7\u07ba\u0005\u01cc\u00e7\u0002",
    "\u07b8\u07ba\u0005\u01c6\u00e4\u0002\u07b9\u07b5\u0003\u0002\u0002\u0002",
    "\u07b9\u07b8\u0003\u0002\u0002\u0002\u07ba\u01b9\u0003\u0002\u0002\u0002",
    "\u07bb\u07bc\u0007\u0091\u0002\u0002\u07bc\u07c1\u00071\u0002\u0002",
    "\u07bd\u07be\u0007\u0093\u0002\u0002\u07be\u07bf\u0005\u01d2\u00ea\u0002",
    "\u07bf\u07c0\u0007\u0096\u0002\u0002\u07c0\u07c2\u0003\u0002\u0002\u0002",
    "\u07c1\u07bd\u0003\u0002\u0002\u0002\u07c1\u07c2\u0003\u0002\u0002\u0002",
    "\u07c2\u01bb\u0003\u0002\u0002\u0002\u07c3\u07cd\u0007\u0091\u0002\u0002",
    "\u07c4\u07ce\u0007\u00b6\u0002\u0002\u07c5\u07cb\u0005\u0202\u0102\u0002",
    "\u07c6\u07cc\u0005`1\u0002\u07c7\u07c8\u0007\u0093\u0002\u0002\u07c8",
    "\u07c9\u0005\u01d2\u00ea\u0002\u07c9\u07ca\u0007\u0096\u0002\u0002\u07ca",
    "\u07cc\u0003\u0002\u0002\u0002\u07cb\u07c6\u0003\u0002\u0002\u0002\u07cb",
    "\u07c7\u0003\u0002\u0002\u0002\u07cb\u07cc\u0003\u0002\u0002\u0002\u07cc",
    "\u07ce\u0003\u0002\u0002\u0002\u07cd\u07c4\u0003\u0002\u0002\u0002\u07cd",
    "\u07c5\u0003\u0002\u0002\u0002\u07ce\u01bd\u0003\u0002\u0002\u0002\u07cf",
    "\u07d0\u0007\u0091\u0002\u0002\u07d0\u07d1\u0007f\u0002\u0002\u07d1",
    "\u01bf\u0003\u0002\u0002\u0002\u07d2\u07d3\u0007\u0094\u0002\u0002\u07d3",
    "\u07d4\u0005\u01c8\u00e5\u0002\u07d4\u07d5\u0007\u0097\u0002\u0002\u07d5",
    "\u01c1\u0003\u0002\u0002\u0002\u07d6\u07d7\u0006\u00e2\u0003\u0002\u07d7",
    "\u07d8\u0007\u009e\u0002\u0002\u07d8\u01c3\u0003\u0002\u0002\u0002\u07d9",
    "\u07da\u0006\u00e3\u0004\u0002\u07da\u07db\u0007\u009f\u0002\u0002\u07db",
    "\u01c5\u0003\u0002\u0002\u0002\u07dc\u07de\u0007\u0093\u0002\u0002\u07dd",
    "\u07df\u0005\u01c8\u00e5\u0002\u07de\u07dd\u0003\u0002\u0002\u0002\u07de",
    "\u07df\u0003\u0002\u0002\u0002\u07df\u07e0\u0003\u0002\u0002\u0002\u07e0",
    "\u07e1\u0007\u0096\u0002\u0002\u07e1\u01c7\u0003\u0002\u0002\u0002\u07e2",
    "\u07e7\u0005\u01ca\u00e6\u0002\u07e3\u07e4\u0007\u0098\u0002\u0002\u07e4",
    "\u07e6\u0005\u01ca\u00e6\u0002\u07e5\u07e3\u0003\u0002\u0002\u0002\u07e6",
    "\u07e9\u0003\u0002\u0002\u0002\u07e7\u07e5\u0003\u0002\u0002\u0002\u07e7",
    "\u07e8\u0003\u0002\u0002\u0002\u07e8\u01c9\u0003\u0002\u0002\u0002\u07e9",
    "\u07e7\u0003\u0002\u0002\u0002\u07ea\u07ec\u0005\u01d4\u00eb\u0002\u07eb",
    "\u07ea\u0003\u0002\u0002\u0002\u07eb\u07ec\u0003\u0002\u0002\u0002\u07ec",
    "\u07f0\u0003\u0002\u0002\u0002\u07ed\u07f1\u0005\u0202\u0102\u0002\u07ee",
    "\u07f1\u0005\u0172\u00ba\u0002\u07ef\u07f1\u0005\u021e\u0110\u0002\u07f0",
    "\u07ed\u0003\u0002\u0002\u0002\u07f0\u07ee\u0003\u0002\u0002\u0002\u07f0",
    "\u07ef\u0003\u0002\u0002\u0002\u07f1\u01cb\u0003\u0002\u0002\u0002\u07f2",
    "\u07f4\u0005\u0188\u00c5\u0002\u07f3\u07f5\u0005\u01ce\u00e8\u0002\u07f4",
    "\u07f3\u0003\u0002\u0002\u0002\u07f4\u07f5\u0003\u0002\u0002\u0002\u07f5",
    "\u01cd\u0003\u0002\u0002\u0002\u07f6\u07f8\u0005\u01d0\u00e9\u0002\u07f7",
    "\u07f6\u0003\u0002\u0002\u0002\u07f8\u07f9\u0003\u0002\u0002\u0002\u07f9",
    "\u07f7\u0003\u0002\u0002\u0002\u07f9\u07fa\u0003\u0002\u0002\u0002\u07fa",
    "\u01cf\u0003\u0002\u0002\u0002\u07fb\u07fc\u0005\u0202\u0102\u0002\u07fc",
    "\u07fd\u0007\u0099\u0002\u0002\u07fd\u07fe\u0005\u0188\u00c5\u0002\u07fe",
    "\u01d1\u0003\u0002\u0002\u0002\u07ff\u0801\u0005\u01d4\u00eb\u0002\u0800",
    "\u07ff\u0003\u0002\u0002\u0002\u0801\u0802\u0003\u0002\u0002\u0002\u0802",
    "\u0800\u0003\u0002\u0002\u0002\u0802\u0803\u0003\u0002\u0002\u0002\u0803",
    "\u01d3\u0003\u0002\u0002\u0002\u0804\u0805\u0005\u0202\u0102\u0002\u0805",
    "\u0806\u0007\u0099\u0002\u0002\u0806\u01d5\u0003\u0002\u0002\u0002\u0807",
    "\u0808\b\u00ec\u0001\u0002\u0808\u0816\u0005\u01e6\u00f4\u0002\u0809",
    "\u0816\u0005\u01f0\u00f9\u0002\u080a\u0816\u0005\u01f2\u00fa\u0002\u080b",
    "\u0816\u0005\u01f4\u00fb\u0002\u080c\u0816\u0005\u01da\u00ee\u0002\u080d",
    "\u0816\u0005\u01de\u00f0\u0002\u080e\u0816\u0005\u01f8\u00fd\u0002\u080f",
    "\u0816\u0005\u01fa\u00fe\u0002\u0810\u0816\u0005\u01fc\u00ff\u0002\u0811",
    "\u0812\u0007\u0093\u0002\u0002\u0812\u0813\u0005\u01d6\u00ec\u0002\u0813",
    "\u0814\u0007\u0096\u0002\u0002\u0814\u0816\u0003\u0002\u0002\u0002\u0815",
    "\u0807\u0003\u0002\u0002\u0002\u0815\u0809\u0003\u0002\u0002\u0002\u0815",
    "\u080a\u0003\u0002\u0002\u0002\u0815\u080b\u0003\u0002\u0002\u0002\u0815",
    "\u080c\u0003\u0002\u0002\u0002\u0815\u080d\u0003\u0002\u0002\u0002\u0815",
    "\u080e\u0003\u0002\u0002\u0002\u0815\u080f\u0003\u0002\u0002\u0002\u0815",
    "\u0810\u0003\u0002\u0002\u0002\u0815\u0811\u0003\u0002\u0002\u0002\u0816",
    "\u0824\u0003\u0002\u0002\u0002\u0817\u0820\f\u0006\u0002\u0002\u0818",
    "\u0819\u0006\u00ec\u0006\u0002\u0819\u0821\u0007\u009f\u0002\u0002\u081a",
    "\u081b\u0006\u00ec\u0007\u0002\u081b\u0821\u0007\u009e\u0002\u0002\u081c",
    "\u081d\u0007\u0091\u0002\u0002\u081d\u0821\u0007d\u0002\u0002\u081e",
    "\u081f\u0007\u0091\u0002\u0002\u081f\u0821\u0007$\u0002\u0002\u0820",
    "\u0818\u0003\u0002\u0002\u0002\u0820\u081a\u0003\u0002\u0002\u0002\u0820",
    "\u081c\u0003\u0002\u0002\u0002\u0820\u081e\u0003\u0002\u0002\u0002\u0821",
    "\u0823\u0003\u0002\u0002\u0002\u0822\u0817\u0003\u0002\u0002\u0002\u0823",
    "\u0826\u0003\u0002\u0002\u0002\u0824\u0822\u0003\u0002\u0002\u0002\u0824",
    "\u0825\u0003\u0002\u0002\u0002\u0825\u01d7\u0003\u0002\u0002\u0002\u0826",
    "\u0824\u0003\u0002\u0002\u0002\u0827\u0828\u0007\u0099\u0002\u0002\u0828",
    "\u0829\u0005\u01d6\u00ec\u0002\u0829\u01d9\u0003\u0002\u0002\u0002\u082a",
    "\u082c\u0005\u01dc\u00ef\u0002\u082b\u082d\u0005`1\u0002\u082c\u082b",
    "\u0003\u0002\u0002\u0002\u082c\u082d\u0003\u0002\u0002\u0002\u082d\u0830",
    "\u0003\u0002\u0002\u0002\u082e\u082f\u0007\u0091\u0002\u0002\u082f\u0831",
    "\u0005\u01da\u00ee\u0002\u0830\u082e\u0003\u0002\u0002\u0002\u0830\u0831",
    "\u0003\u0002\u0002\u0002\u0831\u01db\u0003\u0002\u0002\u0002\u0832\u0835",
    "\u0007\u0006\u0002\u0002\u0833\u0835\u0005\u0202\u0102\u0002\u0834\u0832",
    "\u0003\u0002\u0002\u0002\u0834\u0833\u0003\u0002\u0002\u0002\u0835\u01dd",
    "\u0003\u0002\u0002\u0002\u0836\u0838\u0007\u0093\u0002\u0002\u0837\u0839",
    "\u0005\u01e0\u00f1\u0002\u0838\u0837\u0003\u0002\u0002\u0002\u0838\u0839",
    "\u0003\u0002\u0002\u0002\u0839\u083a\u0003\u0002\u0002\u0002\u083a\u083b",
    "\u0007\u0096\u0002\u0002\u083b\u01df\u0003\u0002\u0002\u0002\u083c\u0841",
    "\u0005\u01e2\u00f2\u0002\u083d\u083e\u0007\u0098\u0002\u0002\u083e\u0840",
    "\u0005\u01e2\u00f2\u0002\u083f\u083d\u0003\u0002\u0002\u0002\u0840\u0843",
    "\u0003\u0002\u0002\u0002\u0841\u083f\u0003\u0002\u0002\u0002\u0841\u0842",
    "\u0003\u0002\u0002\u0002\u0842\u01e1\u0003\u0002\u0002\u0002\u0843\u0841",
    "\u0003\u0002\u0002\u0002\u0844\u0845\u0005\u01e4\u00f3\u0002\u0845\u0846",
    "\u0005\u01d8\u00ed\u0002\u0846\u0849\u0003\u0002\u0002\u0002\u0847\u0849",
    "\u0005\u01d6\u00ec\u0002\u0848\u0844\u0003\u0002\u0002\u0002\u0848\u0847",
    "\u0003\u0002\u0002\u0002\u0849\u084c\u0003\u0002\u0002\u0002\u084a\u084b",
    "\u0007\u00a3\u0002\u0002\u084b\u084d\u0005\u0172\u00ba\u0002\u084c\u084a",
    "\u0003\u0002\u0002\u0002\u084c\u084d\u0003\u0002\u0002\u0002\u084d\u01e3",
    "\u0003\u0002\u0002\u0002\u084e\u0850\u0005\u0202\u0102\u0002\u084f\u084e",
    "\u0003\u0002\u0002\u0002\u0850\u0851\u0003\u0002\u0002\u0002\u0851\u084f",
    "\u0003\u0002\u0002\u0002\u0851\u0852\u0003\u0002\u0002\u0002\u0852\u01e5",
    "\u0003\u0002\u0002\u0002\u0853\u0855\u0005\u01e8\u00f5\u0002\u0854\u0856",
    "\u0007.\u0002\u0002\u0855\u0854\u0003\u0002\u0002\u0002\u0855\u0856",
    "\u0003\u0002\u0002\u0002\u0856\u0857\u0003\u0002\u0002\u0002\u0857\u0858",
    "\u0005\u0212\u010a\u0002\u0858\u0859\u0005\u01d6\u00ec\u0002\u0859\u01e7",
    "\u0003\u0002\u0002\u0002\u085a\u085f\u0007\u0093\u0002\u0002\u085b\u085d",
    "\u0005\u01ea\u00f6\u0002\u085c\u085e\u0005\u0214\u010b\u0002\u085d\u085c",
    "\u0003\u0002\u0002\u0002\u085d\u085e\u0003\u0002\u0002\u0002\u085e\u0860",
    "\u0003\u0002\u0002\u0002\u085f\u085b\u0003\u0002\u0002\u0002\u085f\u0860",
    "\u0003\u0002\u0002\u0002\u0860\u0861\u0003\u0002\u0002\u0002\u0861\u0862",
    "\u0007\u0096\u0002\u0002\u0862\u01e9\u0003\u0002\u0002\u0002\u0863\u0868",
    "\u0005\u01ec\u00f7\u0002\u0864\u0865\u0007\u0098\u0002\u0002\u0865\u0867",
    "\u0005\u01ec\u00f7\u0002\u0866\u0864\u0003\u0002\u0002\u0002\u0867\u086a",
    "\u0003\u0002\u0002\u0002\u0868\u0866\u0003\u0002\u0002\u0002\u0868\u0869",
    "\u0003\u0002\u0002\u0002\u0869\u01eb\u0003\u0002\u0002\u0002\u086a\u0868",
    "\u0003\u0002\u0002\u0002\u086b\u086d\u0007b\u0002\u0002\u086c\u086b",
    "\u0003\u0002\u0002\u0002\u086c\u086d\u0003\u0002\u0002\u0002\u086d\u086e",
    "\u0003\u0002\u0002\u0002\u086e\u0873\u0005\u01d6\u00ec\u0002\u086f\u0870",
    "\u0005\u01ee\u00f8\u0002\u0870\u0871\u0005\u01d8\u00ed\u0002\u0871\u0873",
    "\u0003\u0002\u0002\u0002\u0872\u086c\u0003\u0002\u0002\u0002\u0872\u086f",
    "\u0003\u0002\u0002\u0002\u0873\u01ed\u0003\u0002\u0002\u0002\u0874\u0876",
    "\u0005\u0202\u0102\u0002\u0875\u0874\u0003\u0002\u0002\u0002\u0876\u0877",
    "\u0003\u0002\u0002\u0002\u0877\u0875\u0003\u0002\u0002\u0002\u0877\u0878",
    "\u0003\u0002\u0002\u0002\u0878\u01ef\u0003\u0002\u0002\u0002\u0879\u087a",
    "\u0007\u0094\u0002\u0002\u087a\u087b\u0005\u01d6\u00ec\u0002\u087b\u087c",
    "\u0007\u0097\u0002\u0002\u087c\u01f1\u0003\u0002\u0002\u0002\u087d\u087e",
    "\u0007\u0094\u0002\u0002\u087e\u087f\u0005\u01d6\u00ec\u0002\u087f\u0880",
    "\u0007\u0099\u0002\u0002\u0880\u0881\u0005\u01d6\u00ec\u0002\u0881\u0882",
    "\u0007\u0097\u0002\u0002\u0882\u01f3\u0003\u0002\u0002\u0002\u0883\u0888",
    "\u0005\u01da\u00ee\u0002\u0884\u0885\u0007\u00a1\u0002\u0002\u0885\u0887",
    "\u0005\u01da\u00ee\u0002\u0886\u0884\u0003\u0002\u0002\u0002\u0887\u088a",
    "\u0003\u0002\u0002\u0002\u0888\u0886\u0003\u0002\u0002\u0002\u0888\u0889",
    "\u0003\u0002\u0002\u0002\u0889\u088c\u0003\u0002\u0002\u0002\u088a\u0888",
    "\u0003\u0002\u0002\u0002\u088b\u088d\u0005\u01f6\u00fc\u0002\u088c\u088b",
    "\u0003\u0002\u0002\u0002\u088c\u088d\u0003\u0002\u0002\u0002\u088d\u01f5",
    "\u0003\u0002\u0002\u0002\u088e\u088f\u0006\u00fc\b\u0002\u088f\u0890",
    "\u0007\u00a1\u0002\u0002\u0890\u01f7\u0003\u0002\u0002\u0002\u0891\u0892",
    "\u0007c\u0002\u0002\u0892\u0893\u0005\u01d6\u00ec\u0002\u0893\u01f9",
    "\u0003\u0002\u0002\u0002\u0894\u0895\u0007Z\u0002\u0002\u0895\u01fb",
    "\u0003\u0002\u0002\u0002\u0896\u0897\u0007g\u0002\u0002\u0897\u01fd",
    "\u0003\u0002\u0002\u0002\u0898\u0899\u0007\u0099\u0002\u0002\u0899\u089a",
    "\u0005\u0200\u0101\u0002\u089a\u01ff\u0003\u0002\u0002\u0002\u089b\u08a0",
    "\u0005\u01da\u00ee\u0002\u089c\u089d\u0007\u0098\u0002\u0002\u089d\u089f",
    "\u0005\u01da\u00ee\u0002\u089e\u089c\u0003\u0002\u0002\u0002\u089f\u08a2",
    "\u0003\u0002\u0002\u0002\u08a0\u089e\u0003\u0002\u0002\u0002\u08a0\u08a1",
    "\u0003\u0002\u0002\u0002\u08a1\u0201\u0003\u0002\u0002\u0002\u08a2\u08a0",
    "\u0003\u0002\u0002\u0002\u08a3\u08ad\t\u0010\u0002\u0002\u08a4\u08ad",
    "\u0007\u0090\u0002\u0002\u08a5\u08a9\u0007\u00af\u0002\u0002\u08a6\u08aa",
    "\u0005\u0206\u0104\u0002\u08a7\u08aa\u0007\u0090\u0002\u0002\u08a8\u08aa",
    "\u0007\u00b0\u0002\u0002\u08a9\u08a6\u0003\u0002\u0002\u0002\u08a9\u08a7",
    "\u0003\u0002\u0002\u0002\u08a9\u08a8\u0003\u0002\u0002\u0002\u08aa\u08ab",
    "\u0003\u0002\u0002\u0002\u08ab\u08ad\u0007\u00af\u0002\u0002\u08ac\u08a3",
    "\u0003\u0002\u0002\u0002\u08ac\u08a4\u0003\u0002\u0002\u0002\u08ac\u08a5",
    "\u0003\u0002\u0002\u0002\u08ad\u0203\u0003\u0002\u0002\u0002\u08ae\u08b3",
    "\u0005\u0202\u0102\u0002\u08af\u08b0\u0007\u0098\u0002\u0002\u08b0\u08b2",
    "\u0005\u0202\u0102\u0002\u08b1\u08af\u0003\u0002\u0002\u0002\u08b2\u08b5",
    "\u0003\u0002\u0002\u0002\u08b3\u08b1\u0003\u0002\u0002\u0002\u08b3\u08b4",
    "\u0003\u0002\u0002\u0002\u08b4\u0205\u0003\u0002\u0002\u0002\u08b5\u08b3",
    "\u0003\u0002\u0002\u0002\u08b6\u08b7\t\u0011\u0002\u0002\u08b7\u0207",
    "\u0003\u0002\u0002\u0002\u08b8\u08b9\u0007\u00a2\u0002\u0002\u08b9\u0209",
    "\u0003\u0002\u0002\u0002\u08ba\u08bb\u0007\u00a1\u0002\u0002\u08bb\u08bc",
    "\u0007\u00a1\u0002\u0002\u08bc\u020b\u0003\u0002\u0002\u0002\u08bd\u08be",
    "\u0007\u00a7\u0002\u0002\u08be\u08bf\u0007\u00a7\u0002\u0002\u08bf\u020d",
    "\u0003\u0002\u0002\u0002\u08c0\u08c1\u0007\u009c\u0002\u0002\u08c1\u08c2",
    "\u0007\u00a3\u0002\u0002\u08c2\u020f\u0003\u0002\u0002\u0002\u08c3\u08c4",
    "\u0007\u009b\u0002\u0002\u08c4\u0211\u0003\u0002\u0002\u0002\u08c5\u08c6",
    "\u0007\u00a2\u0002\u0002\u08c6\u08c7\u0007\u009c\u0002\u0002\u08c7\u0213",
    "\u0003\u0002\u0002\u0002\u08c8\u08c9\u0007\u0091\u0002\u0002\u08c9\u08ca",
    "\u0007\u0091\u0002\u0002\u08ca\u08cb\u0007\u0091\u0002\u0002\u08cb\u0215",
    "\u0003\u0002\u0002\u0002\u08cc\u08cd\u0007\u00a3\u0002\u0002\u08cd\u08ce",
    "\u0007\u00a3\u0002\u0002\u08ce\u0217\u0003\u0002\u0002\u0002\u08cf\u08d0",
    "\u0005\u021e\u0110\u0002\u08d0\u0219\u0003\u0002\u0002\u0002\u08d1\u08d2",
    "\u0005\u021e\u0110\u0002\u08d2\u021b\u0003\u0002\u0002\u0002\u08d3\u08d4",
    "\u0005\u021e\u0110\u0002\u08d4\u021d\u0003\u0002\u0002\u0002\u08d5\u08d7",
    "\u0005\u0220\u0111\u0002\u08d6\u08d8\u0005\u0224\u0113\u0002\u08d7\u08d6",
    "\u0003\u0002\u0002\u0002\u08d7\u08d8\u0003\u0002\u0002\u0002\u08d8\u08dd",
    "\u0003\u0002\u0002\u0002\u08d9\u08da\u0005\u0226\u0114\u0002\u08da\u08db",
    "\u0005\u022a\u0116\u0002\u08db\u08dd\u0003\u0002\u0002\u0002\u08dc\u08d5",
    "\u0003\u0002\u0002\u0002\u08dc\u08d9\u0003\u0002\u0002\u0002\u08dd\u021f",
    "\u0003\u0002\u0002\u0002\u08de\u08e1\t\u0012\u0002\u0002\u08df\u08e1",
    "\u0007\u00b2\u0002\u0002\u08e0\u08de\u0003\u0002\u0002\u0002\u08e0\u08df",
    "\u0003\u0002\u0002\u0002\u08e1\u0221\u0003\u0002\u0002\u0002\u08e2\u08e5",
    "\u0005\u0220\u0111\u0002\u08e3\u08e5\u0007\u00b3\u0002\u0002\u08e4\u08e2",
    "\u0003\u0002\u0002\u0002\u08e4\u08e3\u0003\u0002\u0002\u0002\u08e5\u0223",
    "\u0003\u0002\u0002\u0002\u08e6\u08e7\u0006\u0113\t\u0002\u08e7\u08e9",
    "\u0005\u0222\u0112\u0002\u08e8\u08e6\u0003\u0002\u0002\u0002\u08e9\u08ea",
    "\u0003\u0002\u0002\u0002\u08ea\u08e8\u0003\u0002\u0002\u0002\u08ea\u08eb",
    "\u0003\u0002\u0002\u0002\u08eb\u0225\u0003\u0002\u0002\u0002\u08ec\u08ed",
    "\u0007\u0091\u0002\u0002\u08ed\u0227\u0003\u0002\u0002\u0002\u08ee\u08f1",
    "\u0007\u0091\u0002\u0002\u08ef\u08f1\u0005\u0222\u0112\u0002\u08f0\u08ee",
    "\u0003\u0002\u0002\u0002\u08f0\u08ef\u0003\u0002\u0002\u0002\u08f1\u0229",
    "\u0003\u0002\u0002\u0002\u08f2\u08f3\u0006\u0116\n\u0002\u08f3\u08f5",
    "\u0005\u0228\u0115\u0002\u08f4\u08f2\u0003\u0002\u0002\u0002\u08f5\u08f6",
    "\u0003\u0002\u0002\u0002\u08f6\u08f4\u0003\u0002\u0002\u0002\u08f6\u08f7",
    "\u0003\u0002\u0002\u0002\u08f7\u022b\u0003\u0002\u0002\u0002\u08f8\u08fd",
    "\u0005\u022e\u0118\u0002\u08f9\u08fd\u0005\u0236\u011c\u0002\u08fa\u08fd",
    "\u0005\u0230\u0119\u0002\u08fb\u08fd\u0005\u0232\u011a\u0002\u08fc\u08f8",
    "\u0003\u0002\u0002\u0002\u08fc\u08f9\u0003\u0002\u0002\u0002\u08fc\u08fa",
    "\u0003\u0002\u0002\u0002\u08fc\u08fb\u0003\u0002\u0002\u0002\u08fd\u022d",
    "\u0003\u0002\u0002\u0002\u08fe\u0900\u0005\u0208\u0105\u0002\u08ff\u08fe",
    "\u0003\u0002\u0002\u0002\u08ff\u0900\u0003\u0002\u0002\u0002\u0900\u0901",
    "\u0003\u0002\u0002\u0002\u0901\u0907\u0005\u0234\u011b\u0002\u0902\u0904",
    "\u0005\u0208\u0105\u0002\u0903\u0902\u0003\u0002\u0002\u0002\u0903\u0904",
    "\u0003\u0002\u0002\u0002\u0904\u0905\u0003\u0002\u0002\u0002\u0905\u0907",
    "\u0007\u00b9\u0002\u0002\u0906\u08ff\u0003\u0002\u0002\u0002\u0906\u0903",
    "\u0003\u0002\u0002\u0002\u0907\u022f\u0003\u0002\u0002\u0002\u0908\u0909",
    "\t\u0013\u0002\u0002\u0909\u0231\u0003\u0002\u0002\u0002\u090a\u090b",
    "\u0007a\u0002\u0002\u090b\u0233\u0003\u0002\u0002\u0002\u090c\u090d",
    "\t\u0014\u0002\u0002\u090d\u0235\u0003\u0002\u0002\u0002\u090e\u0912",
    "\u0005\u0238\u011d\u0002\u090f\u0912\u0005\u023c\u011f\u0002\u0910\u0912",
    "\u0005\u023a\u011e\u0002\u0911\u090e\u0003\u0002\u0002\u0002\u0911\u090f",
    "\u0003\u0002\u0002\u0002\u0911\u0910\u0003\u0002\u0002\u0002\u0912\u0237",
    "\u0003\u0002\u0002\u0002\u0913\u0915\u0007\u00be\u0002\u0002\u0914\u0916",
    "\u0007\u00cb\u0002\u0002\u0915\u0914\u0003\u0002\u0002\u0002\u0916\u0917",
    "\u0003\u0002\u0002\u0002\u0917\u0915\u0003\u0002\u0002\u0002\u0917\u0918",
    "\u0003\u0002\u0002\u0002\u0918\u0919\u0003\u0002\u0002\u0002\u0919\u0922",
    "\u0007\u00ca\u0002\u0002\u091a\u091c\u0007\u00bf\u0002\u0002\u091b\u091d",
    "\u0007\u00c9\u0002\u0002\u091c\u091b\u0003\u0002\u0002\u0002\u091d\u091e",
    "\u0003\u0002\u0002\u0002\u091e\u091c\u0003\u0002\u0002\u0002\u091e\u091f",
    "\u0003\u0002\u0002\u0002\u091f\u0920\u0003\u0002\u0002\u0002\u0920\u0922",
    "\u0007\u00c8\u0002\u0002\u0921\u0913\u0003\u0002\u0002\u0002\u0921\u091a",
    "\u0003\u0002\u0002\u0002\u0922\u0239\u0003\u0002\u0002\u0002\u0923\u0927",
    "\u0007\u00c1\u0002\u0002\u0924\u0926\u0007\u00c4\u0002\u0002\u0925\u0924",
    "\u0003\u0002\u0002\u0002\u0926\u0929\u0003\u0002\u0002\u0002\u0927\u0925",
    "\u0003\u0002\u0002\u0002\u0927\u0928\u0003\u0002\u0002\u0002\u0928\u092a",
    "\u0003\u0002\u0002\u0002\u0929\u0927\u0003\u0002\u0002\u0002\u092a\u0934",
    "\u0007\u00c3\u0002\u0002\u092b\u092f\u0007\u00c0\u0002\u0002\u092c\u092e",
    "\u0007\u00c7\u0002\u0002\u092d\u092c\u0003\u0002\u0002\u0002\u092e\u0931",
    "\u0003\u0002\u0002\u0002\u092f\u092d\u0003\u0002\u0002\u0002\u092f\u0930",
    "\u0003\u0002\u0002\u0002\u0930\u0932\u0003\u0002\u0002\u0002\u0931\u092f",
    "\u0003\u0002\u0002\u0002\u0932\u0934\u0007\u00c6\u0002\u0002\u0933\u0923",
    "\u0003\u0002\u0002\u0002\u0933\u092b\u0003\u0002\u0002\u0002\u0934\u023b",
    "\u0003\u0002\u0002\u0002\u0935\u0943\u0007\u00c1\u0002\u0002\u0936\u0942",
    "\u0007\u00c4\u0002\u0002\u0937\u093d\u0007\u00c2\u0002\u0002\u0938\u093e",
    "\u0005\u0172\u00ba\u0002\u0939\u093a\u0005\u01a4\u00d3\u0002\u093a\u093b",
    "\u0007\u0098\u0002\u0002\u093b\u093c\u0005\u01a2\u00d2\u0002\u093c\u093e",
    "\u0003\u0002\u0002\u0002\u093d\u0938\u0003\u0002\u0002\u0002\u093d\u0939",
    "\u0003\u0002\u0002\u0002\u093e\u093f\u0003\u0002\u0002\u0002\u093f\u0940",
    "\u0007\u0096\u0002\u0002\u0940\u0942\u0003\u0002\u0002\u0002\u0941\u0936",
    "\u0003\u0002\u0002\u0002\u0941\u0937\u0003\u0002\u0002\u0002\u0942\u0945",
    "\u0003\u0002\u0002\u0002\u0943\u0941\u0003\u0002\u0002\u0002\u0943\u0944",
    "\u0003\u0002\u0002\u0002\u0944\u0946\u0003\u0002\u0002\u0002\u0945\u0943",
    "\u0003\u0002\u0002\u0002\u0946\u095a\u0007\u00c3\u0002\u0002\u0947\u0955",
    "\u0007\u00c0\u0002\u0002\u0948\u0954\u0007\u00c7\u0002\u0002\u0949\u094f",
    "\u0007\u00c5\u0002\u0002\u094a\u0950\u0005\u0172\u00ba\u0002\u094b\u094c",
    "\u0005\u01a4\u00d3\u0002\u094c\u094d\u0007\u0098\u0002\u0002\u094d\u094e",
    "\u0005\u01a2\u00d2\u0002\u094e\u0950\u0003\u0002\u0002\u0002\u094f\u094a",
    "\u0003\u0002\u0002\u0002\u094f\u094b\u0003\u0002\u0002\u0002\u0950\u0951",
    "\u0003\u0002\u0002\u0002\u0951\u0952\u0007\u0096\u0002\u0002\u0952\u0954",
    "\u0003\u0002\u0002\u0002\u0953\u0948\u0003\u0002\u0002\u0002\u0953\u0949",
    "\u0003\u0002\u0002\u0002\u0954\u0957\u0003\u0002\u0002\u0002\u0955\u0953",
    "\u0003\u0002\u0002\u0002\u0955\u0956\u0003\u0002\u0002\u0002\u0956\u0958",
    "\u0003\u0002\u0002\u0002\u0957\u0955\u0003\u0002\u0002\u0002\u0958\u095a",
    "\u0007\u00c6\u0002\u0002\u0959\u0935\u0003\u0002\u0002\u0002\u0959\u0947",
    "\u0003\u0002\u0002\u0002\u095a\u023d\u0003\u0002\u0002\u0002\u0110\u023f",
    "\u0246\u024a\u0250\u025d\u0263\u0275\u027b\u0281\u028c\u0292\u0296\u02a0",
    "\u02a5\u02a9\u02b9\u02c5\u02c9\u02cd\u02d3\u02db\u02e0\u02e4\u02ef\u02f4",
    "\u02fb\u030a\u031e\u0320\u0327\u032c\u0332\u0338\u0343\u034c\u035e\u0361",
    "\u0366\u0370\u0374\u0377\u037d\u0381\u0384\u0387\u038e\u0392\u0398\u03a3",
    "\u03a8\u03ab\u03b5\u03ba\u03c5\u03cc\u03d4\u03d8\u03e9\u03ef\u03f3\u03fc",
    "\u0402\u040c\u040f\u0414\u0418\u041d\u0424\u0428\u0431\u0435\u043c\u0445",
    "\u0449\u0452\u0457\u045c\u045f\u0463\u0466\u046a\u046d\u0476\u047b\u0480",
    "\u0485\u048c\u0490\u0492\u0498\u049e\u04a3\u04a8\u04b2\u04b6\u04b9\u04be",
    "\u04c1\u04c5\u04cc\u04d0\u04d3\u04dd\u04e7\u04e9\u04f2\u04fc\u0500\u050a",
    "\u050f\u0517\u051a\u051f\u0522\u052f\u0535\u0538\u053c\u053e\u0543\u0546",
    "\u0553\u0559\u0560\u056d\u0578\u0582\u0588\u058c\u058f\u0596\u059b\u059e",
    "\u05a4\u05a9\u05b4\u05be\u05c1\u05c5\u05cf\u05dd\u05ea\u05ef\u0602\u060a",
    "\u061d\u0622\u0627\u062f\u0632\u063a\u0641\u064c\u0650\u0659\u065f\u0664",
    "\u0669\u0673\u0677\u067c\u0681\u0689\u068f\u0693\u069a\u069e\u06a4\u06ab",
    "\u06ae\u06b3\u06b8\u06c1\u06c3\u06d5\u06e2\u06ef\u06f3\u06f6\u06fb\u06ff",
    "\u0702\u0709\u070d\u0711\u0718\u071e\u0720\u072b\u072f\u0733\u0738\u073f",
    "\u0741\u0746\u074a\u075c\u0763\u0769\u0771\u077b\u0780\u0783\u0788\u0791",
    "\u0797\u07a9\u07ab\u07b1\u07b5\u07b9\u07c1\u07cb\u07cd\u07de\u07e7\u07eb",
    "\u07f0\u07f4\u07f9\u0802\u0815\u0820\u0824\u082c\u0830\u0834\u0838\u0841",
    "\u0848\u084c\u0851\u0855\u085d\u085f\u0868\u086c\u0872\u0877\u0888\u088c",
    "\u08a0\u08a9\u08ac\u08b3\u08d7\u08dc\u08e0\u08e4\u08ea\u08f0\u08f6\u08fc",
    "\u08ff\u0903\u0906\u0911\u0917\u091e\u0921\u0927\u092f\u0933\u093d\u0941",
    "\u0943\u094f\u0953\u0955\u0959"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, "'contract'", "'resource'", "'String'", 
                     "'UINT8'", "'as'", "'alpha'", "'break'", "'case'", 
                     "'catch'", "'class'", "'continue'", "'default'", "'defer'", 
                     "'do'", "'guard'", "'else'", "'enum'", "'for'", "'fallthrough'", 
                     "'fun'", "'in'", "'if'", "'import'", "'internal'", 
                     "'final'", "'open'", "'private'", "'public'", "'where'", 
                     "'while'", "'let'", "'var'", "'protocol'", "'get'", 
                     "'set'", "'willSet'", "'didSet'", "'repeat'", "'switch'", 
                     "'struct'", "'return'", "'throw'", "'throws'", "'rethrows'", 
                     "'indirect'", "'init'", "'deinit'", "'associatedtype'", 
                     "'extension'", "'subscript'", "'prefix'", "'infix'", 
                     "'left'", "'right'", "'none'", "'precedencegroup'", 
                     "'higherThan'", "'lowerThan'", "'assignment'", "'associativity'", 
                     "'postfix'", "'operator'", "'typealias'", "'os'", "'arch'", 
                     "'swift'", "'compiler'", "'canImport'", "'targetEnvironment'", 
                     "'convenience'", "'dynamic'", "'lazy'", "'optional'", 
                     "'override'", "'required'", "'static'", "'weak'", "'unowned'", 
                     "'safe'", "'unsafe'", "'mutating'", "'nonmutating'", 
                     "'fileprivate'", "'is'", "'try'", "'super'", "'Any'", 
                     "'false'", "'red'", "'blue'", "'green'", "'resourceName'", 
                     "'true'", "'nil'", "'inout'", "'some'", "'Type'", "'precedence'", 
                     "'self'", "'Self'", "'macOS'", "'iOS'", "'OSX'", "'watchOS'", 
                     "'tvOS'", "'Linux'", "'Windows'", "'i386'", "'x86_64'", 
                     "'arm'", "'arm64'", "'simulator'", "'macCatalyst'", 
                     "'iOSApplicationExtension'", "'macCatalystApplicationExtension'", 
                     "'macOSApplicationExtension'", "'#sourceLocation'", 
                     "'file'", "'line'", "'#error'", "'#warning'", "'#available'", 
                     "'#if'", "'#elseif'", "'#else'", "'#endif'", "'#file'", 
                     "'#fileID'", "'#filePath'", "'#line'", "'#column'", 
                     "'#function'", "'#dsohandle'", "'#selector'", "'#keyPath'", 
                     "'#colorLiteral'", "'#fileLiteral'", "'#imageLiteral'", 
                     "'getter'", "'setter'", null, "'.'", "'{'", "'('", 
                     "'['", "'}'", "')'", "']'", "','", "':'", "';'", "'<'", 
                     "'>'", "'_'", "'!'", "'?'", "'@'", "'&'", "'-'", "'='", 
                     "'<-'", "'<-!'", "'<->'", "'|'", "'/'", "'+'", "'*'", 
                     "'%'", "'^'", "'~'", "'#'", "'`'", "'$'", "'\\'" ];

var symbolicNames = [ null, "ACCESS", "CONTRACT", "RESOURCE", "STRING_TYPE", 
                      "UINT8_TYPE", "AS", "ALPHA", "BREAK", "CASE", "CATCH", 
                      "CLASS", "CONTINUE", "DEFAULT", "DEFER", "DO", "GUARD", 
                      "ELSE", "ENUM", "FOR", "FALLTHROUGH", "FUNC", "IN", 
                      "IF", "IMPORT", "INTERNAL", "FINAL", "OPEN", "PRIVATE", 
                      "PUBLIC", "WHERE", "WHILE", "LET", "VAR", "PROTOCOL", 
                      "GET", "SET", "WILL_SET", "DID_SET", "REPEAT", "SWITCH", 
                      "STRUCT", "RETURN", "THROW", "THROWS", "RETHROWS", 
                      "INDIRECT", "INIT", "DEINIT", "ASSOCIATED_TYPE", "EXTENSION", 
                      "SUBSCRIPT", "PREFIX", "INFIX", "LEFT", "RIGHT", "NONE", 
                      "PRECEDENCE_GROUP", "HIGHER_THAN", "LOWER_THAN", "ASSIGNMENT", 
                      "ASSOCIATIVITY", "POSTFIX", "OPERATOR", "TYPEALIAS", 
                      "OS", "ARCH", "SWIFT", "COMPILER", "CAN_IMPORT", "TARGET_ENVIRONMENT", 
                      "CONVENIENCE", "DYNAMIC", "LAZY", "OPTIONAL", "OVERRIDE", 
                      "REQUIRED", "STATIC", "WEAK", "UNOWNED", "SAFE", "UNSAFE", 
                      "MUTATING", "NONMUTATING", "FILE_PRIVATE", "IS", "TRY", 
                      "SUPER", "ANY", "FALSE", "RED", "BLUE", "GREEN", "RESOURCE_NAME", 
                      "TRUE", "NIL", "INOUT", "SOME", "TYPE", "PRECEDENCE", 
                      "SELF", "SELF_BIG", "MAC_OS", "I_OS", "OSX", "WATCH_OS", 
                      "TV_OS", "LINUX", "WINDOWS", "I386", "X86_64", "ARM", 
                      "ARM64", "SIMULATOR", "MAC_CATALYST", "I_OS_APPLICATION_EXTENSION", 
                      "MAC_CATALYST_APPLICATION_EXTENSION", "MAC_OS_APPLICATION_EXTENSION", 
                      "SOURCE_LOCATION", "FILE", "LINE", "ERROR", "WARNING", 
                      "AVAILABLE", "HASH_IF", "HASH_ELSEIF", "HASH_ELSE", 
                      "HASH_ENDIF", "HASH_FILE", "HASH_FILE_ID", "HASH_FILE_PATH", 
                      "HASH_LINE", "HASH_COLUMN", "HASH_FUNCTION", "HASH_DSO_HANDLE", 
                      "HASH_SELECTOR", "HASH_KEYPATH", "HASH_COLOR_LITERAL", 
                      "HASH_FILE_LITERAL", "HASH_IMAGE_LITERAL", "GETTER", 
                      "SETTER", "Identifier", "DOT", "LCURLY", "LPAREN", 
                      "LBRACK", "RCURLY", "RPAREN", "RBRACK", "COMMA", "COLON", 
                      "SEMI", "LT", "GT", "UNDERSCORE", "BANG", "QUESTION", 
                      "AT", "AND", "SUB", "EQUAL", "MOVE", "FORCE_MOVE", 
                      "SWAP", "OR", "DIV", "ADD", "MUL", "MOD", "CARET", 
                      "TILDE", "HASH", "BACKTICK", "DOLLAR", "BACKSLASH", 
                      "Operator_head_other", "Operator_following_character", 
                      "Binary_literal", "Octal_literal", "Decimal_digits", 
                      "Decimal_literal", "Hexadecimal_literal", "Floating_point_literal", 
                      "WS", "HASHBANG", "Block_comment", "Line_comment", 
                      "Multi_line_extended_string_open", "Single_line_extended_string_open", 
                      "Multi_line_string_open", "Single_line_string_open", 
                      "Interpolataion_single_line", "Single_line_string_close", 
                      "Quoted_single_line_text", "Interpolataion_multi_line", 
                      "Multi_line_string_close", "Quoted_multi_line_text", 
                      "Single_line_extended_string_close", "Quoted_single_line_extended_text", 
                      "Multi_line_extended_string_close", "Quoted_multi_line_extended_text" ];

var ruleNames =  [ "top_level", "loop_statement", "for_in_statement", "while_statement", 
                   "condition_list", "condition", "case_condition", "optional_binding_condition", 
                   "repeat_while_statement", "branch_statement", "if_statement", 
                   "else_clause", "guard_statement", "switch_statement", 
                   "switch_cases", "switch_case", "case_label", "case_item_list", 
                   "default_label", "where_clause", "where_expression", 
                   "labeled_statement", "statement_label", "label_name", 
                   "control_transfer_statement", "break_statement", "continue_statement", 
                   "fallthrough_statement", "return_statement", "throw_statement", 
                   "do_statement", "catch_clauses", "catch_clause", "catch_pattern_list", 
                   "catch_pattern", "module_name", "environment", "line_control_statement", 
                   "line_number", "file_name", "diagnostic_statement", "diagnostic_message", 
                   "platform_version", "requirement_list", "requirement", 
                   "conformance_requirement", "same_type_requirement", "generic_argument_clause", 
                   "generic_argument_list", "generic_argument", "access_level_modifier", 
                   "declaration", "declarations", "contract_declaration", 
                   "function_declaration", "function_head", "function_name", 
                   "function_signature", "function_result", "function_body", 
                   "top_level_declaration", "code_block", "import_declaration", 
                   "import_kind", "import_path", "import_path_identifier", 
                   "constant_declaration", "pattern_initializer_list", "pattern_initializer", 
                   "initializer", "variable_name", "variable_declaration", 
                   "variable_declaration_head", "variable", "resource_variable", 
                   "local_variable", "initializer_declaration", "initializer_head", 
                   "initializer_body", "generic_parameter_clause", "generic_parameter_list", 
                   "generic_parameter", "parameter_clause", "parameter_list", 
                   "parameter", "statement", "statements", "assignment_statement", 
                   "assignment_operator", "literal_expression", "array_literal", 
                   "array_literal_items", "array_literal_item", "dictionary_literal", 
                   "dictionary_literal_items", "dictionary_literal_item", 
                   "getter_setter_block", "getter_clause", "setter_clause", 
                   "setter_name", "getter_setter_keyword_block", "getter_keyword_clause", 
                   "setter_keyword_clause", "willSet_didSet_block", "willSet_clause", 
                   "didSet_clause", "typealias_declaration", "typealias_name", 
                   "typealias_assignment", "enum_declaration", "union_style_enum", 
                   "union_style_enum_members", "union_style_enum_member", 
                   "union_style_enum_case_clause", "union_style_enum_case_list", 
                   "union_style_enum_case", "enum_name", "enum_case_name", 
                   "raw_value_style_enum", "raw_value_style_enum_members", 
                   "raw_value_style_enum_member", "raw_value_style_enum_case_clause", 
                   "raw_value_style_enum_case_list", "raw_value_style_enum_case", 
                   "raw_value_assignment", "raw_value_literal", "struct_declaration", 
                   "struct_name", "struct_body", "struct_members", "struct_member", 
                   "class_declaration", "class_name", "class_body", "class_members", 
                   "class_member", "protocol_declaration", "protocol_name", 
                   "protocol_body", "protocol_members", "protocol_member", 
                   "protocol_member_declaration", "protocol_property_declaration", 
                   "protocol_method_declaration", "protocol_initializer_declaration", 
                   "protocol_subscript_declaration", "protocol_associated_type_declaration", 
                   "deinitializer_declaration", "extension_declaration", 
                   "extension_body", "extension_members", "extension_member", 
                   "subscript_declaration", "subscript_head", "subscript_result", 
                   "operator_declaration", "prefix_operator_declaration", 
                   "postfix_operator_declaration", "infix_operator_declaration", 
                   "infix_operator_group", "precedence_group_declaration", 
                   "precedence_group_attributes", "precedence_group_attribute", 
                   "precedence_group_relation", "precedence_group_assignment", 
                   "precedence_group_associativity", "precedence_group_names", 
                   "precedence_group_name", "declaration_modifier", "declaration_modifiers", 
                   "mutation_modifier", "pattern", "wildcard_pattern", "identifier_pattern", 
                   "value_binding_pattern", "tuple_pattern", "tuple_pattern_element_list", 
                   "tuple_pattern_element", "enum_case_pattern", "optional_pattern", 
                   "expression_pattern", "balanced_tokens", "balanced_token", 
                   "balanced_token_punctuation", "expression", "expression_list", 
                   "prefix_expression", "try_operator", "binary_expression", 
                   "binary_expressions", "conditional_operator", "type_casting_operator", 
                   "primary_expression", "self_expression", "superclass_expression", 
                   "closure_expression", "closure_signature", "closure_parameter_clause", 
                   "closure_parameter_list", "closure_parameter", "capture_list", 
                   "capture_list_items", "capture_list_item", "capture_specifier", 
                   "implicit_member_expression", "parenthesized_operator", 
                   "parenthesized_expression", "tuple_expression", "tuple_element_list", 
                   "tuple_element", "wildcard_expression", "key_path_expression", 
                   "key_path_components", "key_path_component", "key_path_postfixes", 
                   "key_path_postfix", "selector_expression", "key_path_string_expression", 
                   "postfix_expression", "function_call_suffix", "initializer_suffix", 
                   "explicit_member_suffix", "postfix_self_suffix", "subscript_suffix", 
                   "forced_value_suffix", "optional_chaining_suffix", "function_call_argument_clause", 
                   "function_call_argument_list", "function_call_argument", 
                   "trailing_closures", "labeled_trailing_closures", "labeled_trailing_closure", 
                   "argument_names", "argument_name", "type", "type_annotation", 
                   "type_identifier", "type_name", "tuple_type", "tuple_type_element_list", 
                   "tuple_type_element", "element_name", "function_type", 
                   "function_type_argument_clause", "function_type_argument_list", 
                   "function_type_argument", "argument_label", "array_type", 
                   "dictionary_type", "protocol_composition_type", "trailing_composition_and", 
                   "opaque_type", "any_type", "self_type", "type_inheritance_clause", 
                   "type_inheritance_list", "identifier", "identifier_list", 
                   "keyword", "negate_prefix_operator", "compilation_condition_AND", 
                   "compilation_condition_OR", "compilation_condition_GE", 
                   "compilation_condition_L", "arrow_operator", "range_operator", 
                   "same_type_equals", "binary_operator", "prefix_operator", 
                   "postfix_operator", "operator", "operator_head", "operator_character", 
                   "operator_characters", "dot_operator_head", "dot_operator_character", 
                   "dot_operator_characters", "literal", "numeric_literal", 
                   "boolean_literal", "nil_literal", "integer_literal", 
                   "string_literal", "extended_string_literal", "static_string_literal", 
                   "interpolated_string_literal" ];

function CadenceParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CadenceParser.prototype = Object.create(antlr4.Parser.prototype);
CadenceParser.prototype.constructor = CadenceParser;

Object.defineProperty(CadenceParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CadenceParser.EOF = antlr4.Token.EOF;
CadenceParser.ACCESS = 1;
CadenceParser.CONTRACT = 2;
CadenceParser.RESOURCE = 3;
CadenceParser.STRING_TYPE = 4;
CadenceParser.UINT8_TYPE = 5;
CadenceParser.AS = 6;
CadenceParser.ALPHA = 7;
CadenceParser.BREAK = 8;
CadenceParser.CASE = 9;
CadenceParser.CATCH = 10;
CadenceParser.CLASS = 11;
CadenceParser.CONTINUE = 12;
CadenceParser.DEFAULT = 13;
CadenceParser.DEFER = 14;
CadenceParser.DO = 15;
CadenceParser.GUARD = 16;
CadenceParser.ELSE = 17;
CadenceParser.ENUM = 18;
CadenceParser.FOR = 19;
CadenceParser.FALLTHROUGH = 20;
CadenceParser.FUNC = 21;
CadenceParser.IN = 22;
CadenceParser.IF = 23;
CadenceParser.IMPORT = 24;
CadenceParser.INTERNAL = 25;
CadenceParser.FINAL = 26;
CadenceParser.OPEN = 27;
CadenceParser.PRIVATE = 28;
CadenceParser.PUBLIC = 29;
CadenceParser.WHERE = 30;
CadenceParser.WHILE = 31;
CadenceParser.LET = 32;
CadenceParser.VAR = 33;
CadenceParser.PROTOCOL = 34;
CadenceParser.GET = 35;
CadenceParser.SET = 36;
CadenceParser.WILL_SET = 37;
CadenceParser.DID_SET = 38;
CadenceParser.REPEAT = 39;
CadenceParser.SWITCH = 40;
CadenceParser.STRUCT = 41;
CadenceParser.RETURN = 42;
CadenceParser.THROW = 43;
CadenceParser.THROWS = 44;
CadenceParser.RETHROWS = 45;
CadenceParser.INDIRECT = 46;
CadenceParser.INIT = 47;
CadenceParser.DEINIT = 48;
CadenceParser.ASSOCIATED_TYPE = 49;
CadenceParser.EXTENSION = 50;
CadenceParser.SUBSCRIPT = 51;
CadenceParser.PREFIX = 52;
CadenceParser.INFIX = 53;
CadenceParser.LEFT = 54;
CadenceParser.RIGHT = 55;
CadenceParser.NONE = 56;
CadenceParser.PRECEDENCE_GROUP = 57;
CadenceParser.HIGHER_THAN = 58;
CadenceParser.LOWER_THAN = 59;
CadenceParser.ASSIGNMENT = 60;
CadenceParser.ASSOCIATIVITY = 61;
CadenceParser.POSTFIX = 62;
CadenceParser.OPERATOR = 63;
CadenceParser.TYPEALIAS = 64;
CadenceParser.OS = 65;
CadenceParser.ARCH = 66;
CadenceParser.SWIFT = 67;
CadenceParser.COMPILER = 68;
CadenceParser.CAN_IMPORT = 69;
CadenceParser.TARGET_ENVIRONMENT = 70;
CadenceParser.CONVENIENCE = 71;
CadenceParser.DYNAMIC = 72;
CadenceParser.LAZY = 73;
CadenceParser.OPTIONAL = 74;
CadenceParser.OVERRIDE = 75;
CadenceParser.REQUIRED = 76;
CadenceParser.STATIC = 77;
CadenceParser.WEAK = 78;
CadenceParser.UNOWNED = 79;
CadenceParser.SAFE = 80;
CadenceParser.UNSAFE = 81;
CadenceParser.MUTATING = 82;
CadenceParser.NONMUTATING = 83;
CadenceParser.FILE_PRIVATE = 84;
CadenceParser.IS = 85;
CadenceParser.TRY = 86;
CadenceParser.SUPER = 87;
CadenceParser.ANY = 88;
CadenceParser.FALSE = 89;
CadenceParser.RED = 90;
CadenceParser.BLUE = 91;
CadenceParser.GREEN = 92;
CadenceParser.RESOURCE_NAME = 93;
CadenceParser.TRUE = 94;
CadenceParser.NIL = 95;
CadenceParser.INOUT = 96;
CadenceParser.SOME = 97;
CadenceParser.TYPE = 98;
CadenceParser.PRECEDENCE = 99;
CadenceParser.SELF = 100;
CadenceParser.SELF_BIG = 101;
CadenceParser.MAC_OS = 102;
CadenceParser.I_OS = 103;
CadenceParser.OSX = 104;
CadenceParser.WATCH_OS = 105;
CadenceParser.TV_OS = 106;
CadenceParser.LINUX = 107;
CadenceParser.WINDOWS = 108;
CadenceParser.I386 = 109;
CadenceParser.X86_64 = 110;
CadenceParser.ARM = 111;
CadenceParser.ARM64 = 112;
CadenceParser.SIMULATOR = 113;
CadenceParser.MAC_CATALYST = 114;
CadenceParser.I_OS_APPLICATION_EXTENSION = 115;
CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION = 116;
CadenceParser.MAC_OS_APPLICATION_EXTENSION = 117;
CadenceParser.SOURCE_LOCATION = 118;
CadenceParser.FILE = 119;
CadenceParser.LINE = 120;
CadenceParser.ERROR = 121;
CadenceParser.WARNING = 122;
CadenceParser.AVAILABLE = 123;
CadenceParser.HASH_IF = 124;
CadenceParser.HASH_ELSEIF = 125;
CadenceParser.HASH_ELSE = 126;
CadenceParser.HASH_ENDIF = 127;
CadenceParser.HASH_FILE = 128;
CadenceParser.HASH_FILE_ID = 129;
CadenceParser.HASH_FILE_PATH = 130;
CadenceParser.HASH_LINE = 131;
CadenceParser.HASH_COLUMN = 132;
CadenceParser.HASH_FUNCTION = 133;
CadenceParser.HASH_DSO_HANDLE = 134;
CadenceParser.HASH_SELECTOR = 135;
CadenceParser.HASH_KEYPATH = 136;
CadenceParser.HASH_COLOR_LITERAL = 137;
CadenceParser.HASH_FILE_LITERAL = 138;
CadenceParser.HASH_IMAGE_LITERAL = 139;
CadenceParser.GETTER = 140;
CadenceParser.SETTER = 141;
CadenceParser.Identifier = 142;
CadenceParser.DOT = 143;
CadenceParser.LCURLY = 144;
CadenceParser.LPAREN = 145;
CadenceParser.LBRACK = 146;
CadenceParser.RCURLY = 147;
CadenceParser.RPAREN = 148;
CadenceParser.RBRACK = 149;
CadenceParser.COMMA = 150;
CadenceParser.COLON = 151;
CadenceParser.SEMI = 152;
CadenceParser.LT = 153;
CadenceParser.GT = 154;
CadenceParser.UNDERSCORE = 155;
CadenceParser.BANG = 156;
CadenceParser.QUESTION = 157;
CadenceParser.AT = 158;
CadenceParser.AND = 159;
CadenceParser.SUB = 160;
CadenceParser.EQUAL = 161;
CadenceParser.MOVE = 162;
CadenceParser.FORCE_MOVE = 163;
CadenceParser.SWAP = 164;
CadenceParser.OR = 165;
CadenceParser.DIV = 166;
CadenceParser.ADD = 167;
CadenceParser.MUL = 168;
CadenceParser.MOD = 169;
CadenceParser.CARET = 170;
CadenceParser.TILDE = 171;
CadenceParser.HASH = 172;
CadenceParser.BACKTICK = 173;
CadenceParser.DOLLAR = 174;
CadenceParser.BACKSLASH = 175;
CadenceParser.Operator_head_other = 176;
CadenceParser.Operator_following_character = 177;
CadenceParser.Binary_literal = 178;
CadenceParser.Octal_literal = 179;
CadenceParser.Decimal_digits = 180;
CadenceParser.Decimal_literal = 181;
CadenceParser.Hexadecimal_literal = 182;
CadenceParser.Floating_point_literal = 183;
CadenceParser.WS = 184;
CadenceParser.HASHBANG = 185;
CadenceParser.Block_comment = 186;
CadenceParser.Line_comment = 187;
CadenceParser.Multi_line_extended_string_open = 188;
CadenceParser.Single_line_extended_string_open = 189;
CadenceParser.Multi_line_string_open = 190;
CadenceParser.Single_line_string_open = 191;
CadenceParser.Interpolataion_single_line = 192;
CadenceParser.Single_line_string_close = 193;
CadenceParser.Quoted_single_line_text = 194;
CadenceParser.Interpolataion_multi_line = 195;
CadenceParser.Multi_line_string_close = 196;
CadenceParser.Quoted_multi_line_text = 197;
CadenceParser.Single_line_extended_string_close = 198;
CadenceParser.Quoted_single_line_extended_text = 199;
CadenceParser.Multi_line_extended_string_close = 200;
CadenceParser.Quoted_multi_line_extended_text = 201;

CadenceParser.RULE_top_level = 0;
CadenceParser.RULE_loop_statement = 1;
CadenceParser.RULE_for_in_statement = 2;
CadenceParser.RULE_while_statement = 3;
CadenceParser.RULE_condition_list = 4;
CadenceParser.RULE_condition = 5;
CadenceParser.RULE_case_condition = 6;
CadenceParser.RULE_optional_binding_condition = 7;
CadenceParser.RULE_repeat_while_statement = 8;
CadenceParser.RULE_branch_statement = 9;
CadenceParser.RULE_if_statement = 10;
CadenceParser.RULE_else_clause = 11;
CadenceParser.RULE_guard_statement = 12;
CadenceParser.RULE_switch_statement = 13;
CadenceParser.RULE_switch_cases = 14;
CadenceParser.RULE_switch_case = 15;
CadenceParser.RULE_case_label = 16;
CadenceParser.RULE_case_item_list = 17;
CadenceParser.RULE_default_label = 18;
CadenceParser.RULE_where_clause = 19;
CadenceParser.RULE_where_expression = 20;
CadenceParser.RULE_labeled_statement = 21;
CadenceParser.RULE_statement_label = 22;
CadenceParser.RULE_label_name = 23;
CadenceParser.RULE_control_transfer_statement = 24;
CadenceParser.RULE_break_statement = 25;
CadenceParser.RULE_continue_statement = 26;
CadenceParser.RULE_fallthrough_statement = 27;
CadenceParser.RULE_return_statement = 28;
CadenceParser.RULE_throw_statement = 29;
CadenceParser.RULE_do_statement = 30;
CadenceParser.RULE_catch_clauses = 31;
CadenceParser.RULE_catch_clause = 32;
CadenceParser.RULE_catch_pattern_list = 33;
CadenceParser.RULE_catch_pattern = 34;
CadenceParser.RULE_module_name = 35;
CadenceParser.RULE_environment = 36;
CadenceParser.RULE_line_control_statement = 37;
CadenceParser.RULE_line_number = 38;
CadenceParser.RULE_file_name = 39;
CadenceParser.RULE_diagnostic_statement = 40;
CadenceParser.RULE_diagnostic_message = 41;
CadenceParser.RULE_platform_version = 42;
CadenceParser.RULE_requirement_list = 43;
CadenceParser.RULE_requirement = 44;
CadenceParser.RULE_conformance_requirement = 45;
CadenceParser.RULE_same_type_requirement = 46;
CadenceParser.RULE_generic_argument_clause = 47;
CadenceParser.RULE_generic_argument_list = 48;
CadenceParser.RULE_generic_argument = 49;
CadenceParser.RULE_access_level_modifier = 50;
CadenceParser.RULE_declaration = 51;
CadenceParser.RULE_declarations = 52;
CadenceParser.RULE_contract_declaration = 53;
CadenceParser.RULE_function_declaration = 54;
CadenceParser.RULE_function_head = 55;
CadenceParser.RULE_function_name = 56;
CadenceParser.RULE_function_signature = 57;
CadenceParser.RULE_function_result = 58;
CadenceParser.RULE_function_body = 59;
CadenceParser.RULE_top_level_declaration = 60;
CadenceParser.RULE_code_block = 61;
CadenceParser.RULE_import_declaration = 62;
CadenceParser.RULE_import_kind = 63;
CadenceParser.RULE_import_path = 64;
CadenceParser.RULE_import_path_identifier = 65;
CadenceParser.RULE_constant_declaration = 66;
CadenceParser.RULE_pattern_initializer_list = 67;
CadenceParser.RULE_pattern_initializer = 68;
CadenceParser.RULE_initializer = 69;
CadenceParser.RULE_variable_name = 70;
CadenceParser.RULE_variable_declaration = 71;
CadenceParser.RULE_variable_declaration_head = 72;
CadenceParser.RULE_variable = 73;
CadenceParser.RULE_resource_variable = 74;
CadenceParser.RULE_local_variable = 75;
CadenceParser.RULE_initializer_declaration = 76;
CadenceParser.RULE_initializer_head = 77;
CadenceParser.RULE_initializer_body = 78;
CadenceParser.RULE_generic_parameter_clause = 79;
CadenceParser.RULE_generic_parameter_list = 80;
CadenceParser.RULE_generic_parameter = 81;
CadenceParser.RULE_parameter_clause = 82;
CadenceParser.RULE_parameter_list = 83;
CadenceParser.RULE_parameter = 84;
CadenceParser.RULE_statement = 85;
CadenceParser.RULE_statements = 86;
CadenceParser.RULE_assignment_statement = 87;
CadenceParser.RULE_assignment_operator = 88;
CadenceParser.RULE_literal_expression = 89;
CadenceParser.RULE_array_literal = 90;
CadenceParser.RULE_array_literal_items = 91;
CadenceParser.RULE_array_literal_item = 92;
CadenceParser.RULE_dictionary_literal = 93;
CadenceParser.RULE_dictionary_literal_items = 94;
CadenceParser.RULE_dictionary_literal_item = 95;
CadenceParser.RULE_getter_setter_block = 96;
CadenceParser.RULE_getter_clause = 97;
CadenceParser.RULE_setter_clause = 98;
CadenceParser.RULE_setter_name = 99;
CadenceParser.RULE_getter_setter_keyword_block = 100;
CadenceParser.RULE_getter_keyword_clause = 101;
CadenceParser.RULE_setter_keyword_clause = 102;
CadenceParser.RULE_willSet_didSet_block = 103;
CadenceParser.RULE_willSet_clause = 104;
CadenceParser.RULE_didSet_clause = 105;
CadenceParser.RULE_typealias_declaration = 106;
CadenceParser.RULE_typealias_name = 107;
CadenceParser.RULE_typealias_assignment = 108;
CadenceParser.RULE_enum_declaration = 109;
CadenceParser.RULE_union_style_enum = 110;
CadenceParser.RULE_union_style_enum_members = 111;
CadenceParser.RULE_union_style_enum_member = 112;
CadenceParser.RULE_union_style_enum_case_clause = 113;
CadenceParser.RULE_union_style_enum_case_list = 114;
CadenceParser.RULE_union_style_enum_case = 115;
CadenceParser.RULE_enum_name = 116;
CadenceParser.RULE_enum_case_name = 117;
CadenceParser.RULE_raw_value_style_enum = 118;
CadenceParser.RULE_raw_value_style_enum_members = 119;
CadenceParser.RULE_raw_value_style_enum_member = 120;
CadenceParser.RULE_raw_value_style_enum_case_clause = 121;
CadenceParser.RULE_raw_value_style_enum_case_list = 122;
CadenceParser.RULE_raw_value_style_enum_case = 123;
CadenceParser.RULE_raw_value_assignment = 124;
CadenceParser.RULE_raw_value_literal = 125;
CadenceParser.RULE_struct_declaration = 126;
CadenceParser.RULE_struct_name = 127;
CadenceParser.RULE_struct_body = 128;
CadenceParser.RULE_struct_members = 129;
CadenceParser.RULE_struct_member = 130;
CadenceParser.RULE_class_declaration = 131;
CadenceParser.RULE_class_name = 132;
CadenceParser.RULE_class_body = 133;
CadenceParser.RULE_class_members = 134;
CadenceParser.RULE_class_member = 135;
CadenceParser.RULE_protocol_declaration = 136;
CadenceParser.RULE_protocol_name = 137;
CadenceParser.RULE_protocol_body = 138;
CadenceParser.RULE_protocol_members = 139;
CadenceParser.RULE_protocol_member = 140;
CadenceParser.RULE_protocol_member_declaration = 141;
CadenceParser.RULE_protocol_property_declaration = 142;
CadenceParser.RULE_protocol_method_declaration = 143;
CadenceParser.RULE_protocol_initializer_declaration = 144;
CadenceParser.RULE_protocol_subscript_declaration = 145;
CadenceParser.RULE_protocol_associated_type_declaration = 146;
CadenceParser.RULE_deinitializer_declaration = 147;
CadenceParser.RULE_extension_declaration = 148;
CadenceParser.RULE_extension_body = 149;
CadenceParser.RULE_extension_members = 150;
CadenceParser.RULE_extension_member = 151;
CadenceParser.RULE_subscript_declaration = 152;
CadenceParser.RULE_subscript_head = 153;
CadenceParser.RULE_subscript_result = 154;
CadenceParser.RULE_operator_declaration = 155;
CadenceParser.RULE_prefix_operator_declaration = 156;
CadenceParser.RULE_postfix_operator_declaration = 157;
CadenceParser.RULE_infix_operator_declaration = 158;
CadenceParser.RULE_infix_operator_group = 159;
CadenceParser.RULE_precedence_group_declaration = 160;
CadenceParser.RULE_precedence_group_attributes = 161;
CadenceParser.RULE_precedence_group_attribute = 162;
CadenceParser.RULE_precedence_group_relation = 163;
CadenceParser.RULE_precedence_group_assignment = 164;
CadenceParser.RULE_precedence_group_associativity = 165;
CadenceParser.RULE_precedence_group_names = 166;
CadenceParser.RULE_precedence_group_name = 167;
CadenceParser.RULE_declaration_modifier = 168;
CadenceParser.RULE_declaration_modifiers = 169;
CadenceParser.RULE_mutation_modifier = 170;
CadenceParser.RULE_pattern = 171;
CadenceParser.RULE_wildcard_pattern = 172;
CadenceParser.RULE_identifier_pattern = 173;
CadenceParser.RULE_value_binding_pattern = 174;
CadenceParser.RULE_tuple_pattern = 175;
CadenceParser.RULE_tuple_pattern_element_list = 176;
CadenceParser.RULE_tuple_pattern_element = 177;
CadenceParser.RULE_enum_case_pattern = 178;
CadenceParser.RULE_optional_pattern = 179;
CadenceParser.RULE_expression_pattern = 180;
CadenceParser.RULE_balanced_tokens = 181;
CadenceParser.RULE_balanced_token = 182;
CadenceParser.RULE_balanced_token_punctuation = 183;
CadenceParser.RULE_expression = 184;
CadenceParser.RULE_expression_list = 185;
CadenceParser.RULE_prefix_expression = 186;
CadenceParser.RULE_try_operator = 187;
CadenceParser.RULE_binary_expression = 188;
CadenceParser.RULE_binary_expressions = 189;
CadenceParser.RULE_conditional_operator = 190;
CadenceParser.RULE_type_casting_operator = 191;
CadenceParser.RULE_primary_expression = 192;
CadenceParser.RULE_self_expression = 193;
CadenceParser.RULE_superclass_expression = 194;
CadenceParser.RULE_closure_expression = 195;
CadenceParser.RULE_closure_signature = 196;
CadenceParser.RULE_closure_parameter_clause = 197;
CadenceParser.RULE_closure_parameter_list = 198;
CadenceParser.RULE_closure_parameter = 199;
CadenceParser.RULE_capture_list = 200;
CadenceParser.RULE_capture_list_items = 201;
CadenceParser.RULE_capture_list_item = 202;
CadenceParser.RULE_capture_specifier = 203;
CadenceParser.RULE_implicit_member_expression = 204;
CadenceParser.RULE_parenthesized_operator = 205;
CadenceParser.RULE_parenthesized_expression = 206;
CadenceParser.RULE_tuple_expression = 207;
CadenceParser.RULE_tuple_element_list = 208;
CadenceParser.RULE_tuple_element = 209;
CadenceParser.RULE_wildcard_expression = 210;
CadenceParser.RULE_key_path_expression = 211;
CadenceParser.RULE_key_path_components = 212;
CadenceParser.RULE_key_path_component = 213;
CadenceParser.RULE_key_path_postfixes = 214;
CadenceParser.RULE_key_path_postfix = 215;
CadenceParser.RULE_selector_expression = 216;
CadenceParser.RULE_key_path_string_expression = 217;
CadenceParser.RULE_postfix_expression = 218;
CadenceParser.RULE_function_call_suffix = 219;
CadenceParser.RULE_initializer_suffix = 220;
CadenceParser.RULE_explicit_member_suffix = 221;
CadenceParser.RULE_postfix_self_suffix = 222;
CadenceParser.RULE_subscript_suffix = 223;
CadenceParser.RULE_forced_value_suffix = 224;
CadenceParser.RULE_optional_chaining_suffix = 225;
CadenceParser.RULE_function_call_argument_clause = 226;
CadenceParser.RULE_function_call_argument_list = 227;
CadenceParser.RULE_function_call_argument = 228;
CadenceParser.RULE_trailing_closures = 229;
CadenceParser.RULE_labeled_trailing_closures = 230;
CadenceParser.RULE_labeled_trailing_closure = 231;
CadenceParser.RULE_argument_names = 232;
CadenceParser.RULE_argument_name = 233;
CadenceParser.RULE_type = 234;
CadenceParser.RULE_type_annotation = 235;
CadenceParser.RULE_type_identifier = 236;
CadenceParser.RULE_type_name = 237;
CadenceParser.RULE_tuple_type = 238;
CadenceParser.RULE_tuple_type_element_list = 239;
CadenceParser.RULE_tuple_type_element = 240;
CadenceParser.RULE_element_name = 241;
CadenceParser.RULE_function_type = 242;
CadenceParser.RULE_function_type_argument_clause = 243;
CadenceParser.RULE_function_type_argument_list = 244;
CadenceParser.RULE_function_type_argument = 245;
CadenceParser.RULE_argument_label = 246;
CadenceParser.RULE_array_type = 247;
CadenceParser.RULE_dictionary_type = 248;
CadenceParser.RULE_protocol_composition_type = 249;
CadenceParser.RULE_trailing_composition_and = 250;
CadenceParser.RULE_opaque_type = 251;
CadenceParser.RULE_any_type = 252;
CadenceParser.RULE_self_type = 253;
CadenceParser.RULE_type_inheritance_clause = 254;
CadenceParser.RULE_type_inheritance_list = 255;
CadenceParser.RULE_identifier = 256;
CadenceParser.RULE_identifier_list = 257;
CadenceParser.RULE_keyword = 258;
CadenceParser.RULE_negate_prefix_operator = 259;
CadenceParser.RULE_compilation_condition_AND = 260;
CadenceParser.RULE_compilation_condition_OR = 261;
CadenceParser.RULE_compilation_condition_GE = 262;
CadenceParser.RULE_compilation_condition_L = 263;
CadenceParser.RULE_arrow_operator = 264;
CadenceParser.RULE_range_operator = 265;
CadenceParser.RULE_same_type_equals = 266;
CadenceParser.RULE_binary_operator = 267;
CadenceParser.RULE_prefix_operator = 268;
CadenceParser.RULE_postfix_operator = 269;
CadenceParser.RULE_operator = 270;
CadenceParser.RULE_operator_head = 271;
CadenceParser.RULE_operator_character = 272;
CadenceParser.RULE_operator_characters = 273;
CadenceParser.RULE_dot_operator_head = 274;
CadenceParser.RULE_dot_operator_character = 275;
CadenceParser.RULE_dot_operator_characters = 276;
CadenceParser.RULE_literal = 277;
CadenceParser.RULE_numeric_literal = 278;
CadenceParser.RULE_boolean_literal = 279;
CadenceParser.RULE_nil_literal = 280;
CadenceParser.RULE_integer_literal = 281;
CadenceParser.RULE_string_literal = 282;
CadenceParser.RULE_extended_string_literal = 283;
CadenceParser.RULE_static_string_literal = 284;
CadenceParser.RULE_interpolated_string_literal = 285;


function Top_levelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_top_level;
    return this;
}

Top_levelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Top_levelContext.prototype.constructor = Top_levelContext;

Top_levelContext.prototype.EOF = function() {
    return this.getToken(CadenceParser.EOF, 0);
};

Top_levelContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

Top_levelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTop_level(this);
	}
};

Top_levelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTop_level(this);
	}
};




CadenceParser.Top_levelContext = Top_levelContext;

CadenceParser.prototype.top_level = function() {

    var localctx = new Top_levelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CadenceParser.RULE_top_level);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FALLTHROUGH) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN) | (1 << CadenceParser.IF) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.GET - 32)) | (1 << (CadenceParser.SET - 32)) | (1 << (CadenceParser.WILL_SET - 32)) | (1 << (CadenceParser.DID_SET - 32)) | (1 << (CadenceParser.REPEAT - 32)) | (1 << (CadenceParser.SWITCH - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.RETURN - 32)) | (1 << (CadenceParser.THROW - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.LEFT - 32)) | (1 << (CadenceParser.RIGHT - 32)) | (1 << (CadenceParser.NONE - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.HIGHER_THAN - 32)) | (1 << (CadenceParser.LOWER_THAN - 32)) | (1 << (CadenceParser.ASSIGNMENT - 32)) | (1 << (CadenceParser.ASSOCIATIVITY - 32)) | (1 << (CadenceParser.POSTFIX - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.OS - 64)) | (1 << (CadenceParser.ARCH - 64)) | (1 << (CadenceParser.SWIFT - 64)) | (1 << (CadenceParser.COMPILER - 64)) | (1 << (CadenceParser.CAN_IMPORT - 64)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.SAFE - 64)) | (1 << (CadenceParser.UNSAFE - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)) | (1 << (CadenceParser.SUPER - 64)) | (1 << (CadenceParser.FALSE - 64)) | (1 << (CadenceParser.RED - 64)) | (1 << (CadenceParser.BLUE - 64)) | (1 << (CadenceParser.GREEN - 64)) | (1 << (CadenceParser.RESOURCE_NAME - 64)) | (1 << (CadenceParser.TRUE - 64)) | (1 << (CadenceParser.NIL - 64)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CadenceParser.SOME - 97)) | (1 << (CadenceParser.TYPE - 97)) | (1 << (CadenceParser.PRECEDENCE - 97)) | (1 << (CadenceParser.SELF - 97)) | (1 << (CadenceParser.SELF_BIG - 97)) | (1 << (CadenceParser.MAC_OS - 97)) | (1 << (CadenceParser.I_OS - 97)) | (1 << (CadenceParser.OSX - 97)) | (1 << (CadenceParser.WATCH_OS - 97)) | (1 << (CadenceParser.TV_OS - 97)) | (1 << (CadenceParser.LINUX - 97)) | (1 << (CadenceParser.WINDOWS - 97)) | (1 << (CadenceParser.I386 - 97)) | (1 << (CadenceParser.X86_64 - 97)) | (1 << (CadenceParser.ARM - 97)) | (1 << (CadenceParser.ARM64 - 97)) | (1 << (CadenceParser.SIMULATOR - 97)) | (1 << (CadenceParser.MAC_CATALYST - 97)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.FILE - 97)) | (1 << (CadenceParser.LINE - 97)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CadenceParser.HASH_SELECTOR - 135)) | (1 << (CadenceParser.HASH_KEYPATH - 135)) | (1 << (CadenceParser.GETTER - 135)) | (1 << (CadenceParser.SETTER - 135)) | (1 << (CadenceParser.Identifier - 135)) | (1 << (CadenceParser.DOT - 135)) | (1 << (CadenceParser.LCURLY - 135)) | (1 << (CadenceParser.LPAREN - 135)) | (1 << (CadenceParser.LBRACK - 135)) | (1 << (CadenceParser.LT - 135)) | (1 << (CadenceParser.GT - 135)) | (1 << (CadenceParser.UNDERSCORE - 135)) | (1 << (CadenceParser.BANG - 135)) | (1 << (CadenceParser.QUESTION - 135)) | (1 << (CadenceParser.AND - 135)) | (1 << (CadenceParser.SUB - 135)) | (1 << (CadenceParser.EQUAL - 135)) | (1 << (CadenceParser.OR - 135)) | (1 << (CadenceParser.DIV - 135)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CadenceParser.ADD - 167)) | (1 << (CadenceParser.MUL - 167)) | (1 << (CadenceParser.MOD - 167)) | (1 << (CadenceParser.CARET - 167)) | (1 << (CadenceParser.TILDE - 167)) | (1 << (CadenceParser.BACKTICK - 167)) | (1 << (CadenceParser.BACKSLASH - 167)) | (1 << (CadenceParser.Operator_head_other - 167)) | (1 << (CadenceParser.Binary_literal - 167)) | (1 << (CadenceParser.Octal_literal - 167)) | (1 << (CadenceParser.Decimal_digits - 167)) | (1 << (CadenceParser.Decimal_literal - 167)) | (1 << (CadenceParser.Hexadecimal_literal - 167)) | (1 << (CadenceParser.Floating_point_literal - 167)) | (1 << (CadenceParser.Multi_line_extended_string_open - 167)) | (1 << (CadenceParser.Single_line_extended_string_open - 167)) | (1 << (CadenceParser.Multi_line_string_open - 167)) | (1 << (CadenceParser.Single_line_string_open - 167)))) !== 0)) {
            this.state = 572;
            this.statements();
        }

        this.state = 575;
        this.match(CadenceParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Loop_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_loop_statement;
    return this;
}

Loop_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Loop_statementContext.prototype.constructor = Loop_statementContext;

Loop_statementContext.prototype.for_in_statement = function() {
    return this.getTypedRuleContext(For_in_statementContext,0);
};

Loop_statementContext.prototype.while_statement = function() {
    return this.getTypedRuleContext(While_statementContext,0);
};

Loop_statementContext.prototype.repeat_while_statement = function() {
    return this.getTypedRuleContext(Repeat_while_statementContext,0);
};

Loop_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLoop_statement(this);
	}
};

Loop_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLoop_statement(this);
	}
};




CadenceParser.Loop_statementContext = Loop_statementContext;

CadenceParser.prototype.loop_statement = function() {

    var localctx = new Loop_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CadenceParser.RULE_loop_statement);
    try {
        this.state = 580;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.FOR:
            this.enterOuterAlt(localctx, 1);
            this.state = 577;
            this.for_in_statement();
            break;
        case CadenceParser.WHILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 578;
            this.while_statement();
            break;
        case CadenceParser.REPEAT:
            this.enterOuterAlt(localctx, 3);
            this.state = 579;
            this.repeat_while_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function For_in_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_for_in_statement;
    return this;
}

For_in_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_in_statementContext.prototype.constructor = For_in_statementContext;

For_in_statementContext.prototype.FOR = function() {
    return this.getToken(CadenceParser.FOR, 0);
};

For_in_statementContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

For_in_statementContext.prototype.IN = function() {
    return this.getToken(CadenceParser.IN, 0);
};

For_in_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

For_in_statementContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

For_in_statementContext.prototype.CASE = function() {
    return this.getToken(CadenceParser.CASE, 0);
};

For_in_statementContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

For_in_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFor_in_statement(this);
	}
};

For_in_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFor_in_statement(this);
	}
};




CadenceParser.For_in_statementContext = For_in_statementContext;

CadenceParser.prototype.for_in_statement = function() {

    var localctx = new For_in_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CadenceParser.RULE_for_in_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        this.match(CadenceParser.FOR);
        this.state = 584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.CASE) {
            this.state = 583;
            this.match(CadenceParser.CASE);
        }

        this.state = 586;
        this.pattern(0);
        this.state = 587;
        this.match(CadenceParser.IN);
        this.state = 588;
        this.expression();
        this.state = 590;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.WHERE) {
            this.state = 589;
            this.where_clause();
        }

        this.state = 592;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function While_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_while_statement;
    return this;
}

While_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statementContext.prototype.constructor = While_statementContext;

While_statementContext.prototype.WHILE = function() {
    return this.getToken(CadenceParser.WHILE, 0);
};

While_statementContext.prototype.condition_list = function() {
    return this.getTypedRuleContext(Condition_listContext,0);
};

While_statementContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

While_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterWhile_statement(this);
	}
};

While_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitWhile_statement(this);
	}
};




CadenceParser.While_statementContext = While_statementContext;

CadenceParser.prototype.while_statement = function() {

    var localctx = new While_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CadenceParser.RULE_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.match(CadenceParser.WHILE);
        this.state = 595;
        this.condition_list();
        this.state = 596;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Condition_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_condition_list;
    return this;
}

Condition_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Condition_listContext.prototype.constructor = Condition_listContext;

Condition_listContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

Condition_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Condition_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCondition_list(this);
	}
};

Condition_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCondition_list(this);
	}
};




CadenceParser.Condition_listContext = Condition_listContext;

CadenceParser.prototype.condition_list = function() {

    var localctx = new Condition_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CadenceParser.RULE_condition_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.condition();
        this.state = 603;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 599;
            this.match(CadenceParser.COMMA);
            this.state = 600;
            this.condition();
            this.state = 605;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_condition;
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionContext.prototype.case_condition = function() {
    return this.getTypedRuleContext(Case_conditionContext,0);
};

ConditionContext.prototype.optional_binding_condition = function() {
    return this.getTypedRuleContext(Optional_binding_conditionContext,0);
};

ConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCondition(this);
	}
};

ConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCondition(this);
	}
};




CadenceParser.ConditionContext = ConditionContext;

CadenceParser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CadenceParser.RULE_condition);
    try {
        this.state = 609;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.SUPER:
        case CadenceParser.FALSE:
        case CadenceParser.TRUE:
        case CadenceParser.NIL:
        case CadenceParser.SELF:
        case CadenceParser.HASH_SELECTOR:
        case CadenceParser.HASH_KEYPATH:
        case CadenceParser.DOT:
        case CadenceParser.LCURLY:
        case CadenceParser.LPAREN:
        case CadenceParser.LBRACK:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.UNDERSCORE:
        case CadenceParser.BANG:
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.BACKSLASH:
        case CadenceParser.Operator_head_other:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
        case CadenceParser.Multi_line_extended_string_open:
        case CadenceParser.Single_line_extended_string_open:
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.enterOuterAlt(localctx, 1);
            this.state = 606;
            this.expression();
            break;
        case CadenceParser.CASE:
            this.enterOuterAlt(localctx, 2);
            this.state = 607;
            this.case_condition();
            break;
        case CadenceParser.LET:
        case CadenceParser.VAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 608;
            this.optional_binding_condition();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Case_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_case_condition;
    return this;
}

Case_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_conditionContext.prototype.constructor = Case_conditionContext;

Case_conditionContext.prototype.CASE = function() {
    return this.getToken(CadenceParser.CASE, 0);
};

Case_conditionContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

Case_conditionContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

Case_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCase_condition(this);
	}
};

Case_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCase_condition(this);
	}
};




CadenceParser.Case_conditionContext = Case_conditionContext;

CadenceParser.prototype.case_condition = function() {

    var localctx = new Case_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CadenceParser.RULE_case_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 611;
        this.match(CadenceParser.CASE);
        this.state = 612;
        this.pattern(0);
        this.state = 613;
        this.initializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Optional_binding_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_optional_binding_condition;
    return this;
}

Optional_binding_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Optional_binding_conditionContext.prototype.constructor = Optional_binding_conditionContext;

Optional_binding_conditionContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

Optional_binding_conditionContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

Optional_binding_conditionContext.prototype.LET = function() {
    return this.getToken(CadenceParser.LET, 0);
};

Optional_binding_conditionContext.prototype.VAR = function() {
    return this.getToken(CadenceParser.VAR, 0);
};

Optional_binding_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOptional_binding_condition(this);
	}
};

Optional_binding_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOptional_binding_condition(this);
	}
};




CadenceParser.Optional_binding_conditionContext = Optional_binding_conditionContext;

CadenceParser.prototype.optional_binding_condition = function() {

    var localctx = new Optional_binding_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CadenceParser.RULE_optional_binding_condition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 615;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.LET || _la===CadenceParser.VAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 616;
        this.pattern(0);
        this.state = 617;
        this.initializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Repeat_while_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_repeat_while_statement;
    return this;
}

Repeat_while_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Repeat_while_statementContext.prototype.constructor = Repeat_while_statementContext;

Repeat_while_statementContext.prototype.REPEAT = function() {
    return this.getToken(CadenceParser.REPEAT, 0);
};

Repeat_while_statementContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Repeat_while_statementContext.prototype.WHILE = function() {
    return this.getToken(CadenceParser.WHILE, 0);
};

Repeat_while_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Repeat_while_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRepeat_while_statement(this);
	}
};

Repeat_while_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRepeat_while_statement(this);
	}
};




CadenceParser.Repeat_while_statementContext = Repeat_while_statementContext;

CadenceParser.prototype.repeat_while_statement = function() {

    var localctx = new Repeat_while_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CadenceParser.RULE_repeat_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 619;
        this.match(CadenceParser.REPEAT);
        this.state = 620;
        this.code_block();
        this.state = 621;
        this.match(CadenceParser.WHILE);
        this.state = 622;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Branch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_branch_statement;
    return this;
}

Branch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Branch_statementContext.prototype.constructor = Branch_statementContext;

Branch_statementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};

Branch_statementContext.prototype.guard_statement = function() {
    return this.getTypedRuleContext(Guard_statementContext,0);
};

Branch_statementContext.prototype.switch_statement = function() {
    return this.getTypedRuleContext(Switch_statementContext,0);
};

Branch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBranch_statement(this);
	}
};

Branch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBranch_statement(this);
	}
};




CadenceParser.Branch_statementContext = Branch_statementContext;

CadenceParser.prototype.branch_statement = function() {

    var localctx = new Branch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CadenceParser.RULE_branch_statement);
    try {
        this.state = 627;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 624;
            this.if_statement();
            break;
        case CadenceParser.GUARD:
            this.enterOuterAlt(localctx, 2);
            this.state = 625;
            this.guard_statement();
            break;
        case CadenceParser.SWITCH:
            this.enterOuterAlt(localctx, 3);
            this.state = 626;
            this.switch_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_if_statement;
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function() {
    return this.getToken(CadenceParser.IF, 0);
};

If_statementContext.prototype.condition_list = function() {
    return this.getTypedRuleContext(Condition_listContext,0);
};

If_statementContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

If_statementContext.prototype.else_clause = function() {
    return this.getTypedRuleContext(Else_clauseContext,0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitIf_statement(this);
	}
};




CadenceParser.If_statementContext = If_statementContext;

CadenceParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CadenceParser.RULE_if_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 629;
        this.match(CadenceParser.IF);
        this.state = 630;
        this.condition_list();
        this.state = 631;
        this.code_block();
        this.state = 633;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.ELSE) {
            this.state = 632;
            this.else_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Else_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_else_clause;
    return this;
}

Else_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_clauseContext.prototype.constructor = Else_clauseContext;

Else_clauseContext.prototype.ELSE = function() {
    return this.getToken(CadenceParser.ELSE, 0);
};

Else_clauseContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Else_clauseContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};

Else_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterElse_clause(this);
	}
};

Else_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitElse_clause(this);
	}
};




CadenceParser.Else_clauseContext = Else_clauseContext;

CadenceParser.prototype.else_clause = function() {

    var localctx = new Else_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CadenceParser.RULE_else_clause);
    try {
        this.state = 639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 635;
            this.match(CadenceParser.ELSE);
            this.state = 636;
            this.code_block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 637;
            this.match(CadenceParser.ELSE);
            this.state = 638;
            this.if_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Guard_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_guard_statement;
    return this;
}

Guard_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Guard_statementContext.prototype.constructor = Guard_statementContext;

Guard_statementContext.prototype.GUARD = function() {
    return this.getToken(CadenceParser.GUARD, 0);
};

Guard_statementContext.prototype.condition_list = function() {
    return this.getTypedRuleContext(Condition_listContext,0);
};

Guard_statementContext.prototype.ELSE = function() {
    return this.getToken(CadenceParser.ELSE, 0);
};

Guard_statementContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Guard_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGuard_statement(this);
	}
};

Guard_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGuard_statement(this);
	}
};




CadenceParser.Guard_statementContext = Guard_statementContext;

CadenceParser.prototype.guard_statement = function() {

    var localctx = new Guard_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CadenceParser.RULE_guard_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this.match(CadenceParser.GUARD);
        this.state = 642;
        this.condition_list();
        this.state = 643;
        this.match(CadenceParser.ELSE);
        this.state = 644;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Switch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_switch_statement;
    return this;
}

Switch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_statementContext.prototype.constructor = Switch_statementContext;

Switch_statementContext.prototype.SWITCH = function() {
    return this.getToken(CadenceParser.SWITCH, 0);
};

Switch_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_statementContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Switch_statementContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Switch_statementContext.prototype.switch_cases = function() {
    return this.getTypedRuleContext(Switch_casesContext,0);
};

Switch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSwitch_statement(this);
	}
};

Switch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSwitch_statement(this);
	}
};




CadenceParser.Switch_statementContext = Switch_statementContext;

CadenceParser.prototype.switch_statement = function() {

    var localctx = new Switch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CadenceParser.RULE_switch_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646;
        this.match(CadenceParser.SWITCH);
        this.state = 647;
        this.expression();
        this.state = 648;
        this.match(CadenceParser.LCURLY);
        this.state = 650;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.CASE || _la===CadenceParser.DEFAULT) {
            this.state = 649;
            this.switch_cases();
        }

        this.state = 652;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Switch_casesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_switch_cases;
    return this;
}

Switch_casesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_casesContext.prototype.constructor = Switch_casesContext;

Switch_casesContext.prototype.switch_case = function() {
    return this.getTypedRuleContext(Switch_caseContext,0);
};

Switch_casesContext.prototype.switch_cases = function() {
    return this.getTypedRuleContext(Switch_casesContext,0);
};

Switch_casesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSwitch_cases(this);
	}
};

Switch_casesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSwitch_cases(this);
	}
};




CadenceParser.Switch_casesContext = Switch_casesContext;

CadenceParser.prototype.switch_cases = function() {

    var localctx = new Switch_casesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CadenceParser.RULE_switch_cases);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        this.switch_case();
        this.state = 656;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.CASE || _la===CadenceParser.DEFAULT) {
            this.state = 655;
            this.switch_cases();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Switch_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_switch_case;
    return this;
}

Switch_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_caseContext.prototype.constructor = Switch_caseContext;

Switch_caseContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

Switch_caseContext.prototype.case_label = function() {
    return this.getTypedRuleContext(Case_labelContext,0);
};

Switch_caseContext.prototype.default_label = function() {
    return this.getTypedRuleContext(Default_labelContext,0);
};

Switch_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSwitch_case(this);
	}
};

Switch_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSwitch_case(this);
	}
};




CadenceParser.Switch_caseContext = Switch_caseContext;

CadenceParser.prototype.switch_case = function() {

    var localctx = new Switch_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CadenceParser.RULE_switch_case);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 660;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.CASE:
            this.state = 658;
            this.case_label();
            break;
        case CadenceParser.DEFAULT:
            this.state = 659;
            this.default_label();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 662;
        this.statements();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Case_labelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_case_label;
    return this;
}

Case_labelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_labelContext.prototype.constructor = Case_labelContext;

Case_labelContext.prototype.CASE = function() {
    return this.getToken(CadenceParser.CASE, 0);
};

Case_labelContext.prototype.case_item_list = function() {
    return this.getTypedRuleContext(Case_item_listContext,0);
};

Case_labelContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Case_labelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCase_label(this);
	}
};

Case_labelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCase_label(this);
	}
};




CadenceParser.Case_labelContext = Case_labelContext;

CadenceParser.prototype.case_label = function() {

    var localctx = new Case_labelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CadenceParser.RULE_case_label);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664;
        this.match(CadenceParser.CASE);
        this.state = 665;
        this.case_item_list();
        this.state = 666;
        this.match(CadenceParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Case_item_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_case_item_list;
    return this;
}

Case_item_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_item_listContext.prototype.constructor = Case_item_listContext;

Case_item_listContext.prototype.pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PatternContext);
    } else {
        return this.getTypedRuleContext(PatternContext,i);
    }
};

Case_item_listContext.prototype.where_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Where_clauseContext);
    } else {
        return this.getTypedRuleContext(Where_clauseContext,i);
    }
};

Case_item_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Case_item_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCase_item_list(this);
	}
};

Case_item_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCase_item_list(this);
	}
};




CadenceParser.Case_item_listContext = Case_item_listContext;

CadenceParser.prototype.case_item_list = function() {

    var localctx = new Case_item_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CadenceParser.RULE_case_item_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        this.pattern(0);
        this.state = 670;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.WHERE) {
            this.state = 669;
            this.where_clause();
        }

        this.state = 679;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 672;
            this.match(CadenceParser.COMMA);
            this.state = 673;
            this.pattern(0);
            this.state = 675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.WHERE) {
                this.state = 674;
                this.where_clause();
            }

            this.state = 681;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Default_labelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_default_label;
    return this;
}

Default_labelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Default_labelContext.prototype.constructor = Default_labelContext;

Default_labelContext.prototype.DEFAULT = function() {
    return this.getToken(CadenceParser.DEFAULT, 0);
};

Default_labelContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Default_labelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDefault_label(this);
	}
};

Default_labelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDefault_label(this);
	}
};




CadenceParser.Default_labelContext = Default_labelContext;

CadenceParser.prototype.default_label = function() {

    var localctx = new Default_labelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CadenceParser.RULE_default_label);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 682;
        this.match(CadenceParser.DEFAULT);
        this.state = 683;
        this.match(CadenceParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Where_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_where_clause;
    return this;
}

Where_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_clauseContext.prototype.constructor = Where_clauseContext;

Where_clauseContext.prototype.WHERE = function() {
    return this.getToken(CadenceParser.WHERE, 0);
};

Where_clauseContext.prototype.where_expression = function() {
    return this.getTypedRuleContext(Where_expressionContext,0);
};

Where_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterWhere_clause(this);
	}
};

Where_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitWhere_clause(this);
	}
};




CadenceParser.Where_clauseContext = Where_clauseContext;

CadenceParser.prototype.where_clause = function() {

    var localctx = new Where_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CadenceParser.RULE_where_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.match(CadenceParser.WHERE);
        this.state = 686;
        this.where_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Where_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_where_expression;
    return this;
}

Where_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_expressionContext.prototype.constructor = Where_expressionContext;

Where_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Where_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterWhere_expression(this);
	}
};

Where_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitWhere_expression(this);
	}
};




CadenceParser.Where_expressionContext = Where_expressionContext;

CadenceParser.prototype.where_expression = function() {

    var localctx = new Where_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CadenceParser.RULE_where_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 688;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Labeled_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_labeled_statement;
    return this;
}

Labeled_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Labeled_statementContext.prototype.constructor = Labeled_statementContext;

Labeled_statementContext.prototype.statement_label = function() {
    return this.getTypedRuleContext(Statement_labelContext,0);
};

Labeled_statementContext.prototype.loop_statement = function() {
    return this.getTypedRuleContext(Loop_statementContext,0);
};

Labeled_statementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};

Labeled_statementContext.prototype.switch_statement = function() {
    return this.getTypedRuleContext(Switch_statementContext,0);
};

Labeled_statementContext.prototype.do_statement = function() {
    return this.getTypedRuleContext(Do_statementContext,0);
};

Labeled_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLabeled_statement(this);
	}
};

Labeled_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLabeled_statement(this);
	}
};




CadenceParser.Labeled_statementContext = Labeled_statementContext;

CadenceParser.prototype.labeled_statement = function() {

    var localctx = new Labeled_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CadenceParser.RULE_labeled_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 690;
        this.statement_label();
        this.state = 695;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.FOR:
        case CadenceParser.WHILE:
        case CadenceParser.REPEAT:
            this.state = 691;
            this.loop_statement();
            break;
        case CadenceParser.IF:
            this.state = 692;
            this.if_statement();
            break;
        case CadenceParser.SWITCH:
            this.state = 693;
            this.switch_statement();
            break;
        case CadenceParser.DO:
            this.state = 694;
            this.do_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Statement_labelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_statement_label;
    return this;
}

Statement_labelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Statement_labelContext.prototype.constructor = Statement_labelContext;

Statement_labelContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Statement_labelContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Statement_labelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStatement_label(this);
	}
};

Statement_labelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStatement_label(this);
	}
};




CadenceParser.Statement_labelContext = Statement_labelContext;

CadenceParser.prototype.statement_label = function() {

    var localctx = new Statement_labelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CadenceParser.RULE_statement_label);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 697;
        this.label_name();
        this.state = 698;
        this.match(CadenceParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Label_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_label_name;
    return this;
}

Label_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_nameContext.prototype.constructor = Label_nameContext;

Label_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Label_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLabel_name(this);
	}
};

Label_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLabel_name(this);
	}
};




CadenceParser.Label_nameContext = Label_nameContext;

CadenceParser.prototype.label_name = function() {

    var localctx = new Label_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CadenceParser.RULE_label_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 700;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Control_transfer_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_control_transfer_statement;
    return this;
}

Control_transfer_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Control_transfer_statementContext.prototype.constructor = Control_transfer_statementContext;

Control_transfer_statementContext.prototype.break_statement = function() {
    return this.getTypedRuleContext(Break_statementContext,0);
};

Control_transfer_statementContext.prototype.continue_statement = function() {
    return this.getTypedRuleContext(Continue_statementContext,0);
};

Control_transfer_statementContext.prototype.fallthrough_statement = function() {
    return this.getTypedRuleContext(Fallthrough_statementContext,0);
};

Control_transfer_statementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};

Control_transfer_statementContext.prototype.throw_statement = function() {
    return this.getTypedRuleContext(Throw_statementContext,0);
};

Control_transfer_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterControl_transfer_statement(this);
	}
};

Control_transfer_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitControl_transfer_statement(this);
	}
};




CadenceParser.Control_transfer_statementContext = Control_transfer_statementContext;

CadenceParser.prototype.control_transfer_statement = function() {

    var localctx = new Control_transfer_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CadenceParser.RULE_control_transfer_statement);
    try {
        this.state = 707;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.BREAK:
            this.enterOuterAlt(localctx, 1);
            this.state = 702;
            this.break_statement();
            break;
        case CadenceParser.CONTINUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 703;
            this.continue_statement();
            break;
        case CadenceParser.FALLTHROUGH:
            this.enterOuterAlt(localctx, 3);
            this.state = 704;
            this.fallthrough_statement();
            break;
        case CadenceParser.RETURN:
            this.enterOuterAlt(localctx, 4);
            this.state = 705;
            this.return_statement();
            break;
        case CadenceParser.THROW:
            this.enterOuterAlt(localctx, 5);
            this.state = 706;
            this.throw_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Break_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_break_statement;
    return this;
}

Break_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_statementContext.prototype.constructor = Break_statementContext;

Break_statementContext.prototype.BREAK = function() {
    return this.getToken(CadenceParser.BREAK, 0);
};

Break_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Break_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBreak_statement(this);
	}
};

Break_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBreak_statement(this);
	}
};




CadenceParser.Break_statementContext = Break_statementContext;

CadenceParser.prototype.break_statement = function() {

    var localctx = new Break_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CadenceParser.RULE_break_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 709;
        this.match(CadenceParser.BREAK);
        this.state = 711;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 710;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Continue_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_continue_statement;
    return this;
}

Continue_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_statementContext.prototype.constructor = Continue_statementContext;

Continue_statementContext.prototype.CONTINUE = function() {
    return this.getToken(CadenceParser.CONTINUE, 0);
};

Continue_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Continue_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterContinue_statement(this);
	}
};

Continue_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitContinue_statement(this);
	}
};




CadenceParser.Continue_statementContext = Continue_statementContext;

CadenceParser.prototype.continue_statement = function() {

    var localctx = new Continue_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CadenceParser.RULE_continue_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.match(CadenceParser.CONTINUE);
        this.state = 715;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        if(la_===1) {
            this.state = 714;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Fallthrough_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_fallthrough_statement;
    return this;
}

Fallthrough_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fallthrough_statementContext.prototype.constructor = Fallthrough_statementContext;

Fallthrough_statementContext.prototype.FALLTHROUGH = function() {
    return this.getToken(CadenceParser.FALLTHROUGH, 0);
};

Fallthrough_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFallthrough_statement(this);
	}
};

Fallthrough_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFallthrough_statement(this);
	}
};




CadenceParser.Fallthrough_statementContext = Fallthrough_statementContext;

CadenceParser.prototype.fallthrough_statement = function() {

    var localctx = new Fallthrough_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CadenceParser.RULE_fallthrough_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 717;
        this.match(CadenceParser.FALLTHROUGH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_return_statement;
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(CadenceParser.RETURN, 0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitReturn_statement(this);
	}
};




CadenceParser.Return_statementContext = Return_statementContext;

CadenceParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CadenceParser.RULE_return_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this.match(CadenceParser.RETURN);
        this.state = 721;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 720;
            this.expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Throw_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_throw_statement;
    return this;
}

Throw_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Throw_statementContext.prototype.constructor = Throw_statementContext;

Throw_statementContext.prototype.THROW = function() {
    return this.getToken(CadenceParser.THROW, 0);
};

Throw_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Throw_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterThrow_statement(this);
	}
};

Throw_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitThrow_statement(this);
	}
};




CadenceParser.Throw_statementContext = Throw_statementContext;

CadenceParser.prototype.throw_statement = function() {

    var localctx = new Throw_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CadenceParser.RULE_throw_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 723;
        this.match(CadenceParser.THROW);
        this.state = 724;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Do_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_do_statement;
    return this;
}

Do_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Do_statementContext.prototype.constructor = Do_statementContext;

Do_statementContext.prototype.DO = function() {
    return this.getToken(CadenceParser.DO, 0);
};

Do_statementContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Do_statementContext.prototype.catch_clauses = function() {
    return this.getTypedRuleContext(Catch_clausesContext,0);
};

Do_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDo_statement(this);
	}
};

Do_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDo_statement(this);
	}
};




CadenceParser.Do_statementContext = Do_statementContext;

CadenceParser.prototype.do_statement = function() {

    var localctx = new Do_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CadenceParser.RULE_do_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 726;
        this.match(CadenceParser.DO);
        this.state = 727;
        this.code_block();
        this.state = 729;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        if(la_===1) {
            this.state = 728;
            this.catch_clauses();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Catch_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_catch_clauses;
    return this;
}

Catch_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_clausesContext.prototype.constructor = Catch_clausesContext;

Catch_clausesContext.prototype.catch_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Catch_clauseContext);
    } else {
        return this.getTypedRuleContext(Catch_clauseContext,i);
    }
};

Catch_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCatch_clauses(this);
	}
};

Catch_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCatch_clauses(this);
	}
};




CadenceParser.Catch_clausesContext = Catch_clausesContext;

CadenceParser.prototype.catch_clauses = function() {

    var localctx = new Catch_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CadenceParser.RULE_catch_clauses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 732; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 731;
        		this.catch_clause();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 734; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,21, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Catch_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_catch_clause;
    return this;
}

Catch_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_clauseContext.prototype.constructor = Catch_clauseContext;

Catch_clauseContext.prototype.CATCH = function() {
    return this.getToken(CadenceParser.CATCH, 0);
};

Catch_clauseContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Catch_clauseContext.prototype.catch_pattern_list = function() {
    return this.getTypedRuleContext(Catch_pattern_listContext,0);
};

Catch_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCatch_clause(this);
	}
};

Catch_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCatch_clause(this);
	}
};




CadenceParser.Catch_clauseContext = Catch_clauseContext;

CadenceParser.prototype.catch_clause = function() {

    var localctx = new Catch_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CadenceParser.RULE_catch_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 736;
        this.match(CadenceParser.CATCH);
        this.state = 738;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 737;
            this.catch_pattern_list();

        }
        this.state = 740;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Catch_pattern_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_catch_pattern_list;
    return this;
}

Catch_pattern_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_pattern_listContext.prototype.constructor = Catch_pattern_listContext;

Catch_pattern_listContext.prototype.catch_pattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Catch_patternContext);
    } else {
        return this.getTypedRuleContext(Catch_patternContext,i);
    }
};

Catch_pattern_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Catch_pattern_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCatch_pattern_list(this);
	}
};

Catch_pattern_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCatch_pattern_list(this);
	}
};




CadenceParser.Catch_pattern_listContext = Catch_pattern_listContext;

CadenceParser.prototype.catch_pattern_list = function() {

    var localctx = new Catch_pattern_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CadenceParser.RULE_catch_pattern_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 742;
        this.catch_pattern();
        this.state = 749;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 743;
                this.catch_pattern();
                this.state = 744;
                this.match(CadenceParser.COMMA);
                this.state = 745;
                this.catch_pattern(); 
            }
            this.state = 751;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Catch_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_catch_pattern;
    return this;
}

Catch_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Catch_patternContext.prototype.constructor = Catch_patternContext;

Catch_patternContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

Catch_patternContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Catch_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCatch_pattern(this);
	}
};

Catch_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCatch_pattern(this);
	}
};




CadenceParser.Catch_patternContext = Catch_patternContext;

CadenceParser.prototype.catch_pattern = function() {

    var localctx = new Catch_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CadenceParser.RULE_catch_pattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 752;
        this.pattern(0);
        this.state = 754;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 753;
            this.where_clause();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Module_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_module_name;
    return this;
}

Module_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_nameContext.prototype.constructor = Module_nameContext;

Module_nameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Module_nameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.DOT);
    } else {
        return this.getToken(CadenceParser.DOT, i);
    }
};


Module_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterModule_name(this);
	}
};

Module_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitModule_name(this);
	}
};




CadenceParser.Module_nameContext = Module_nameContext;

CadenceParser.prototype.module_name = function() {

    var localctx = new Module_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CadenceParser.RULE_module_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 756;
        this.identifier();
        this.state = 761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.DOT) {
            this.state = 757;
            this.match(CadenceParser.DOT);
            this.state = 758;
            this.identifier();
            this.state = 763;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnvironmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_environment;
    return this;
}

EnvironmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnvironmentContext.prototype.constructor = EnvironmentContext;

EnvironmentContext.prototype.SIMULATOR = function() {
    return this.getToken(CadenceParser.SIMULATOR, 0);
};

EnvironmentContext.prototype.MAC_CATALYST = function() {
    return this.getToken(CadenceParser.MAC_CATALYST, 0);
};

EnvironmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterEnvironment(this);
	}
};

EnvironmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitEnvironment(this);
	}
};




CadenceParser.EnvironmentContext = EnvironmentContext;

CadenceParser.prototype.environment = function() {

    var localctx = new EnvironmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CadenceParser.RULE_environment);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 764;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.SIMULATOR || _la===CadenceParser.MAC_CATALYST)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Line_control_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_line_control_statement;
    return this;
}

Line_control_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Line_control_statementContext.prototype.constructor = Line_control_statementContext;

Line_control_statementContext.prototype.SOURCE_LOCATION = function() {
    return this.getToken(CadenceParser.SOURCE_LOCATION, 0);
};

Line_control_statementContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Line_control_statementContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Line_control_statementContext.prototype.FILE = function() {
    return this.getToken(CadenceParser.FILE, 0);
};

Line_control_statementContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COLON);
    } else {
        return this.getToken(CadenceParser.COLON, i);
    }
};


Line_control_statementContext.prototype.file_name = function() {
    return this.getTypedRuleContext(File_nameContext,0);
};

Line_control_statementContext.prototype.COMMA = function() {
    return this.getToken(CadenceParser.COMMA, 0);
};

Line_control_statementContext.prototype.LINE = function() {
    return this.getToken(CadenceParser.LINE, 0);
};

Line_control_statementContext.prototype.line_number = function() {
    return this.getTypedRuleContext(Line_numberContext,0);
};

Line_control_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLine_control_statement(this);
	}
};

Line_control_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLine_control_statement(this);
	}
};




CadenceParser.Line_control_statementContext = Line_control_statementContext;

CadenceParser.prototype.line_control_statement = function() {

    var localctx = new Line_control_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CadenceParser.RULE_line_control_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 766;
        this.match(CadenceParser.SOURCE_LOCATION);
        this.state = 767;
        this.match(CadenceParser.LPAREN);
        this.state = 776;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.FILE) {
            this.state = 768;
            this.match(CadenceParser.FILE);
            this.state = 769;
            this.match(CadenceParser.COLON);
            this.state = 770;
            this.file_name();
            this.state = 771;
            this.match(CadenceParser.COMMA);
            this.state = 772;
            this.match(CadenceParser.LINE);
            this.state = 773;
            this.match(CadenceParser.COLON);
            this.state = 774;
            this.line_number();
        }

        this.state = 778;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Line_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_line_number;
    return this;
}

Line_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Line_numberContext.prototype.constructor = Line_numberContext;

Line_numberContext.prototype.Decimal_literal = function() {
    return this.getToken(CadenceParser.Decimal_literal, 0);
};

Line_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLine_number(this);
	}
};

Line_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLine_number(this);
	}
};




CadenceParser.Line_numberContext = Line_numberContext;

CadenceParser.prototype.line_number = function() {

    var localctx = new Line_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CadenceParser.RULE_line_number);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 780;
        this.match(CadenceParser.Decimal_literal);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function File_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_file_name;
    return this;
}

File_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_nameContext.prototype.constructor = File_nameContext;

File_nameContext.prototype.static_string_literal = function() {
    return this.getTypedRuleContext(Static_string_literalContext,0);
};

File_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFile_name(this);
	}
};

File_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFile_name(this);
	}
};




CadenceParser.File_nameContext = File_nameContext;

CadenceParser.prototype.file_name = function() {

    var localctx = new File_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CadenceParser.RULE_file_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 782;
        this.static_string_literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Diagnostic_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_diagnostic_statement;
    return this;
}

Diagnostic_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Diagnostic_statementContext.prototype.constructor = Diagnostic_statementContext;

Diagnostic_statementContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Diagnostic_statementContext.prototype.diagnostic_message = function() {
    return this.getTypedRuleContext(Diagnostic_messageContext,0);
};

Diagnostic_statementContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Diagnostic_statementContext.prototype.ERROR = function() {
    return this.getToken(CadenceParser.ERROR, 0);
};

Diagnostic_statementContext.prototype.WARNING = function() {
    return this.getToken(CadenceParser.WARNING, 0);
};

Diagnostic_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDiagnostic_statement(this);
	}
};

Diagnostic_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDiagnostic_statement(this);
	}
};




CadenceParser.Diagnostic_statementContext = Diagnostic_statementContext;

CadenceParser.prototype.diagnostic_statement = function() {

    var localctx = new Diagnostic_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CadenceParser.RULE_diagnostic_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 784;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.ERROR || _la===CadenceParser.WARNING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 785;
        this.match(CadenceParser.LPAREN);
        this.state = 786;
        this.diagnostic_message();
        this.state = 787;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Diagnostic_messageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_diagnostic_message;
    return this;
}

Diagnostic_messageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Diagnostic_messageContext.prototype.constructor = Diagnostic_messageContext;

Diagnostic_messageContext.prototype.static_string_literal = function() {
    return this.getTypedRuleContext(Static_string_literalContext,0);
};

Diagnostic_messageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDiagnostic_message(this);
	}
};

Diagnostic_messageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDiagnostic_message(this);
	}
};




CadenceParser.Diagnostic_messageContext = Diagnostic_messageContext;

CadenceParser.prototype.diagnostic_message = function() {

    var localctx = new Diagnostic_messageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CadenceParser.RULE_diagnostic_message);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 789;
        this.static_string_literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Platform_versionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_platform_version;
    return this;
}

Platform_versionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Platform_versionContext.prototype.constructor = Platform_versionContext;

Platform_versionContext.prototype.Decimal_literal = function() {
    return this.getToken(CadenceParser.Decimal_literal, 0);
};

Platform_versionContext.prototype.Decimal_digits = function() {
    return this.getToken(CadenceParser.Decimal_digits, 0);
};

Platform_versionContext.prototype.Floating_point_literal = function() {
    return this.getToken(CadenceParser.Floating_point_literal, 0);
};

Platform_versionContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Platform_versionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPlatform_version(this);
	}
};

Platform_versionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPlatform_version(this);
	}
};




CadenceParser.Platform_versionContext = Platform_versionContext;

CadenceParser.prototype.platform_version = function() {

    var localctx = new Platform_versionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CadenceParser.RULE_platform_version);
    var _la = 0; // Token type
    try {
        this.state = 798;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.Decimal_literal:
            this.enterOuterAlt(localctx, 1);
            this.state = 791;
            this.match(CadenceParser.Decimal_literal);
            break;
        case CadenceParser.Decimal_digits:
            this.enterOuterAlt(localctx, 2);
            this.state = 792;
            this.match(CadenceParser.Decimal_digits);
            break;
        case CadenceParser.Floating_point_literal:
            this.enterOuterAlt(localctx, 3);
            this.state = 793;
            this.match(CadenceParser.Floating_point_literal);
            this.state = 796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.DOT) {
                this.state = 794;
                this.match(CadenceParser.DOT);
                this.state = 795;
                this.match(CadenceParser.Decimal_digits);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Requirement_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_requirement_list;
    return this;
}

Requirement_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Requirement_listContext.prototype.constructor = Requirement_listContext;

Requirement_listContext.prototype.requirement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RequirementContext);
    } else {
        return this.getTypedRuleContext(RequirementContext,i);
    }
};

Requirement_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Requirement_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRequirement_list(this);
	}
};

Requirement_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRequirement_list(this);
	}
};




CadenceParser.Requirement_listContext = Requirement_listContext;

CadenceParser.prototype.requirement_list = function() {

    var localctx = new Requirement_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CadenceParser.RULE_requirement_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 800;
        this.requirement();
        this.state = 805;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 801;
            this.match(CadenceParser.COMMA);
            this.state = 802;
            this.requirement();
            this.state = 807;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RequirementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_requirement;
    return this;
}

RequirementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequirementContext.prototype.constructor = RequirementContext;

RequirementContext.prototype.conformance_requirement = function() {
    return this.getTypedRuleContext(Conformance_requirementContext,0);
};

RequirementContext.prototype.same_type_requirement = function() {
    return this.getTypedRuleContext(Same_type_requirementContext,0);
};

RequirementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRequirement(this);
	}
};

RequirementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRequirement(this);
	}
};




CadenceParser.RequirementContext = RequirementContext;

CadenceParser.prototype.requirement = function() {

    var localctx = new RequirementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CadenceParser.RULE_requirement);
    try {
        this.state = 810;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 808;
            this.conformance_requirement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 809;
            this.same_type_requirement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conformance_requirementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_conformance_requirement;
    return this;
}

Conformance_requirementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conformance_requirementContext.prototype.constructor = Conformance_requirementContext;

Conformance_requirementContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Conformance_requirementContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Conformance_requirementContext.prototype.protocol_composition_type = function() {
    return this.getTypedRuleContext(Protocol_composition_typeContext,0);
};

Conformance_requirementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterConformance_requirement(this);
	}
};

Conformance_requirementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitConformance_requirement(this);
	}
};




CadenceParser.Conformance_requirementContext = Conformance_requirementContext;

CadenceParser.prototype.conformance_requirement = function() {

    var localctx = new Conformance_requirementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CadenceParser.RULE_conformance_requirement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 812;
        this.type_identifier();
        this.state = 813;
        this.match(CadenceParser.COLON);
        this.state = 816;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.state = 814;
            this.type_identifier();
            break;

        case 2:
            this.state = 815;
            this.protocol_composition_type();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Same_type_requirementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_same_type_requirement;
    return this;
}

Same_type_requirementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Same_type_requirementContext.prototype.constructor = Same_type_requirementContext;

Same_type_requirementContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Same_type_requirementContext.prototype.same_type_equals = function() {
    return this.getTypedRuleContext(Same_type_equalsContext,0);
};

Same_type_requirementContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Same_type_requirementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSame_type_requirement(this);
	}
};

Same_type_requirementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSame_type_requirement(this);
	}
};




CadenceParser.Same_type_requirementContext = Same_type_requirementContext;

CadenceParser.prototype.same_type_requirement = function() {

    var localctx = new Same_type_requirementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CadenceParser.RULE_same_type_requirement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this.type_identifier();
        this.state = 819;
        this.same_type_equals();
        this.state = 822;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.state = 820;
            this.type_identifier();
            break;

        case 2:
            this.state = 821;
            this.type(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_argument_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_argument_clause;
    return this;
}

Generic_argument_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_argument_clauseContext.prototype.constructor = Generic_argument_clauseContext;

Generic_argument_clauseContext.prototype.LT = function() {
    return this.getToken(CadenceParser.LT, 0);
};

Generic_argument_clauseContext.prototype.generic_argument_list = function() {
    return this.getTypedRuleContext(Generic_argument_listContext,0);
};

Generic_argument_clauseContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Generic_argument_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_argument_clause(this);
	}
};

Generic_argument_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_argument_clause(this);
	}
};




CadenceParser.Generic_argument_clauseContext = Generic_argument_clauseContext;

CadenceParser.prototype.generic_argument_clause = function() {

    var localctx = new Generic_argument_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CadenceParser.RULE_generic_argument_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.match(CadenceParser.LT);
        this.state = 825;
        this.generic_argument_list();
        this.state = 826;
        this.match(CadenceParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_argument_list;
    return this;
}

Generic_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_argument_listContext.prototype.constructor = Generic_argument_listContext;

Generic_argument_listContext.prototype.generic_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Generic_argumentContext);
    } else {
        return this.getTypedRuleContext(Generic_argumentContext,i);
    }
};

Generic_argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Generic_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_argument_list(this);
	}
};

Generic_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_argument_list(this);
	}
};




CadenceParser.Generic_argument_listContext = Generic_argument_listContext;

CadenceParser.prototype.generic_argument_list = function() {

    var localctx = new Generic_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CadenceParser.RULE_generic_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        this.generic_argument();
        this.state = 833;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 829;
            this.match(CadenceParser.COMMA);
            this.state = 830;
            this.generic_argument();
            this.state = 835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_argument;
    return this;
}

Generic_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_argumentContext.prototype.constructor = Generic_argumentContext;

Generic_argumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Generic_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_argument(this);
	}
};

Generic_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_argument(this);
	}
};




CadenceParser.Generic_argumentContext = Generic_argumentContext;

CadenceParser.prototype.generic_argument = function() {

    var localctx = new Generic_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CadenceParser.RULE_generic_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 836;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Access_level_modifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_access_level_modifier;
    return this;
}

Access_level_modifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Access_level_modifierContext.prototype.constructor = Access_level_modifierContext;

Access_level_modifierContext.prototype.ACCESS = function() {
    return this.getToken(CadenceParser.ACCESS, 0);
};

Access_level_modifierContext.prototype.PRIVATE = function() {
    return this.getToken(CadenceParser.PRIVATE, 0);
};

Access_level_modifierContext.prototype.FILE_PRIVATE = function() {
    return this.getToken(CadenceParser.FILE_PRIVATE, 0);
};

Access_level_modifierContext.prototype.INTERNAL = function() {
    return this.getToken(CadenceParser.INTERNAL, 0);
};

Access_level_modifierContext.prototype.PUBLIC = function() {
    return this.getToken(CadenceParser.PUBLIC, 0);
};

Access_level_modifierContext.prototype.OPEN = function() {
    return this.getToken(CadenceParser.OPEN, 0);
};

Access_level_modifierContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Access_level_modifierContext.prototype.SET = function() {
    return this.getToken(CadenceParser.SET, 0);
};

Access_level_modifierContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Access_level_modifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterAccess_level_modifier(this);
	}
};

Access_level_modifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitAccess_level_modifier(this);
	}
};




CadenceParser.Access_level_modifierContext = Access_level_modifierContext;

CadenceParser.prototype.access_level_modifier = function() {

    var localctx = new Access_level_modifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CadenceParser.RULE_access_level_modifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 838;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || _la===CadenceParser.FILE_PRIVATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 842;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LPAREN) {
            this.state = 839;
            this.match(CadenceParser.LPAREN);
            this.state = 840;
            this.match(CadenceParser.SET);
            this.state = 841;
            this.match(CadenceParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.import_declaration = function() {
    return this.getTypedRuleContext(Import_declarationContext,0);
};

DeclarationContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

DeclarationContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

DeclarationContext.prototype.typealias_declaration = function() {
    return this.getTypedRuleContext(Typealias_declarationContext,0);
};

DeclarationContext.prototype.contract_declaration = function() {
    return this.getTypedRuleContext(Contract_declarationContext,0);
};

DeclarationContext.prototype.function_declaration = function() {
    return this.getTypedRuleContext(Function_declarationContext,0);
};

DeclarationContext.prototype.enum_declaration = function() {
    return this.getTypedRuleContext(Enum_declarationContext,0);
};

DeclarationContext.prototype.struct_declaration = function() {
    return this.getTypedRuleContext(Struct_declarationContext,0);
};

DeclarationContext.prototype.class_declaration = function() {
    return this.getTypedRuleContext(Class_declarationContext,0);
};

DeclarationContext.prototype.protocol_declaration = function() {
    return this.getTypedRuleContext(Protocol_declarationContext,0);
};

DeclarationContext.prototype.initializer_declaration = function() {
    return this.getTypedRuleContext(Initializer_declarationContext,0);
};

DeclarationContext.prototype.deinitializer_declaration = function() {
    return this.getTypedRuleContext(Deinitializer_declarationContext,0);
};

DeclarationContext.prototype.extension_declaration = function() {
    return this.getTypedRuleContext(Extension_declarationContext,0);
};

DeclarationContext.prototype.subscript_declaration = function() {
    return this.getTypedRuleContext(Subscript_declarationContext,0);
};

DeclarationContext.prototype.operator_declaration = function() {
    return this.getTypedRuleContext(Operator_declarationContext,0);
};

DeclarationContext.prototype.precedence_group_declaration = function() {
    return this.getTypedRuleContext(Precedence_group_declarationContext,0);
};

DeclarationContext.prototype.SEMI = function() {
    return this.getToken(CadenceParser.SEMI, 0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDeclaration(this);
	}
};




CadenceParser.DeclarationContext = DeclarationContext;

CadenceParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CadenceParser.RULE_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.state = 844;
            this.import_declaration();
            break;

        case 2:
            this.state = 845;
            this.constant_declaration();
            break;

        case 3:
            this.state = 846;
            this.variable_declaration();
            break;

        case 4:
            this.state = 847;
            this.typealias_declaration();
            break;

        case 5:
            this.state = 848;
            this.contract_declaration();
            break;

        case 6:
            this.state = 849;
            this.function_declaration();
            break;

        case 7:
            this.state = 850;
            this.enum_declaration();
            break;

        case 8:
            this.state = 851;
            this.struct_declaration();
            break;

        case 9:
            this.state = 852;
            this.class_declaration();
            break;

        case 10:
            this.state = 853;
            this.protocol_declaration();
            break;

        case 11:
            this.state = 854;
            this.initializer_declaration();
            break;

        case 12:
            this.state = 855;
            this.deinitializer_declaration();
            break;

        case 13:
            this.state = 856;
            this.extension_declaration();
            break;

        case 14:
            this.state = 857;
            this.subscript_declaration();
            break;

        case 15:
            this.state = 858;
            this.operator_declaration();
            break;

        case 16:
            this.state = 859;
            this.precedence_group_declaration();
            break;

        }
        this.state = 863;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 862;
            this.match(CadenceParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDeclarations(this);
	}
};




CadenceParser.DeclarationsContext = DeclarationsContext;

CadenceParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CadenceParser.RULE_declarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 866; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 865;
            this.declaration();
            this.state = 868; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.POSTFIX - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Contract_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_contract_declaration;
    return this;
}

Contract_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Contract_declarationContext.prototype.constructor = Contract_declarationContext;

Contract_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Contract_declarationContext.prototype.CONTRACT = function() {
    return this.getToken(CadenceParser.CONTRACT, 0);
};

Contract_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Contract_declarationContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Contract_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterContract_declaration(this);
	}
};

Contract_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitContract_declaration(this);
	}
};




CadenceParser.Contract_declarationContext = Contract_declarationContext;

CadenceParser.prototype.contract_declaration = function() {

    var localctx = new Contract_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CadenceParser.RULE_contract_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.access_level_modifier();
        this.state = 871;
        this.match(CadenceParser.CONTRACT);
        this.state = 872;
        this.identifier();
        this.state = 873;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_declaration;
    return this;
}

Function_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_declarationContext.prototype.constructor = Function_declarationContext;

Function_declarationContext.prototype.function_head = function() {
    return this.getTypedRuleContext(Function_headContext,0);
};

Function_declarationContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Function_declarationContext.prototype.function_signature = function() {
    return this.getTypedRuleContext(Function_signatureContext,0);
};

Function_declarationContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Function_declarationContext.prototype.function_body = function() {
    return this.getTypedRuleContext(Function_bodyContext,0);
};

Function_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_declaration(this);
	}
};

Function_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_declaration(this);
	}
};




CadenceParser.Function_declarationContext = Function_declarationContext;

CadenceParser.prototype.function_declaration = function() {

    var localctx = new Function_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CadenceParser.RULE_function_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 875;
        this.function_head();
        this.state = 876;
        this.function_name();
        this.state = 878;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 877;
            this.generic_parameter_clause();
        }

        this.state = 880;
        this.function_signature();
        this.state = 882;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 881;
            this.function_body();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_head;
    return this;
}

Function_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_headContext.prototype.constructor = Function_headContext;

Function_headContext.prototype.FUNC = function() {
    return this.getToken(CadenceParser.FUNC, 0);
};

Function_headContext.prototype.declaration_modifiers = function() {
    return this.getTypedRuleContext(Declaration_modifiersContext,0);
};

Function_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_head(this);
	}
};

Function_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_head(this);
	}
};




CadenceParser.Function_headContext = Function_headContext;

CadenceParser.prototype.function_head = function() {

    var localctx = new Function_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CadenceParser.RULE_function_head);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 885;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (CadenceParser.PREFIX - 52)) | (1 << (CadenceParser.INFIX - 52)) | (1 << (CadenceParser.POSTFIX - 52)) | (1 << (CadenceParser.CONVENIENCE - 52)) | (1 << (CadenceParser.DYNAMIC - 52)) | (1 << (CadenceParser.LAZY - 52)) | (1 << (CadenceParser.OPTIONAL - 52)) | (1 << (CadenceParser.OVERRIDE - 52)) | (1 << (CadenceParser.REQUIRED - 52)) | (1 << (CadenceParser.STATIC - 52)) | (1 << (CadenceParser.WEAK - 52)) | (1 << (CadenceParser.UNOWNED - 52)) | (1 << (CadenceParser.MUTATING - 52)) | (1 << (CadenceParser.NONMUTATING - 52)))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
            this.state = 884;
            this.declaration_modifiers();
        }

        this.state = 887;
        this.match(CadenceParser.FUNC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Function_nameContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_name(this);
	}
};




CadenceParser.Function_nameContext = Function_nameContext;

CadenceParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CadenceParser.RULE_function_name);
    try {
        this.state = 891;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.AS:
        case CadenceParser.ALPHA:
        case CadenceParser.CATCH:
        case CadenceParser.CLASS:
        case CadenceParser.DEFAULT:
        case CadenceParser.DO:
        case CadenceParser.GUARD:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHERE:
        case CadenceParser.WHILE:
        case CadenceParser.PROTOCOL:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.WILL_SET:
        case CadenceParser.DID_SET:
        case CadenceParser.INDIRECT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.LEFT:
        case CadenceParser.RIGHT:
        case CadenceParser.NONE:
        case CadenceParser.PRECEDENCE_GROUP:
        case CadenceParser.HIGHER_THAN:
        case CadenceParser.LOWER_THAN:
        case CadenceParser.ASSIGNMENT:
        case CadenceParser.ASSOCIATIVITY:
        case CadenceParser.POSTFIX:
        case CadenceParser.OPERATOR:
        case CadenceParser.OS:
        case CadenceParser.ARCH:
        case CadenceParser.SWIFT:
        case CadenceParser.COMPILER:
        case CadenceParser.CAN_IMPORT:
        case CadenceParser.TARGET_ENVIRONMENT:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.SAFE:
        case CadenceParser.UNSAFE:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.RED:
        case CadenceParser.BLUE:
        case CadenceParser.GREEN:
        case CadenceParser.RESOURCE_NAME:
        case CadenceParser.SOME:
        case CadenceParser.TYPE:
        case CadenceParser.PRECEDENCE:
        case CadenceParser.SELF:
        case CadenceParser.SELF_BIG:
        case CadenceParser.MAC_OS:
        case CadenceParser.I_OS:
        case CadenceParser.OSX:
        case CadenceParser.WATCH_OS:
        case CadenceParser.TV_OS:
        case CadenceParser.LINUX:
        case CadenceParser.WINDOWS:
        case CadenceParser.I386:
        case CadenceParser.X86_64:
        case CadenceParser.ARM:
        case CadenceParser.ARM64:
        case CadenceParser.SIMULATOR:
        case CadenceParser.MAC_CATALYST:
        case CadenceParser.I_OS_APPLICATION_EXTENSION:
        case CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION:
        case CadenceParser.MAC_OS_APPLICATION_EXTENSION:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.GETTER:
        case CadenceParser.SETTER:
        case CadenceParser.Identifier:
        case CadenceParser.BACKTICK:
            this.enterOuterAlt(localctx, 1);
            this.state = 889;
            this.identifier();
            break;
        case CadenceParser.DOT:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
            this.enterOuterAlt(localctx, 2);
            this.state = 890;
            this.operator();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_signatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_signature;
    return this;
}

Function_signatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_signatureContext.prototype.constructor = Function_signatureContext;

Function_signatureContext.prototype.parameter_clause = function() {
    return this.getTypedRuleContext(Parameter_clauseContext,0);
};

Function_signatureContext.prototype.RETHROWS = function() {
    return this.getToken(CadenceParser.RETHROWS, 0);
};

Function_signatureContext.prototype.function_result = function() {
    return this.getTypedRuleContext(Function_resultContext,0);
};

Function_signatureContext.prototype.THROWS = function() {
    return this.getToken(CadenceParser.THROWS, 0);
};

Function_signatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_signature(this);
	}
};

Function_signatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_signature(this);
	}
};




CadenceParser.Function_signatureContext = Function_signatureContext;

CadenceParser.prototype.function_signature = function() {

    var localctx = new Function_signatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CadenceParser.RULE_function_signature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 893;
        this.parameter_clause();
        this.state = 898;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.EOF:
        case CadenceParser.ACCESS:
        case CadenceParser.AS:
        case CadenceParser.ALPHA:
        case CadenceParser.BREAK:
        case CadenceParser.CASE:
        case CadenceParser.CATCH:
        case CadenceParser.CLASS:
        case CadenceParser.CONTINUE:
        case CadenceParser.DEFAULT:
        case CadenceParser.DO:
        case CadenceParser.GUARD:
        case CadenceParser.ENUM:
        case CadenceParser.FOR:
        case CadenceParser.FALLTHROUGH:
        case CadenceParser.FUNC:
        case CadenceParser.IN:
        case CadenceParser.IF:
        case CadenceParser.IMPORT:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHERE:
        case CadenceParser.WHILE:
        case CadenceParser.LET:
        case CadenceParser.PROTOCOL:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.WILL_SET:
        case CadenceParser.DID_SET:
        case CadenceParser.REPEAT:
        case CadenceParser.SWITCH:
        case CadenceParser.STRUCT:
        case CadenceParser.RETURN:
        case CadenceParser.THROW:
        case CadenceParser.THROWS:
        case CadenceParser.INDIRECT:
        case CadenceParser.INIT:
        case CadenceParser.DEINIT:
        case CadenceParser.ASSOCIATED_TYPE:
        case CadenceParser.EXTENSION:
        case CadenceParser.SUBSCRIPT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.LEFT:
        case CadenceParser.RIGHT:
        case CadenceParser.NONE:
        case CadenceParser.PRECEDENCE_GROUP:
        case CadenceParser.HIGHER_THAN:
        case CadenceParser.LOWER_THAN:
        case CadenceParser.ASSIGNMENT:
        case CadenceParser.ASSOCIATIVITY:
        case CadenceParser.POSTFIX:
        case CadenceParser.OPERATOR:
        case CadenceParser.TYPEALIAS:
        case CadenceParser.OS:
        case CadenceParser.ARCH:
        case CadenceParser.SWIFT:
        case CadenceParser.COMPILER:
        case CadenceParser.CAN_IMPORT:
        case CadenceParser.TARGET_ENVIRONMENT:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.STATIC:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.SAFE:
        case CadenceParser.UNSAFE:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.FILE_PRIVATE:
        case CadenceParser.SUPER:
        case CadenceParser.FALSE:
        case CadenceParser.RED:
        case CadenceParser.BLUE:
        case CadenceParser.GREEN:
        case CadenceParser.RESOURCE_NAME:
        case CadenceParser.TRUE:
        case CadenceParser.NIL:
        case CadenceParser.SOME:
        case CadenceParser.TYPE:
        case CadenceParser.PRECEDENCE:
        case CadenceParser.SELF:
        case CadenceParser.SELF_BIG:
        case CadenceParser.MAC_OS:
        case CadenceParser.I_OS:
        case CadenceParser.OSX:
        case CadenceParser.WATCH_OS:
        case CadenceParser.TV_OS:
        case CadenceParser.LINUX:
        case CadenceParser.WINDOWS:
        case CadenceParser.I386:
        case CadenceParser.X86_64:
        case CadenceParser.ARM:
        case CadenceParser.ARM64:
        case CadenceParser.SIMULATOR:
        case CadenceParser.MAC_CATALYST:
        case CadenceParser.I_OS_APPLICATION_EXTENSION:
        case CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION:
        case CadenceParser.MAC_OS_APPLICATION_EXTENSION:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.HASH_SELECTOR:
        case CadenceParser.HASH_KEYPATH:
        case CadenceParser.GETTER:
        case CadenceParser.SETTER:
        case CadenceParser.Identifier:
        case CadenceParser.DOT:
        case CadenceParser.LCURLY:
        case CadenceParser.LPAREN:
        case CadenceParser.LBRACK:
        case CadenceParser.RCURLY:
        case CadenceParser.COLON:
        case CadenceParser.SEMI:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.UNDERSCORE:
        case CadenceParser.BANG:
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.BACKTICK:
        case CadenceParser.BACKSLASH:
        case CadenceParser.Operator_head_other:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
        case CadenceParser.Multi_line_extended_string_open:
        case CadenceParser.Single_line_extended_string_open:
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.state = 895;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.THROWS) {
                this.state = 894;
                this.match(CadenceParser.THROWS);
            }

            break;
        case CadenceParser.RETHROWS:
            this.state = 897;
            this.match(CadenceParser.RETHROWS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 901;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 900;
            this.function_result();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_result;
    return this;
}

Function_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_resultContext.prototype.constructor = Function_resultContext;

Function_resultContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

Function_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_result(this);
	}
};

Function_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_result(this);
	}
};




CadenceParser.Function_resultContext = Function_resultContext;

CadenceParser.prototype.function_result = function() {

    var localctx = new Function_resultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CadenceParser.RULE_function_result);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 903;
        this.type_annotation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_body;
    return this;
}

Function_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_bodyContext.prototype.constructor = Function_bodyContext;

Function_bodyContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Function_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_body(this);
	}
};

Function_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_body(this);
	}
};




CadenceParser.Function_bodyContext = Function_bodyContext;

CadenceParser.prototype.function_body = function() {

    var localctx = new Function_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CadenceParser.RULE_function_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 905;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Top_level_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_top_level_declaration;
    return this;
}

Top_level_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Top_level_declarationContext.prototype.constructor = Top_level_declarationContext;

Top_level_declarationContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

Top_level_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTop_level_declaration(this);
	}
};

Top_level_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTop_level_declaration(this);
	}
};




CadenceParser.Top_level_declarationContext = Top_level_declarationContext;

CadenceParser.prototype.top_level_declaration = function() {

    var localctx = new Top_level_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CadenceParser.RULE_top_level_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 908;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FALLTHROUGH) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN) | (1 << CadenceParser.IF) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.GET - 32)) | (1 << (CadenceParser.SET - 32)) | (1 << (CadenceParser.WILL_SET - 32)) | (1 << (CadenceParser.DID_SET - 32)) | (1 << (CadenceParser.REPEAT - 32)) | (1 << (CadenceParser.SWITCH - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.RETURN - 32)) | (1 << (CadenceParser.THROW - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.LEFT - 32)) | (1 << (CadenceParser.RIGHT - 32)) | (1 << (CadenceParser.NONE - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.HIGHER_THAN - 32)) | (1 << (CadenceParser.LOWER_THAN - 32)) | (1 << (CadenceParser.ASSIGNMENT - 32)) | (1 << (CadenceParser.ASSOCIATIVITY - 32)) | (1 << (CadenceParser.POSTFIX - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.OS - 64)) | (1 << (CadenceParser.ARCH - 64)) | (1 << (CadenceParser.SWIFT - 64)) | (1 << (CadenceParser.COMPILER - 64)) | (1 << (CadenceParser.CAN_IMPORT - 64)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.SAFE - 64)) | (1 << (CadenceParser.UNSAFE - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)) | (1 << (CadenceParser.SUPER - 64)) | (1 << (CadenceParser.FALSE - 64)) | (1 << (CadenceParser.RED - 64)) | (1 << (CadenceParser.BLUE - 64)) | (1 << (CadenceParser.GREEN - 64)) | (1 << (CadenceParser.RESOURCE_NAME - 64)) | (1 << (CadenceParser.TRUE - 64)) | (1 << (CadenceParser.NIL - 64)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CadenceParser.SOME - 97)) | (1 << (CadenceParser.TYPE - 97)) | (1 << (CadenceParser.PRECEDENCE - 97)) | (1 << (CadenceParser.SELF - 97)) | (1 << (CadenceParser.SELF_BIG - 97)) | (1 << (CadenceParser.MAC_OS - 97)) | (1 << (CadenceParser.I_OS - 97)) | (1 << (CadenceParser.OSX - 97)) | (1 << (CadenceParser.WATCH_OS - 97)) | (1 << (CadenceParser.TV_OS - 97)) | (1 << (CadenceParser.LINUX - 97)) | (1 << (CadenceParser.WINDOWS - 97)) | (1 << (CadenceParser.I386 - 97)) | (1 << (CadenceParser.X86_64 - 97)) | (1 << (CadenceParser.ARM - 97)) | (1 << (CadenceParser.ARM64 - 97)) | (1 << (CadenceParser.SIMULATOR - 97)) | (1 << (CadenceParser.MAC_CATALYST - 97)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.FILE - 97)) | (1 << (CadenceParser.LINE - 97)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CadenceParser.HASH_SELECTOR - 135)) | (1 << (CadenceParser.HASH_KEYPATH - 135)) | (1 << (CadenceParser.GETTER - 135)) | (1 << (CadenceParser.SETTER - 135)) | (1 << (CadenceParser.Identifier - 135)) | (1 << (CadenceParser.DOT - 135)) | (1 << (CadenceParser.LCURLY - 135)) | (1 << (CadenceParser.LPAREN - 135)) | (1 << (CadenceParser.LBRACK - 135)) | (1 << (CadenceParser.LT - 135)) | (1 << (CadenceParser.GT - 135)) | (1 << (CadenceParser.UNDERSCORE - 135)) | (1 << (CadenceParser.BANG - 135)) | (1 << (CadenceParser.QUESTION - 135)) | (1 << (CadenceParser.AND - 135)) | (1 << (CadenceParser.SUB - 135)) | (1 << (CadenceParser.EQUAL - 135)) | (1 << (CadenceParser.OR - 135)) | (1 << (CadenceParser.DIV - 135)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CadenceParser.ADD - 167)) | (1 << (CadenceParser.MUL - 167)) | (1 << (CadenceParser.MOD - 167)) | (1 << (CadenceParser.CARET - 167)) | (1 << (CadenceParser.TILDE - 167)) | (1 << (CadenceParser.BACKTICK - 167)) | (1 << (CadenceParser.BACKSLASH - 167)) | (1 << (CadenceParser.Operator_head_other - 167)) | (1 << (CadenceParser.Binary_literal - 167)) | (1 << (CadenceParser.Octal_literal - 167)) | (1 << (CadenceParser.Decimal_digits - 167)) | (1 << (CadenceParser.Decimal_literal - 167)) | (1 << (CadenceParser.Hexadecimal_literal - 167)) | (1 << (CadenceParser.Floating_point_literal - 167)) | (1 << (CadenceParser.Multi_line_extended_string_open - 167)) | (1 << (CadenceParser.Single_line_extended_string_open - 167)) | (1 << (CadenceParser.Multi_line_string_open - 167)) | (1 << (CadenceParser.Single_line_string_open - 167)))) !== 0)) {
            this.state = 907;
            this.statements();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Code_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_code_block;
    return this;
}

Code_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_blockContext.prototype.constructor = Code_blockContext;

Code_blockContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Code_blockContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Code_blockContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

Code_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCode_block(this);
	}
};

Code_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCode_block(this);
	}
};




CadenceParser.Code_blockContext = Code_blockContext;

CadenceParser.prototype.code_block = function() {

    var localctx = new Code_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CadenceParser.RULE_code_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 910;
        this.match(CadenceParser.LCURLY);
        this.state = 912;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FALLTHROUGH) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN) | (1 << CadenceParser.IF) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.GET - 32)) | (1 << (CadenceParser.SET - 32)) | (1 << (CadenceParser.WILL_SET - 32)) | (1 << (CadenceParser.DID_SET - 32)) | (1 << (CadenceParser.REPEAT - 32)) | (1 << (CadenceParser.SWITCH - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.RETURN - 32)) | (1 << (CadenceParser.THROW - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.LEFT - 32)) | (1 << (CadenceParser.RIGHT - 32)) | (1 << (CadenceParser.NONE - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.HIGHER_THAN - 32)) | (1 << (CadenceParser.LOWER_THAN - 32)) | (1 << (CadenceParser.ASSIGNMENT - 32)) | (1 << (CadenceParser.ASSOCIATIVITY - 32)) | (1 << (CadenceParser.POSTFIX - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.OS - 64)) | (1 << (CadenceParser.ARCH - 64)) | (1 << (CadenceParser.SWIFT - 64)) | (1 << (CadenceParser.COMPILER - 64)) | (1 << (CadenceParser.CAN_IMPORT - 64)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.SAFE - 64)) | (1 << (CadenceParser.UNSAFE - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)) | (1 << (CadenceParser.SUPER - 64)) | (1 << (CadenceParser.FALSE - 64)) | (1 << (CadenceParser.RED - 64)) | (1 << (CadenceParser.BLUE - 64)) | (1 << (CadenceParser.GREEN - 64)) | (1 << (CadenceParser.RESOURCE_NAME - 64)) | (1 << (CadenceParser.TRUE - 64)) | (1 << (CadenceParser.NIL - 64)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CadenceParser.SOME - 97)) | (1 << (CadenceParser.TYPE - 97)) | (1 << (CadenceParser.PRECEDENCE - 97)) | (1 << (CadenceParser.SELF - 97)) | (1 << (CadenceParser.SELF_BIG - 97)) | (1 << (CadenceParser.MAC_OS - 97)) | (1 << (CadenceParser.I_OS - 97)) | (1 << (CadenceParser.OSX - 97)) | (1 << (CadenceParser.WATCH_OS - 97)) | (1 << (CadenceParser.TV_OS - 97)) | (1 << (CadenceParser.LINUX - 97)) | (1 << (CadenceParser.WINDOWS - 97)) | (1 << (CadenceParser.I386 - 97)) | (1 << (CadenceParser.X86_64 - 97)) | (1 << (CadenceParser.ARM - 97)) | (1 << (CadenceParser.ARM64 - 97)) | (1 << (CadenceParser.SIMULATOR - 97)) | (1 << (CadenceParser.MAC_CATALYST - 97)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.FILE - 97)) | (1 << (CadenceParser.LINE - 97)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CadenceParser.HASH_SELECTOR - 135)) | (1 << (CadenceParser.HASH_KEYPATH - 135)) | (1 << (CadenceParser.GETTER - 135)) | (1 << (CadenceParser.SETTER - 135)) | (1 << (CadenceParser.Identifier - 135)) | (1 << (CadenceParser.DOT - 135)) | (1 << (CadenceParser.LCURLY - 135)) | (1 << (CadenceParser.LPAREN - 135)) | (1 << (CadenceParser.LBRACK - 135)) | (1 << (CadenceParser.LT - 135)) | (1 << (CadenceParser.GT - 135)) | (1 << (CadenceParser.UNDERSCORE - 135)) | (1 << (CadenceParser.BANG - 135)) | (1 << (CadenceParser.QUESTION - 135)) | (1 << (CadenceParser.AND - 135)) | (1 << (CadenceParser.SUB - 135)) | (1 << (CadenceParser.EQUAL - 135)) | (1 << (CadenceParser.OR - 135)) | (1 << (CadenceParser.DIV - 135)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CadenceParser.ADD - 167)) | (1 << (CadenceParser.MUL - 167)) | (1 << (CadenceParser.MOD - 167)) | (1 << (CadenceParser.CARET - 167)) | (1 << (CadenceParser.TILDE - 167)) | (1 << (CadenceParser.BACKTICK - 167)) | (1 << (CadenceParser.BACKSLASH - 167)) | (1 << (CadenceParser.Operator_head_other - 167)) | (1 << (CadenceParser.Binary_literal - 167)) | (1 << (CadenceParser.Octal_literal - 167)) | (1 << (CadenceParser.Decimal_digits - 167)) | (1 << (CadenceParser.Decimal_literal - 167)) | (1 << (CadenceParser.Hexadecimal_literal - 167)) | (1 << (CadenceParser.Floating_point_literal - 167)) | (1 << (CadenceParser.Multi_line_extended_string_open - 167)) | (1 << (CadenceParser.Single_line_extended_string_open - 167)) | (1 << (CadenceParser.Multi_line_string_open - 167)) | (1 << (CadenceParser.Single_line_string_open - 167)))) !== 0)) {
            this.state = 911;
            this.statements();
        }

        this.state = 914;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Import_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_import_declaration;
    return this;
}

Import_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_declarationContext.prototype.constructor = Import_declarationContext;

Import_declarationContext.prototype.IMPORT = function() {
    return this.getToken(CadenceParser.IMPORT, 0);
};

Import_declarationContext.prototype.import_path = function() {
    return this.getTypedRuleContext(Import_pathContext,0);
};

Import_declarationContext.prototype.import_kind = function() {
    return this.getTypedRuleContext(Import_kindContext,0);
};

Import_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterImport_declaration(this);
	}
};

Import_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitImport_declaration(this);
	}
};




CadenceParser.Import_declarationContext = Import_declarationContext;

CadenceParser.prototype.import_declaration = function() {

    var localctx = new Import_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CadenceParser.RULE_import_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 916;
        this.match(CadenceParser.IMPORT);
        this.state = 918;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        if(la_===1) {
            this.state = 917;
            this.import_kind();

        }
        this.state = 920;
        this.import_path();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Import_kindContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_import_kind;
    return this;
}

Import_kindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_kindContext.prototype.constructor = Import_kindContext;

Import_kindContext.prototype.TYPEALIAS = function() {
    return this.getToken(CadenceParser.TYPEALIAS, 0);
};

Import_kindContext.prototype.STRUCT = function() {
    return this.getToken(CadenceParser.STRUCT, 0);
};

Import_kindContext.prototype.CLASS = function() {
    return this.getToken(CadenceParser.CLASS, 0);
};

Import_kindContext.prototype.ENUM = function() {
    return this.getToken(CadenceParser.ENUM, 0);
};

Import_kindContext.prototype.PROTOCOL = function() {
    return this.getToken(CadenceParser.PROTOCOL, 0);
};

Import_kindContext.prototype.LET = function() {
    return this.getToken(CadenceParser.LET, 0);
};

Import_kindContext.prototype.VAR = function() {
    return this.getToken(CadenceParser.VAR, 0);
};

Import_kindContext.prototype.FUNC = function() {
    return this.getToken(CadenceParser.FUNC, 0);
};

Import_kindContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterImport_kind(this);
	}
};

Import_kindContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitImport_kind(this);
	}
};




CadenceParser.Import_kindContext = Import_kindContext;

CadenceParser.prototype.import_kind = function() {

    var localctx = new Import_kindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CadenceParser.RULE_import_kind);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 922;
        _la = this._input.LA(1);
        if(!(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (CadenceParser.CLASS - 11)) | (1 << (CadenceParser.ENUM - 11)) | (1 << (CadenceParser.FUNC - 11)) | (1 << (CadenceParser.LET - 11)) | (1 << (CadenceParser.VAR - 11)) | (1 << (CadenceParser.PROTOCOL - 11)) | (1 << (CadenceParser.STRUCT - 11)))) !== 0) || _la===CadenceParser.TYPEALIAS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Import_pathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_import_path;
    return this;
}

Import_pathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_pathContext.prototype.constructor = Import_pathContext;

Import_pathContext.prototype.import_path_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Import_path_identifierContext);
    } else {
        return this.getTypedRuleContext(Import_path_identifierContext,i);
    }
};

Import_pathContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.DOT);
    } else {
        return this.getToken(CadenceParser.DOT, i);
    }
};


Import_pathContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterImport_path(this);
	}
};

Import_pathContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitImport_path(this);
	}
};




CadenceParser.Import_pathContext = Import_pathContext;

CadenceParser.prototype.import_path = function() {

    var localctx = new Import_pathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CadenceParser.RULE_import_path);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 924;
        this.import_path_identifier();
        this.state = 929;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 925;
                this.match(CadenceParser.DOT);
                this.state = 926;
                this.import_path_identifier(); 
            }
            this.state = 931;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Import_path_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_import_path_identifier;
    return this;
}

Import_path_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_path_identifierContext.prototype.constructor = Import_path_identifierContext;

Import_path_identifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Import_path_identifierContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Import_path_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterImport_path_identifier(this);
	}
};

Import_path_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitImport_path_identifier(this);
	}
};




CadenceParser.Import_path_identifierContext = Import_path_identifierContext;

CadenceParser.prototype.import_path_identifier = function() {

    var localctx = new Import_path_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CadenceParser.RULE_import_path_identifier);
    try {
        this.state = 934;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.AS:
        case CadenceParser.ALPHA:
        case CadenceParser.CATCH:
        case CadenceParser.CLASS:
        case CadenceParser.DEFAULT:
        case CadenceParser.DO:
        case CadenceParser.GUARD:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHERE:
        case CadenceParser.WHILE:
        case CadenceParser.PROTOCOL:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.WILL_SET:
        case CadenceParser.DID_SET:
        case CadenceParser.INDIRECT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.LEFT:
        case CadenceParser.RIGHT:
        case CadenceParser.NONE:
        case CadenceParser.PRECEDENCE_GROUP:
        case CadenceParser.HIGHER_THAN:
        case CadenceParser.LOWER_THAN:
        case CadenceParser.ASSIGNMENT:
        case CadenceParser.ASSOCIATIVITY:
        case CadenceParser.POSTFIX:
        case CadenceParser.OPERATOR:
        case CadenceParser.OS:
        case CadenceParser.ARCH:
        case CadenceParser.SWIFT:
        case CadenceParser.COMPILER:
        case CadenceParser.CAN_IMPORT:
        case CadenceParser.TARGET_ENVIRONMENT:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.SAFE:
        case CadenceParser.UNSAFE:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.RED:
        case CadenceParser.BLUE:
        case CadenceParser.GREEN:
        case CadenceParser.RESOURCE_NAME:
        case CadenceParser.SOME:
        case CadenceParser.TYPE:
        case CadenceParser.PRECEDENCE:
        case CadenceParser.SELF:
        case CadenceParser.SELF_BIG:
        case CadenceParser.MAC_OS:
        case CadenceParser.I_OS:
        case CadenceParser.OSX:
        case CadenceParser.WATCH_OS:
        case CadenceParser.TV_OS:
        case CadenceParser.LINUX:
        case CadenceParser.WINDOWS:
        case CadenceParser.I386:
        case CadenceParser.X86_64:
        case CadenceParser.ARM:
        case CadenceParser.ARM64:
        case CadenceParser.SIMULATOR:
        case CadenceParser.MAC_CATALYST:
        case CadenceParser.I_OS_APPLICATION_EXTENSION:
        case CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION:
        case CadenceParser.MAC_OS_APPLICATION_EXTENSION:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.GETTER:
        case CadenceParser.SETTER:
        case CadenceParser.Identifier:
        case CadenceParser.BACKTICK:
            this.enterOuterAlt(localctx, 1);
            this.state = 932;
            this.identifier();
            break;
        case CadenceParser.DOT:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
            this.enterOuterAlt(localctx, 2);
            this.state = 933;
            this.operator();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_constant_declaration;
    return this;
}

Constant_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declarationContext.prototype.constructor = Constant_declarationContext;

Constant_declarationContext.prototype.LET = function() {
    return this.getToken(CadenceParser.LET, 0);
};

Constant_declarationContext.prototype.pattern_initializer_list = function() {
    return this.getTypedRuleContext(Pattern_initializer_listContext,0);
};

Constant_declarationContext.prototype.declaration_modifiers = function() {
    return this.getTypedRuleContext(Declaration_modifiersContext,0);
};

Constant_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterConstant_declaration(this);
	}
};

Constant_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitConstant_declaration(this);
	}
};




CadenceParser.Constant_declarationContext = Constant_declarationContext;

CadenceParser.prototype.constant_declaration = function() {

    var localctx = new Constant_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CadenceParser.RULE_constant_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (CadenceParser.PREFIX - 52)) | (1 << (CadenceParser.INFIX - 52)) | (1 << (CadenceParser.POSTFIX - 52)) | (1 << (CadenceParser.CONVENIENCE - 52)) | (1 << (CadenceParser.DYNAMIC - 52)) | (1 << (CadenceParser.LAZY - 52)) | (1 << (CadenceParser.OPTIONAL - 52)) | (1 << (CadenceParser.OVERRIDE - 52)) | (1 << (CadenceParser.REQUIRED - 52)) | (1 << (CadenceParser.STATIC - 52)) | (1 << (CadenceParser.WEAK - 52)) | (1 << (CadenceParser.UNOWNED - 52)) | (1 << (CadenceParser.MUTATING - 52)) | (1 << (CadenceParser.NONMUTATING - 52)))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
            this.state = 936;
            this.declaration_modifiers();
        }

        this.state = 939;
        this.match(CadenceParser.LET);
        this.state = 940;
        this.pattern_initializer_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pattern_initializer_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_pattern_initializer_list;
    return this;
}

Pattern_initializer_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_initializer_listContext.prototype.constructor = Pattern_initializer_listContext;

Pattern_initializer_listContext.prototype.pattern_initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pattern_initializerContext);
    } else {
        return this.getTypedRuleContext(Pattern_initializerContext,i);
    }
};

Pattern_initializer_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Pattern_initializer_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPattern_initializer_list(this);
	}
};

Pattern_initializer_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPattern_initializer_list(this);
	}
};




CadenceParser.Pattern_initializer_listContext = Pattern_initializer_listContext;

CadenceParser.prototype.pattern_initializer_list = function() {

    var localctx = new Pattern_initializer_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CadenceParser.RULE_pattern_initializer_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 942;
        this.pattern_initializer();
        this.state = 947;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 943;
            this.match(CadenceParser.COMMA);
            this.state = 944;
            this.pattern_initializer();
            this.state = 949;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pattern_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_pattern_initializer;
    return this;
}

Pattern_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_initializerContext.prototype.constructor = Pattern_initializerContext;

Pattern_initializerContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

Pattern_initializerContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

Pattern_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPattern_initializer(this);
	}
};

Pattern_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPattern_initializer(this);
	}
};




CadenceParser.Pattern_initializerContext = Pattern_initializerContext;

CadenceParser.prototype.pattern_initializer = function() {

    var localctx = new Pattern_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CadenceParser.RULE_pattern_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 950;
        this.pattern(0);
        this.state = 952;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 951;
            this.initializer();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

InitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInitializer(this);
	}
};




CadenceParser.InitializerContext = InitializerContext;

CadenceParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CadenceParser.RULE_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 954;
        this.match(CadenceParser.EQUAL);
        this.state = 955;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_variable_name;
    return this;
}

Variable_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_nameContext.prototype.constructor = Variable_nameContext;

Variable_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Variable_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterVariable_name(this);
	}
};

Variable_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitVariable_name(this);
	}
};




CadenceParser.Variable_nameContext = Variable_nameContext;

CadenceParser.prototype.variable_name = function() {

    var localctx = new Variable_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CadenceParser.RULE_variable_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 957;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_variable_declaration;
    return this;
}

Variable_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declarationContext.prototype.constructor = Variable_declarationContext;

Variable_declarationContext.prototype.variable_declaration_head = function() {
    return this.getTypedRuleContext(Variable_declaration_headContext,0);
};

Variable_declarationContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Variable_declarationContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Variable_declarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Variable_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterVariable_declaration(this);
	}
};

Variable_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitVariable_declaration(this);
	}
};




CadenceParser.Variable_declarationContext = Variable_declarationContext;

CadenceParser.prototype.variable_declaration = function() {

    var localctx = new Variable_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CadenceParser.RULE_variable_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 959;
        this.variable_declaration_head();

        this.state = 960;
        this.variable_name();
        this.state = 963;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 961;
            this.match(CadenceParser.COLON);
            this.state = 962;
            this.type(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_declaration_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_variable_declaration_head;
    return this;
}

Variable_declaration_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declaration_headContext.prototype.constructor = Variable_declaration_headContext;

Variable_declaration_headContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Variable_declaration_headContext.prototype.LET = function() {
    return this.getToken(CadenceParser.LET, 0);
};

Variable_declaration_headContext.prototype.VAR = function() {
    return this.getToken(CadenceParser.VAR, 0);
};

Variable_declaration_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterVariable_declaration_head(this);
	}
};

Variable_declaration_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitVariable_declaration_head(this);
	}
};




CadenceParser.Variable_declaration_headContext = Variable_declaration_headContext;

CadenceParser.prototype.variable_declaration_head = function() {

    var localctx = new Variable_declaration_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CadenceParser.RULE_variable_declaration_head);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 965;
        this.access_level_modifier();
        this.state = 966;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.LET || _la===CadenceParser.VAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.resource_variable = function() {
    return this.getTypedRuleContext(Resource_variableContext,0);
};

VariableContext.prototype.local_variable = function() {
    return this.getTypedRuleContext(Local_variableContext,0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitVariable(this);
	}
};




CadenceParser.VariableContext = VariableContext;

CadenceParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CadenceParser.RULE_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 970;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.state = 968;
            this.resource_variable();
            break;

        case 2:
            this.state = 969;
            this.local_variable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_variableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_resource_variable;
    return this;
}

Resource_variableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_variableContext.prototype.constructor = Resource_variableContext;

Resource_variableContext.prototype.self_expression = function() {
    return this.getTypedRuleContext(Self_expressionContext,0);
};

Resource_variableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterResource_variable(this);
	}
};

Resource_variableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitResource_variable(this);
	}
};




CadenceParser.Resource_variableContext = Resource_variableContext;

CadenceParser.prototype.resource_variable = function() {

    var localctx = new Resource_variableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CadenceParser.RULE_resource_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 972;
        this.self_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Local_variableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_local_variable;
    return this;
}

Local_variableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variableContext.prototype.constructor = Local_variableContext;

Local_variableContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Local_variableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLocal_variable(this);
	}
};

Local_variableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLocal_variable(this);
	}
};




CadenceParser.Local_variableContext = Local_variableContext;

CadenceParser.prototype.local_variable = function() {

    var localctx = new Local_variableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CadenceParser.RULE_local_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 974;
        this.variable_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initializer_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_initializer_declaration;
    return this;
}

Initializer_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_declarationContext.prototype.constructor = Initializer_declarationContext;

Initializer_declarationContext.prototype.initializer_head = function() {
    return this.getTypedRuleContext(Initializer_headContext,0);
};

Initializer_declarationContext.prototype.parameter_clause = function() {
    return this.getTypedRuleContext(Parameter_clauseContext,0);
};

Initializer_declarationContext.prototype.initializer_body = function() {
    return this.getTypedRuleContext(Initializer_bodyContext,0);
};

Initializer_declarationContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Initializer_declarationContext.prototype.THROWS = function() {
    return this.getToken(CadenceParser.THROWS, 0);
};

Initializer_declarationContext.prototype.RETHROWS = function() {
    return this.getToken(CadenceParser.RETHROWS, 0);
};

Initializer_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInitializer_declaration(this);
	}
};

Initializer_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInitializer_declaration(this);
	}
};




CadenceParser.Initializer_declarationContext = Initializer_declarationContext;

CadenceParser.prototype.initializer_declaration = function() {

    var localctx = new Initializer_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CadenceParser.RULE_initializer_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.initializer_head();
        this.state = 978;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 977;
            this.generic_parameter_clause();
        }

        this.state = 980;
        this.parameter_clause();
        this.state = 982;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.THROWS || _la===CadenceParser.RETHROWS) {
            this.state = 981;
            _la = this._input.LA(1);
            if(!(_la===CadenceParser.THROWS || _la===CadenceParser.RETHROWS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 984;
        this.initializer_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initializer_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_initializer_head;
    return this;
}

Initializer_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_headContext.prototype.constructor = Initializer_headContext;

Initializer_headContext.prototype.INIT = function() {
    return this.getToken(CadenceParser.INIT, 0);
};

Initializer_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInitializer_head(this);
	}
};

Initializer_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInitializer_head(this);
	}
};




CadenceParser.Initializer_headContext = Initializer_headContext;

CadenceParser.prototype.initializer_head = function() {

    var localctx = new Initializer_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CadenceParser.RULE_initializer_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.match(CadenceParser.INIT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initializer_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_initializer_body;
    return this;
}

Initializer_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_bodyContext.prototype.constructor = Initializer_bodyContext;

Initializer_bodyContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Initializer_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInitializer_body(this);
	}
};

Initializer_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInitializer_body(this);
	}
};




CadenceParser.Initializer_bodyContext = Initializer_bodyContext;

CadenceParser.prototype.initializer_body = function() {

    var localctx = new Initializer_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CadenceParser.RULE_initializer_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 988;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_parameter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_parameter_clause;
    return this;
}

Generic_parameter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_parameter_clauseContext.prototype.constructor = Generic_parameter_clauseContext;

Generic_parameter_clauseContext.prototype.LT = function() {
    return this.getToken(CadenceParser.LT, 0);
};

Generic_parameter_clauseContext.prototype.generic_parameter_list = function() {
    return this.getTypedRuleContext(Generic_parameter_listContext,0);
};

Generic_parameter_clauseContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Generic_parameter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_parameter_clause(this);
	}
};

Generic_parameter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_parameter_clause(this);
	}
};




CadenceParser.Generic_parameter_clauseContext = Generic_parameter_clauseContext;

CadenceParser.prototype.generic_parameter_clause = function() {

    var localctx = new Generic_parameter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CadenceParser.RULE_generic_parameter_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 990;
        this.match(CadenceParser.LT);
        this.state = 991;
        this.generic_parameter_list();
        this.state = 992;
        this.match(CadenceParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_parameter_list;
    return this;
}

Generic_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_parameter_listContext.prototype.constructor = Generic_parameter_listContext;

Generic_parameter_listContext.prototype.generic_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Generic_parameterContext);
    } else {
        return this.getTypedRuleContext(Generic_parameterContext,i);
    }
};

Generic_parameter_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Generic_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_parameter_list(this);
	}
};

Generic_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_parameter_list(this);
	}
};




CadenceParser.Generic_parameter_listContext = Generic_parameter_listContext;

CadenceParser.prototype.generic_parameter_list = function() {

    var localctx = new Generic_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CadenceParser.RULE_generic_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 994;
        this.generic_parameter();
        this.state = 999;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 995;
            this.match(CadenceParser.COMMA);
            this.state = 996;
            this.generic_parameter();
            this.state = 1001;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_parameter;
    return this;
}

Generic_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_parameterContext.prototype.constructor = Generic_parameterContext;

Generic_parameterContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Generic_parameterContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Generic_parameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Generic_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_parameter(this);
	}
};

Generic_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_parameter(this);
	}
};




CadenceParser.Generic_parameterContext = Generic_parameterContext;

CadenceParser.prototype.generic_parameter = function() {

    var localctx = new Generic_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CadenceParser.RULE_generic_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1002;
        this.type_name();
        this.state = 1005;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 1003;
            this.match(CadenceParser.COLON);
            this.state = 1004;
            this.type(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_parameter_clause;
    return this;
}

Parameter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_clauseContext.prototype.constructor = Parameter_clauseContext;

Parameter_clauseContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Parameter_clauseContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Parameter_clauseContext.prototype.parameter_list = function() {
    return this.getTypedRuleContext(Parameter_listContext,0);
};

Parameter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterParameter_clause(this);
	}
};

Parameter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitParameter_clause(this);
	}
};




CadenceParser.Parameter_clauseContext = Parameter_clauseContext;

CadenceParser.prototype.parameter_clause = function() {

    var localctx = new Parameter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CadenceParser.RULE_parameter_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1007;
        this.match(CadenceParser.LPAREN);
        this.state = 1009;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.STRING_TYPE) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CadenceParser.GETTER - 140)) | (1 << (CadenceParser.SETTER - 140)) | (1 << (CadenceParser.Identifier - 140)))) !== 0) || _la===CadenceParser.BACKTICK) {
            this.state = 1008;
            this.parameter_list();
        }

        this.state = 1011;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_parameter_list;
    return this;
}

Parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_listContext.prototype.constructor = Parameter_listContext;

Parameter_listContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Parameter_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterParameter_list(this);
	}
};

Parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitParameter_list(this);
	}
};




CadenceParser.Parameter_listContext = Parameter_listContext;

CadenceParser.prototype.parameter_list = function() {

    var localctx = new Parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CadenceParser.RULE_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1013;
        this.parameter();
        this.state = 1018;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 1014;
            this.match(CadenceParser.COMMA);
            this.state = 1015;
            this.parameter();
            this.state = 1020;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

ParameterContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

ParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitParameter(this);
	}
};




CadenceParser.ParameterContext = ParameterContext;

CadenceParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CadenceParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1021;
        this.type_name();
        this.state = 1024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 1022;
            this.match(CadenceParser.COLON);
            this.state = 1023;
            this.type(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.loop_statement = function() {
    return this.getTypedRuleContext(Loop_statementContext,0);
};

StatementContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementContext.prototype.assignment_statement = function() {
    return this.getTypedRuleContext(Assignment_statementContext,0);
};

StatementContext.prototype.branch_statement = function() {
    return this.getTypedRuleContext(Branch_statementContext,0);
};

StatementContext.prototype.labeled_statement = function() {
    return this.getTypedRuleContext(Labeled_statementContext,0);
};

StatementContext.prototype.control_transfer_statement = function() {
    return this.getTypedRuleContext(Control_transfer_statementContext,0);
};

StatementContext.prototype.do_statement = function() {
    return this.getTypedRuleContext(Do_statementContext,0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.SEMI = function() {
    return this.getToken(CadenceParser.SEMI, 0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStatement(this);
	}
};




CadenceParser.StatementContext = StatementContext;

CadenceParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CadenceParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1034;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1026;
            this.loop_statement();
            break;

        case 2:
            this.state = 1027;
            this.declaration();
            break;

        case 3:
            this.state = 1028;
            this.assignment_statement();
            break;

        case 4:
            this.state = 1029;
            this.branch_statement();
            break;

        case 5:
            this.state = 1030;
            this.labeled_statement();
            break;

        case 6:
            this.state = 1031;
            this.control_transfer_statement();
            break;

        case 7:
            this.state = 1032;
            this.do_statement();
            break;

        case 8:
            this.state = 1033;
            this.expression();
            break;

        }
        this.state = 1037;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.SEMI) {
            this.state = 1036;
            this.match(CadenceParser.SEMI);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStatements(this);
	}
};




CadenceParser.StatementsContext = StatementsContext;

CadenceParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CadenceParser.RULE_statements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1040; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1039;
        		this.statement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1042; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,64, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Assignment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_assignment_statement;
    return this;
}

Assignment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_statementContext.prototype.constructor = Assignment_statementContext;

Assignment_statementContext.prototype.assignment_operator = function() {
    return this.getTypedRuleContext(Assignment_operatorContext,0);
};

Assignment_statementContext.prototype.variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableContext);
    } else {
        return this.getTypedRuleContext(VariableContext,i);
    }
};

Assignment_statementContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Assignment_statementContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Assignment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterAssignment_statement(this);
	}
};

Assignment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitAssignment_statement(this);
	}
};




CadenceParser.Assignment_statementContext = Assignment_statementContext;

CadenceParser.prototype.assignment_statement = function() {

    var localctx = new Assignment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CadenceParser.RULE_assignment_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1046;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1044;
            this.variable();
            break;

        case 2:
            this.state = 1045;
            this.variable_declaration();
            break;

        }
        this.state = 1048;
        this.assignment_operator();
        this.state = 1051;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.AS:
        case CadenceParser.ALPHA:
        case CadenceParser.CATCH:
        case CadenceParser.CLASS:
        case CadenceParser.DEFAULT:
        case CadenceParser.DO:
        case CadenceParser.GUARD:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHERE:
        case CadenceParser.WHILE:
        case CadenceParser.PROTOCOL:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.WILL_SET:
        case CadenceParser.DID_SET:
        case CadenceParser.INDIRECT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.LEFT:
        case CadenceParser.RIGHT:
        case CadenceParser.NONE:
        case CadenceParser.PRECEDENCE_GROUP:
        case CadenceParser.HIGHER_THAN:
        case CadenceParser.LOWER_THAN:
        case CadenceParser.ASSIGNMENT:
        case CadenceParser.ASSOCIATIVITY:
        case CadenceParser.POSTFIX:
        case CadenceParser.OPERATOR:
        case CadenceParser.OS:
        case CadenceParser.ARCH:
        case CadenceParser.SWIFT:
        case CadenceParser.COMPILER:
        case CadenceParser.CAN_IMPORT:
        case CadenceParser.TARGET_ENVIRONMENT:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.SAFE:
        case CadenceParser.UNSAFE:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.RED:
        case CadenceParser.BLUE:
        case CadenceParser.GREEN:
        case CadenceParser.RESOURCE_NAME:
        case CadenceParser.SOME:
        case CadenceParser.TYPE:
        case CadenceParser.PRECEDENCE:
        case CadenceParser.SELF:
        case CadenceParser.SELF_BIG:
        case CadenceParser.MAC_OS:
        case CadenceParser.I_OS:
        case CadenceParser.OSX:
        case CadenceParser.WATCH_OS:
        case CadenceParser.TV_OS:
        case CadenceParser.LINUX:
        case CadenceParser.WINDOWS:
        case CadenceParser.I386:
        case CadenceParser.X86_64:
        case CadenceParser.ARM:
        case CadenceParser.ARM64:
        case CadenceParser.SIMULATOR:
        case CadenceParser.MAC_CATALYST:
        case CadenceParser.I_OS_APPLICATION_EXTENSION:
        case CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION:
        case CadenceParser.MAC_OS_APPLICATION_EXTENSION:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.GETTER:
        case CadenceParser.SETTER:
        case CadenceParser.Identifier:
        case CadenceParser.BACKTICK:
            this.state = 1049;
            this.variable();
            break;
        case CadenceParser.FALSE:
        case CadenceParser.TRUE:
        case CadenceParser.NIL:
        case CadenceParser.LBRACK:
        case CadenceParser.SUB:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
        case CadenceParser.Multi_line_extended_string_open:
        case CadenceParser.Single_line_extended_string_open:
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.state = 1050;
            this.literal_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Assignment_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_assignment_operator;
    return this;
}

Assignment_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_operatorContext.prototype.constructor = Assignment_operatorContext;

Assignment_operatorContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Assignment_operatorContext.prototype.MOVE = function() {
    return this.getToken(CadenceParser.MOVE, 0);
};

Assignment_operatorContext.prototype.FORCE_MOVE = function() {
    return this.getToken(CadenceParser.FORCE_MOVE, 0);
};

Assignment_operatorContext.prototype.SWAP = function() {
    return this.getToken(CadenceParser.SWAP, 0);
};

Assignment_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterAssignment_operator(this);
	}
};

Assignment_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitAssignment_operator(this);
	}
};




CadenceParser.Assignment_operatorContext = Assignment_operatorContext;

CadenceParser.prototype.assignment_operator = function() {

    var localctx = new Assignment_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CadenceParser.RULE_assignment_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1053;
        _la = this._input.LA(1);
        if(!(((((_la - 161)) & ~0x1f) == 0 && ((1 << (_la - 161)) & ((1 << (CadenceParser.EQUAL - 161)) | (1 << (CadenceParser.MOVE - 161)) | (1 << (CadenceParser.FORCE_MOVE - 161)) | (1 << (CadenceParser.SWAP - 161)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_literal_expression;
    return this;
}

Literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_expressionContext.prototype.constructor = Literal_expressionContext;

Literal_expressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

Literal_expressionContext.prototype.array_literal = function() {
    return this.getTypedRuleContext(Array_literalContext,0);
};

Literal_expressionContext.prototype.dictionary_literal = function() {
    return this.getTypedRuleContext(Dictionary_literalContext,0);
};

Literal_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLiteral_expression(this);
	}
};

Literal_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLiteral_expression(this);
	}
};




CadenceParser.Literal_expressionContext = Literal_expressionContext;

CadenceParser.prototype.literal_expression = function() {

    var localctx = new Literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CadenceParser.RULE_literal_expression);
    try {
        this.state = 1058;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1055;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1056;
            this.array_literal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1057;
            this.dictionary_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_array_literal;
    return this;
}

Array_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_literalContext.prototype.constructor = Array_literalContext;

Array_literalContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Array_literalContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Array_literalContext.prototype.array_literal_items = function() {
    return this.getTypedRuleContext(Array_literal_itemsContext,0);
};

Array_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArray_literal(this);
	}
};

Array_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArray_literal(this);
	}
};




CadenceParser.Array_literalContext = Array_literalContext;

CadenceParser.prototype.array_literal = function() {

    var localctx = new Array_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CadenceParser.RULE_array_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1060;
        this.match(CadenceParser.LBRACK);
        this.state = 1062;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (CadenceParser.SUPER - 87)) | (1 << (CadenceParser.FALSE - 87)) | (1 << (CadenceParser.TRUE - 87)) | (1 << (CadenceParser.NIL - 87)) | (1 << (CadenceParser.SELF - 87)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CadenceParser.HASH_SELECTOR - 135)) | (1 << (CadenceParser.HASH_KEYPATH - 135)) | (1 << (CadenceParser.DOT - 135)) | (1 << (CadenceParser.LCURLY - 135)) | (1 << (CadenceParser.LPAREN - 135)) | (1 << (CadenceParser.LBRACK - 135)) | (1 << (CadenceParser.LT - 135)) | (1 << (CadenceParser.GT - 135)) | (1 << (CadenceParser.UNDERSCORE - 135)) | (1 << (CadenceParser.BANG - 135)) | (1 << (CadenceParser.QUESTION - 135)) | (1 << (CadenceParser.AND - 135)) | (1 << (CadenceParser.SUB - 135)) | (1 << (CadenceParser.EQUAL - 135)) | (1 << (CadenceParser.OR - 135)) | (1 << (CadenceParser.DIV - 135)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CadenceParser.ADD - 167)) | (1 << (CadenceParser.MUL - 167)) | (1 << (CadenceParser.MOD - 167)) | (1 << (CadenceParser.CARET - 167)) | (1 << (CadenceParser.TILDE - 167)) | (1 << (CadenceParser.BACKSLASH - 167)) | (1 << (CadenceParser.Operator_head_other - 167)) | (1 << (CadenceParser.Binary_literal - 167)) | (1 << (CadenceParser.Octal_literal - 167)) | (1 << (CadenceParser.Decimal_digits - 167)) | (1 << (CadenceParser.Decimal_literal - 167)) | (1 << (CadenceParser.Hexadecimal_literal - 167)) | (1 << (CadenceParser.Floating_point_literal - 167)) | (1 << (CadenceParser.Multi_line_extended_string_open - 167)) | (1 << (CadenceParser.Single_line_extended_string_open - 167)) | (1 << (CadenceParser.Multi_line_string_open - 167)) | (1 << (CadenceParser.Single_line_string_open - 167)))) !== 0)) {
            this.state = 1061;
            this.array_literal_items();
        }

        this.state = 1064;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_literal_itemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_array_literal_items;
    return this;
}

Array_literal_itemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_literal_itemsContext.prototype.constructor = Array_literal_itemsContext;

Array_literal_itemsContext.prototype.array_literal_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Array_literal_itemContext);
    } else {
        return this.getTypedRuleContext(Array_literal_itemContext,i);
    }
};

Array_literal_itemsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Array_literal_itemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArray_literal_items(this);
	}
};

Array_literal_itemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArray_literal_items(this);
	}
};




CadenceParser.Array_literal_itemsContext = Array_literal_itemsContext;

CadenceParser.prototype.array_literal_items = function() {

    var localctx = new Array_literal_itemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CadenceParser.RULE_array_literal_items);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1066;
        this.array_literal_item();
        this.state = 1071;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1067;
                this.match(CadenceParser.COMMA);
                this.state = 1068;
                this.array_literal_item(); 
            }
            this.state = 1073;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

        this.state = 1075;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COMMA) {
            this.state = 1074;
            this.match(CadenceParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_literal_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_array_literal_item;
    return this;
}

Array_literal_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_literal_itemContext.prototype.constructor = Array_literal_itemContext;

Array_literal_itemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Array_literal_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArray_literal_item(this);
	}
};

Array_literal_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArray_literal_item(this);
	}
};




CadenceParser.Array_literal_itemContext = Array_literal_itemContext;

CadenceParser.prototype.array_literal_item = function() {

    var localctx = new Array_literal_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CadenceParser.RULE_array_literal_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1077;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dictionary_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dictionary_literal;
    return this;
}

Dictionary_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dictionary_literalContext.prototype.constructor = Dictionary_literalContext;

Dictionary_literalContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Dictionary_literalContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Dictionary_literalContext.prototype.dictionary_literal_items = function() {
    return this.getTypedRuleContext(Dictionary_literal_itemsContext,0);
};

Dictionary_literalContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Dictionary_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDictionary_literal(this);
	}
};

Dictionary_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDictionary_literal(this);
	}
};




CadenceParser.Dictionary_literalContext = Dictionary_literalContext;

CadenceParser.prototype.dictionary_literal = function() {

    var localctx = new Dictionary_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CadenceParser.RULE_dictionary_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1079;
        this.match(CadenceParser.LBRACK);
        this.state = 1082;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.SUPER:
        case CadenceParser.FALSE:
        case CadenceParser.TRUE:
        case CadenceParser.NIL:
        case CadenceParser.SELF:
        case CadenceParser.HASH_SELECTOR:
        case CadenceParser.HASH_KEYPATH:
        case CadenceParser.DOT:
        case CadenceParser.LCURLY:
        case CadenceParser.LPAREN:
        case CadenceParser.LBRACK:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.UNDERSCORE:
        case CadenceParser.BANG:
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.BACKSLASH:
        case CadenceParser.Operator_head_other:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
        case CadenceParser.Multi_line_extended_string_open:
        case CadenceParser.Single_line_extended_string_open:
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.state = 1080;
            this.dictionary_literal_items();
            break;
        case CadenceParser.COLON:
            this.state = 1081;
            this.match(CadenceParser.COLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1084;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dictionary_literal_itemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dictionary_literal_items;
    return this;
}

Dictionary_literal_itemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dictionary_literal_itemsContext.prototype.constructor = Dictionary_literal_itemsContext;

Dictionary_literal_itemsContext.prototype.dictionary_literal_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dictionary_literal_itemContext);
    } else {
        return this.getTypedRuleContext(Dictionary_literal_itemContext,i);
    }
};

Dictionary_literal_itemsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Dictionary_literal_itemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDictionary_literal_items(this);
	}
};

Dictionary_literal_itemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDictionary_literal_items(this);
	}
};




CadenceParser.Dictionary_literal_itemsContext = Dictionary_literal_itemsContext;

CadenceParser.prototype.dictionary_literal_items = function() {

    var localctx = new Dictionary_literal_itemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CadenceParser.RULE_dictionary_literal_items);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1086;
        this.dictionary_literal_item();
        this.state = 1091;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1087;
                this.match(CadenceParser.COMMA);
                this.state = 1088;
                this.dictionary_literal_item(); 
            }
            this.state = 1093;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
        }

        this.state = 1095;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COMMA) {
            this.state = 1094;
            this.match(CadenceParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dictionary_literal_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dictionary_literal_item;
    return this;
}

Dictionary_literal_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dictionary_literal_itemContext.prototype.constructor = Dictionary_literal_itemContext;

Dictionary_literal_itemContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Dictionary_literal_itemContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Dictionary_literal_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDictionary_literal_item(this);
	}
};

Dictionary_literal_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDictionary_literal_item(this);
	}
};




CadenceParser.Dictionary_literal_itemContext = Dictionary_literal_itemContext;

CadenceParser.prototype.dictionary_literal_item = function() {

    var localctx = new Dictionary_literal_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CadenceParser.RULE_dictionary_literal_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1097;
        this.expression();
        this.state = 1098;
        this.match(CadenceParser.COLON);
        this.state = 1099;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Getter_setter_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_getter_setter_block;
    return this;
}

Getter_setter_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Getter_setter_blockContext.prototype.constructor = Getter_setter_blockContext;

Getter_setter_blockContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Getter_setter_blockContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Getter_setter_blockContext.prototype.getter_clause = function() {
    return this.getTypedRuleContext(Getter_clauseContext,0);
};

Getter_setter_blockContext.prototype.setter_clause = function() {
    return this.getTypedRuleContext(Setter_clauseContext,0);
};

Getter_setter_blockContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Getter_setter_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGetter_setter_block(this);
	}
};

Getter_setter_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGetter_setter_block(this);
	}
};




CadenceParser.Getter_setter_blockContext = Getter_setter_blockContext;

CadenceParser.prototype.getter_setter_block = function() {

    var localctx = new Getter_setter_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CadenceParser.RULE_getter_setter_block);
    var _la = 0; // Token type
    try {
        this.state = 1114;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1101;
            this.match(CadenceParser.LCURLY);
            this.state = 1109;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1102;
                this.getter_clause();
                this.state = 1104;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CadenceParser.SET || _la===CadenceParser.MUTATING || _la===CadenceParser.NONMUTATING) {
                    this.state = 1103;
                    this.setter_clause();
                }

                break;

            case 2:
                this.state = 1106;
                this.setter_clause();
                this.state = 1107;
                this.getter_clause();
                break;

            }
            this.state = 1111;
            this.match(CadenceParser.RCURLY);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1113;
            this.code_block();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Getter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_getter_clause;
    return this;
}

Getter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Getter_clauseContext.prototype.constructor = Getter_clauseContext;

Getter_clauseContext.prototype.GET = function() {
    return this.getToken(CadenceParser.GET, 0);
};

Getter_clauseContext.prototype.mutation_modifier = function() {
    return this.getTypedRuleContext(Mutation_modifierContext,0);
};

Getter_clauseContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Getter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGetter_clause(this);
	}
};

Getter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGetter_clause(this);
	}
};




CadenceParser.Getter_clauseContext = Getter_clauseContext;

CadenceParser.prototype.getter_clause = function() {

    var localctx = new Getter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CadenceParser.RULE_getter_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1117;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.MUTATING || _la===CadenceParser.NONMUTATING) {
            this.state = 1116;
            this.mutation_modifier();
        }

        this.state = 1119;
        this.match(CadenceParser.GET);
        this.state = 1121;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LCURLY) {
            this.state = 1120;
            this.code_block();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Setter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_setter_clause;
    return this;
}

Setter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setter_clauseContext.prototype.constructor = Setter_clauseContext;

Setter_clauseContext.prototype.SET = function() {
    return this.getToken(CadenceParser.SET, 0);
};

Setter_clauseContext.prototype.mutation_modifier = function() {
    return this.getTypedRuleContext(Mutation_modifierContext,0);
};

Setter_clauseContext.prototype.setter_name = function() {
    return this.getTypedRuleContext(Setter_nameContext,0);
};

Setter_clauseContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Setter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSetter_clause(this);
	}
};

Setter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSetter_clause(this);
	}
};




CadenceParser.Setter_clauseContext = Setter_clauseContext;

CadenceParser.prototype.setter_clause = function() {

    var localctx = new Setter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CadenceParser.RULE_setter_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.MUTATING || _la===CadenceParser.NONMUTATING) {
            this.state = 1123;
            this.mutation_modifier();
        }

        this.state = 1126;
        this.match(CadenceParser.SET);
        this.state = 1128;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LPAREN) {
            this.state = 1127;
            this.setter_name();
        }

        this.state = 1131;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LCURLY) {
            this.state = 1130;
            this.code_block();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Setter_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_setter_name;
    return this;
}

Setter_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setter_nameContext.prototype.constructor = Setter_nameContext;

Setter_nameContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Setter_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Setter_nameContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Setter_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSetter_name(this);
	}
};

Setter_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSetter_name(this);
	}
};




CadenceParser.Setter_nameContext = Setter_nameContext;

CadenceParser.prototype.setter_name = function() {

    var localctx = new Setter_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CadenceParser.RULE_setter_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1133;
        this.match(CadenceParser.LPAREN);
        this.state = 1134;
        this.identifier();
        this.state = 1135;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Getter_setter_keyword_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_getter_setter_keyword_block;
    return this;
}

Getter_setter_keyword_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Getter_setter_keyword_blockContext.prototype.constructor = Getter_setter_keyword_blockContext;

Getter_setter_keyword_blockContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Getter_setter_keyword_blockContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Getter_setter_keyword_blockContext.prototype.getter_keyword_clause = function() {
    return this.getTypedRuleContext(Getter_keyword_clauseContext,0);
};

Getter_setter_keyword_blockContext.prototype.setter_keyword_clause = function() {
    return this.getTypedRuleContext(Setter_keyword_clauseContext,0);
};

Getter_setter_keyword_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGetter_setter_keyword_block(this);
	}
};

Getter_setter_keyword_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGetter_setter_keyword_block(this);
	}
};




CadenceParser.Getter_setter_keyword_blockContext = Getter_setter_keyword_blockContext;

CadenceParser.prototype.getter_setter_keyword_block = function() {

    var localctx = new Getter_setter_keyword_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CadenceParser.RULE_getter_setter_keyword_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1137;
        this.match(CadenceParser.LCURLY);
        this.state = 1145;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1138;
            this.getter_keyword_clause();
            this.state = 1140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.SET || _la===CadenceParser.MUTATING || _la===CadenceParser.NONMUTATING) {
                this.state = 1139;
                this.setter_keyword_clause();
            }

            break;

        case 2:
            this.state = 1142;
            this.setter_keyword_clause();
            this.state = 1143;
            this.getter_keyword_clause();
            break;

        }
        this.state = 1147;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Getter_keyword_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_getter_keyword_clause;
    return this;
}

Getter_keyword_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Getter_keyword_clauseContext.prototype.constructor = Getter_keyword_clauseContext;

Getter_keyword_clauseContext.prototype.GET = function() {
    return this.getToken(CadenceParser.GET, 0);
};

Getter_keyword_clauseContext.prototype.mutation_modifier = function() {
    return this.getTypedRuleContext(Mutation_modifierContext,0);
};

Getter_keyword_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGetter_keyword_clause(this);
	}
};

Getter_keyword_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGetter_keyword_clause(this);
	}
};




CadenceParser.Getter_keyword_clauseContext = Getter_keyword_clauseContext;

CadenceParser.prototype.getter_keyword_clause = function() {

    var localctx = new Getter_keyword_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CadenceParser.RULE_getter_keyword_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1150;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.MUTATING || _la===CadenceParser.NONMUTATING) {
            this.state = 1149;
            this.mutation_modifier();
        }

        this.state = 1152;
        this.match(CadenceParser.GET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Setter_keyword_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_setter_keyword_clause;
    return this;
}

Setter_keyword_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Setter_keyword_clauseContext.prototype.constructor = Setter_keyword_clauseContext;

Setter_keyword_clauseContext.prototype.SET = function() {
    return this.getToken(CadenceParser.SET, 0);
};

Setter_keyword_clauseContext.prototype.mutation_modifier = function() {
    return this.getTypedRuleContext(Mutation_modifierContext,0);
};

Setter_keyword_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSetter_keyword_clause(this);
	}
};

Setter_keyword_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSetter_keyword_clause(this);
	}
};




CadenceParser.Setter_keyword_clauseContext = Setter_keyword_clauseContext;

CadenceParser.prototype.setter_keyword_clause = function() {

    var localctx = new Setter_keyword_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CadenceParser.RULE_setter_keyword_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.MUTATING || _la===CadenceParser.NONMUTATING) {
            this.state = 1154;
            this.mutation_modifier();
        }

        this.state = 1157;
        this.match(CadenceParser.SET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WillSet_didSet_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_willSet_didSet_block;
    return this;
}

WillSet_didSet_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WillSet_didSet_blockContext.prototype.constructor = WillSet_didSet_blockContext;

WillSet_didSet_blockContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

WillSet_didSet_blockContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

WillSet_didSet_blockContext.prototype.willSet_clause = function() {
    return this.getTypedRuleContext(WillSet_clauseContext,0);
};

WillSet_didSet_blockContext.prototype.didSet_clause = function() {
    return this.getTypedRuleContext(DidSet_clauseContext,0);
};

WillSet_didSet_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterWillSet_didSet_block(this);
	}
};

WillSet_didSet_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitWillSet_didSet_block(this);
	}
};




CadenceParser.WillSet_didSet_blockContext = WillSet_didSet_blockContext;

CadenceParser.prototype.willSet_didSet_block = function() {

    var localctx = new WillSet_didSet_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CadenceParser.RULE_willSet_didSet_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1159;
        this.match(CadenceParser.LCURLY);
        this.state = 1168;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.WILL_SET:
            this.state = 1160;
            this.willSet_clause();
            this.state = 1162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.DID_SET) {
                this.state = 1161;
                this.didSet_clause();
            }

            break;
        case CadenceParser.DID_SET:
            this.state = 1164;
            this.didSet_clause();
            this.state = 1166;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.WILL_SET) {
                this.state = 1165;
                this.willSet_clause();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1170;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WillSet_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_willSet_clause;
    return this;
}

WillSet_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WillSet_clauseContext.prototype.constructor = WillSet_clauseContext;

WillSet_clauseContext.prototype.WILL_SET = function() {
    return this.getToken(CadenceParser.WILL_SET, 0);
};

WillSet_clauseContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

WillSet_clauseContext.prototype.setter_name = function() {
    return this.getTypedRuleContext(Setter_nameContext,0);
};

WillSet_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterWillSet_clause(this);
	}
};

WillSet_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitWillSet_clause(this);
	}
};




CadenceParser.WillSet_clauseContext = WillSet_clauseContext;

CadenceParser.prototype.willSet_clause = function() {

    var localctx = new WillSet_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CadenceParser.RULE_willSet_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1172;
        this.match(CadenceParser.WILL_SET);
        this.state = 1174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LPAREN) {
            this.state = 1173;
            this.setter_name();
        }

        this.state = 1176;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DidSet_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_didSet_clause;
    return this;
}

DidSet_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DidSet_clauseContext.prototype.constructor = DidSet_clauseContext;

DidSet_clauseContext.prototype.DID_SET = function() {
    return this.getToken(CadenceParser.DID_SET, 0);
};

DidSet_clauseContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

DidSet_clauseContext.prototype.setter_name = function() {
    return this.getTypedRuleContext(Setter_nameContext,0);
};

DidSet_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDidSet_clause(this);
	}
};

DidSet_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDidSet_clause(this);
	}
};




CadenceParser.DidSet_clauseContext = DidSet_clauseContext;

CadenceParser.prototype.didSet_clause = function() {

    var localctx = new DidSet_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CadenceParser.RULE_didSet_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1178;
        this.match(CadenceParser.DID_SET);
        this.state = 1180;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LPAREN) {
            this.state = 1179;
            this.setter_name();
        }

        this.state = 1182;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Typealias_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_typealias_declaration;
    return this;
}

Typealias_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typealias_declarationContext.prototype.constructor = Typealias_declarationContext;

Typealias_declarationContext.prototype.TYPEALIAS = function() {
    return this.getToken(CadenceParser.TYPEALIAS, 0);
};

Typealias_declarationContext.prototype.typealias_name = function() {
    return this.getTypedRuleContext(Typealias_nameContext,0);
};

Typealias_declarationContext.prototype.typealias_assignment = function() {
    return this.getTypedRuleContext(Typealias_assignmentContext,0);
};

Typealias_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Typealias_declarationContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Typealias_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTypealias_declaration(this);
	}
};

Typealias_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTypealias_declaration(this);
	}
};




CadenceParser.Typealias_declarationContext = Typealias_declarationContext;

CadenceParser.prototype.typealias_declaration = function() {

    var localctx = new Typealias_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CadenceParser.RULE_typealias_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1185;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
            this.state = 1184;
            this.access_level_modifier();
        }

        this.state = 1187;
        this.match(CadenceParser.TYPEALIAS);
        this.state = 1188;
        this.typealias_name();
        this.state = 1190;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 1189;
            this.generic_parameter_clause();
        }

        this.state = 1192;
        this.typealias_assignment();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Typealias_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_typealias_name;
    return this;
}

Typealias_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typealias_nameContext.prototype.constructor = Typealias_nameContext;

Typealias_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Typealias_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTypealias_name(this);
	}
};

Typealias_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTypealias_name(this);
	}
};




CadenceParser.Typealias_nameContext = Typealias_nameContext;

CadenceParser.prototype.typealias_name = function() {

    var localctx = new Typealias_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CadenceParser.RULE_typealias_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1194;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Typealias_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_typealias_assignment;
    return this;
}

Typealias_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typealias_assignmentContext.prototype.constructor = Typealias_assignmentContext;

Typealias_assignmentContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Typealias_assignmentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Typealias_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTypealias_assignment(this);
	}
};

Typealias_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTypealias_assignment(this);
	}
};




CadenceParser.Typealias_assignmentContext = Typealias_assignmentContext;

CadenceParser.prototype.typealias_assignment = function() {

    var localctx = new Typealias_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CadenceParser.RULE_typealias_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1196;
        this.match(CadenceParser.EQUAL);
        this.state = 1197;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enum_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_enum_declaration;
    return this;
}

Enum_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_declarationContext.prototype.constructor = Enum_declarationContext;

Enum_declarationContext.prototype.union_style_enum = function() {
    return this.getTypedRuleContext(Union_style_enumContext,0);
};

Enum_declarationContext.prototype.raw_value_style_enum = function() {
    return this.getTypedRuleContext(Raw_value_style_enumContext,0);
};

Enum_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Enum_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterEnum_declaration(this);
	}
};

Enum_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitEnum_declaration(this);
	}
};




CadenceParser.Enum_declarationContext = Enum_declarationContext;

CadenceParser.prototype.enum_declaration = function() {

    var localctx = new Enum_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CadenceParser.RULE_enum_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
            this.state = 1199;
            this.access_level_modifier();
        }

        this.state = 1204;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1202;
            this.union_style_enum();
            break;

        case 2:
            this.state = 1203;
            this.raw_value_style_enum();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Union_style_enumContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_union_style_enum;
    return this;
}

Union_style_enumContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Union_style_enumContext.prototype.constructor = Union_style_enumContext;

Union_style_enumContext.prototype.ENUM = function() {
    return this.getToken(CadenceParser.ENUM, 0);
};

Union_style_enumContext.prototype.enum_name = function() {
    return this.getTypedRuleContext(Enum_nameContext,0);
};

Union_style_enumContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Union_style_enumContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Union_style_enumContext.prototype.INDIRECT = function() {
    return this.getToken(CadenceParser.INDIRECT, 0);
};

Union_style_enumContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Union_style_enumContext.prototype.type_inheritance_clause = function() {
    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
};

Union_style_enumContext.prototype.union_style_enum_members = function() {
    return this.getTypedRuleContext(Union_style_enum_membersContext,0);
};

Union_style_enumContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterUnion_style_enum(this);
	}
};

Union_style_enumContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitUnion_style_enum(this);
	}
};




CadenceParser.Union_style_enumContext = Union_style_enumContext;

CadenceParser.prototype.union_style_enum = function() {

    var localctx = new Union_style_enumContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CadenceParser.RULE_union_style_enum);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1207;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.INDIRECT) {
            this.state = 1206;
            this.match(CadenceParser.INDIRECT);
        }

        this.state = 1209;
        this.match(CadenceParser.ENUM);
        this.state = 1210;
        this.enum_name();
        this.state = 1212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 1211;
            this.generic_parameter_clause();
        }

        this.state = 1215;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 1214;
            this.type_inheritance_clause();
        }

        this.state = 1217;
        this.match(CadenceParser.LCURLY);
        this.state = 1219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CASE) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.POSTFIX - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)))) !== 0)) {
            this.state = 1218;
            this.union_style_enum_members();
        }

        this.state = 1221;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Union_style_enum_membersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_union_style_enum_members;
    return this;
}

Union_style_enum_membersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Union_style_enum_membersContext.prototype.constructor = Union_style_enum_membersContext;

Union_style_enum_membersContext.prototype.union_style_enum_member = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Union_style_enum_memberContext);
    } else {
        return this.getTypedRuleContext(Union_style_enum_memberContext,i);
    }
};

Union_style_enum_membersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterUnion_style_enum_members(this);
	}
};

Union_style_enum_membersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitUnion_style_enum_members(this);
	}
};




CadenceParser.Union_style_enum_membersContext = Union_style_enum_membersContext;

CadenceParser.prototype.union_style_enum_members = function() {

    var localctx = new Union_style_enum_membersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CadenceParser.RULE_union_style_enum_members);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1224; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1223;
            this.union_style_enum_member();
            this.state = 1226; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CASE) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.POSTFIX - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Union_style_enum_memberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_union_style_enum_member;
    return this;
}

Union_style_enum_memberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Union_style_enum_memberContext.prototype.constructor = Union_style_enum_memberContext;

Union_style_enum_memberContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

Union_style_enum_memberContext.prototype.union_style_enum_case_clause = function() {
    return this.getTypedRuleContext(Union_style_enum_case_clauseContext,0);
};

Union_style_enum_memberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterUnion_style_enum_member(this);
	}
};

Union_style_enum_memberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitUnion_style_enum_member(this);
	}
};




CadenceParser.Union_style_enum_memberContext = Union_style_enum_memberContext;

CadenceParser.prototype.union_style_enum_member = function() {

    var localctx = new Union_style_enum_memberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CadenceParser.RULE_union_style_enum_member);
    try {
        this.state = 1230;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1228;
            this.declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1229;
            this.union_style_enum_case_clause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Union_style_enum_case_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_union_style_enum_case_clause;
    return this;
}

Union_style_enum_case_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Union_style_enum_case_clauseContext.prototype.constructor = Union_style_enum_case_clauseContext;

Union_style_enum_case_clauseContext.prototype.CASE = function() {
    return this.getToken(CadenceParser.CASE, 0);
};

Union_style_enum_case_clauseContext.prototype.union_style_enum_case_list = function() {
    return this.getTypedRuleContext(Union_style_enum_case_listContext,0);
};

Union_style_enum_case_clauseContext.prototype.INDIRECT = function() {
    return this.getToken(CadenceParser.INDIRECT, 0);
};

Union_style_enum_case_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterUnion_style_enum_case_clause(this);
	}
};

Union_style_enum_case_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitUnion_style_enum_case_clause(this);
	}
};




CadenceParser.Union_style_enum_case_clauseContext = Union_style_enum_case_clauseContext;

CadenceParser.prototype.union_style_enum_case_clause = function() {

    var localctx = new Union_style_enum_case_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CadenceParser.RULE_union_style_enum_case_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.INDIRECT) {
            this.state = 1232;
            this.match(CadenceParser.INDIRECT);
        }

        this.state = 1235;
        this.match(CadenceParser.CASE);
        this.state = 1236;
        this.union_style_enum_case_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Union_style_enum_case_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_union_style_enum_case_list;
    return this;
}

Union_style_enum_case_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Union_style_enum_case_listContext.prototype.constructor = Union_style_enum_case_listContext;

Union_style_enum_case_listContext.prototype.union_style_enum_case = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Union_style_enum_caseContext);
    } else {
        return this.getTypedRuleContext(Union_style_enum_caseContext,i);
    }
};

Union_style_enum_case_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Union_style_enum_case_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterUnion_style_enum_case_list(this);
	}
};

Union_style_enum_case_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitUnion_style_enum_case_list(this);
	}
};




CadenceParser.Union_style_enum_case_listContext = Union_style_enum_case_listContext;

CadenceParser.prototype.union_style_enum_case_list = function() {

    var localctx = new Union_style_enum_case_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CadenceParser.RULE_union_style_enum_case_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1238;
        this.union_style_enum_case();
        this.state = 1243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 1239;
            this.match(CadenceParser.COMMA);
            this.state = 1240;
            this.union_style_enum_case();
            this.state = 1245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Union_style_enum_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_union_style_enum_case;
    return this;
}

Union_style_enum_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Union_style_enum_caseContext.prototype.constructor = Union_style_enum_caseContext;

Union_style_enum_caseContext.prototype.opaque_type = function() {
    return this.getTypedRuleContext(Opaque_typeContext,0);
};

Union_style_enum_caseContext.prototype.enum_case_name = function() {
    return this.getTypedRuleContext(Enum_case_nameContext,0);
};

Union_style_enum_caseContext.prototype.tuple_type = function() {
    return this.getTypedRuleContext(Tuple_typeContext,0);
};

Union_style_enum_caseContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Union_style_enum_caseContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Union_style_enum_caseContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Union_style_enum_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterUnion_style_enum_case(this);
	}
};

Union_style_enum_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitUnion_style_enum_case(this);
	}
};




CadenceParser.Union_style_enum_caseContext = Union_style_enum_caseContext;

CadenceParser.prototype.union_style_enum_case = function() {

    var localctx = new Union_style_enum_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CadenceParser.RULE_union_style_enum_case);
    try {
        this.state = 1255;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1246;
            this.opaque_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1247;
            this.enum_case_name();
            this.state = 1253;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
            if(la_===1) {
                this.state = 1248;
                this.tuple_type();

            } else if(la_===2) {
                this.state = 1249;
                this.match(CadenceParser.LPAREN);
                this.state = 1250;
                this.type(0);
                this.state = 1251;
                this.match(CadenceParser.RPAREN);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enum_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_enum_name;
    return this;
}

Enum_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_nameContext.prototype.constructor = Enum_nameContext;

Enum_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Enum_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterEnum_name(this);
	}
};

Enum_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitEnum_name(this);
	}
};




CadenceParser.Enum_nameContext = Enum_nameContext;

CadenceParser.prototype.enum_name = function() {

    var localctx = new Enum_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CadenceParser.RULE_enum_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1257;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enum_case_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_enum_case_name;
    return this;
}

Enum_case_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_case_nameContext.prototype.constructor = Enum_case_nameContext;

Enum_case_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Enum_case_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterEnum_case_name(this);
	}
};

Enum_case_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitEnum_case_name(this);
	}
};




CadenceParser.Enum_case_nameContext = Enum_case_nameContext;

CadenceParser.prototype.enum_case_name = function() {

    var localctx = new Enum_case_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CadenceParser.RULE_enum_case_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1259;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Raw_value_style_enumContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_raw_value_style_enum;
    return this;
}

Raw_value_style_enumContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raw_value_style_enumContext.prototype.constructor = Raw_value_style_enumContext;

Raw_value_style_enumContext.prototype.ENUM = function() {
    return this.getToken(CadenceParser.ENUM, 0);
};

Raw_value_style_enumContext.prototype.enum_name = function() {
    return this.getTypedRuleContext(Enum_nameContext,0);
};

Raw_value_style_enumContext.prototype.type_inheritance_clause = function() {
    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
};

Raw_value_style_enumContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Raw_value_style_enumContext.prototype.raw_value_style_enum_members = function() {
    return this.getTypedRuleContext(Raw_value_style_enum_membersContext,0);
};

Raw_value_style_enumContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Raw_value_style_enumContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Raw_value_style_enumContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRaw_value_style_enum(this);
	}
};

Raw_value_style_enumContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRaw_value_style_enum(this);
	}
};




CadenceParser.Raw_value_style_enumContext = Raw_value_style_enumContext;

CadenceParser.prototype.raw_value_style_enum = function() {

    var localctx = new Raw_value_style_enumContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CadenceParser.RULE_raw_value_style_enum);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1261;
        this.match(CadenceParser.ENUM);
        this.state = 1262;
        this.enum_name();
        this.state = 1264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 1263;
            this.generic_parameter_clause();
        }

        this.state = 1266;
        this.type_inheritance_clause();
        this.state = 1267;
        this.match(CadenceParser.LCURLY);
        this.state = 1268;
        this.raw_value_style_enum_members();
        this.state = 1269;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Raw_value_style_enum_membersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_raw_value_style_enum_members;
    return this;
}

Raw_value_style_enum_membersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raw_value_style_enum_membersContext.prototype.constructor = Raw_value_style_enum_membersContext;

Raw_value_style_enum_membersContext.prototype.raw_value_style_enum_member = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Raw_value_style_enum_memberContext);
    } else {
        return this.getTypedRuleContext(Raw_value_style_enum_memberContext,i);
    }
};

Raw_value_style_enum_membersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRaw_value_style_enum_members(this);
	}
};

Raw_value_style_enum_membersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRaw_value_style_enum_members(this);
	}
};




CadenceParser.Raw_value_style_enum_membersContext = Raw_value_style_enum_membersContext;

CadenceParser.prototype.raw_value_style_enum_members = function() {

    var localctx = new Raw_value_style_enum_membersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CadenceParser.RULE_raw_value_style_enum_members);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1272; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1271;
            this.raw_value_style_enum_member();
            this.state = 1274; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CASE) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.POSTFIX - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Raw_value_style_enum_memberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_raw_value_style_enum_member;
    return this;
}

Raw_value_style_enum_memberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raw_value_style_enum_memberContext.prototype.constructor = Raw_value_style_enum_memberContext;

Raw_value_style_enum_memberContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

Raw_value_style_enum_memberContext.prototype.raw_value_style_enum_case_clause = function() {
    return this.getTypedRuleContext(Raw_value_style_enum_case_clauseContext,0);
};

Raw_value_style_enum_memberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRaw_value_style_enum_member(this);
	}
};

Raw_value_style_enum_memberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRaw_value_style_enum_member(this);
	}
};




CadenceParser.Raw_value_style_enum_memberContext = Raw_value_style_enum_memberContext;

CadenceParser.prototype.raw_value_style_enum_member = function() {

    var localctx = new Raw_value_style_enum_memberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CadenceParser.RULE_raw_value_style_enum_member);
    try {
        this.state = 1278;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.ACCESS:
        case CadenceParser.CLASS:
        case CadenceParser.ENUM:
        case CadenceParser.FUNC:
        case CadenceParser.IMPORT:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.LET:
        case CadenceParser.PROTOCOL:
        case CadenceParser.STRUCT:
        case CadenceParser.INDIRECT:
        case CadenceParser.INIT:
        case CadenceParser.DEINIT:
        case CadenceParser.EXTENSION:
        case CadenceParser.SUBSCRIPT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.PRECEDENCE_GROUP:
        case CadenceParser.POSTFIX:
        case CadenceParser.TYPEALIAS:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.STATIC:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.FILE_PRIVATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1276;
            this.declaration();
            break;
        case CadenceParser.CASE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1277;
            this.raw_value_style_enum_case_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Raw_value_style_enum_case_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_raw_value_style_enum_case_clause;
    return this;
}

Raw_value_style_enum_case_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raw_value_style_enum_case_clauseContext.prototype.constructor = Raw_value_style_enum_case_clauseContext;

Raw_value_style_enum_case_clauseContext.prototype.CASE = function() {
    return this.getToken(CadenceParser.CASE, 0);
};

Raw_value_style_enum_case_clauseContext.prototype.raw_value_style_enum_case_list = function() {
    return this.getTypedRuleContext(Raw_value_style_enum_case_listContext,0);
};

Raw_value_style_enum_case_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRaw_value_style_enum_case_clause(this);
	}
};

Raw_value_style_enum_case_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRaw_value_style_enum_case_clause(this);
	}
};




CadenceParser.Raw_value_style_enum_case_clauseContext = Raw_value_style_enum_case_clauseContext;

CadenceParser.prototype.raw_value_style_enum_case_clause = function() {

    var localctx = new Raw_value_style_enum_case_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CadenceParser.RULE_raw_value_style_enum_case_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1280;
        this.match(CadenceParser.CASE);
        this.state = 1281;
        this.raw_value_style_enum_case_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Raw_value_style_enum_case_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_raw_value_style_enum_case_list;
    return this;
}

Raw_value_style_enum_case_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raw_value_style_enum_case_listContext.prototype.constructor = Raw_value_style_enum_case_listContext;

Raw_value_style_enum_case_listContext.prototype.raw_value_style_enum_case = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Raw_value_style_enum_caseContext);
    } else {
        return this.getTypedRuleContext(Raw_value_style_enum_caseContext,i);
    }
};

Raw_value_style_enum_case_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Raw_value_style_enum_case_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRaw_value_style_enum_case_list(this);
	}
};

Raw_value_style_enum_case_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRaw_value_style_enum_case_list(this);
	}
};




CadenceParser.Raw_value_style_enum_case_listContext = Raw_value_style_enum_case_listContext;

CadenceParser.prototype.raw_value_style_enum_case_list = function() {

    var localctx = new Raw_value_style_enum_case_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CadenceParser.RULE_raw_value_style_enum_case_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1283;
        this.raw_value_style_enum_case();
        this.state = 1288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 1284;
            this.match(CadenceParser.COMMA);
            this.state = 1285;
            this.raw_value_style_enum_case();
            this.state = 1290;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Raw_value_style_enum_caseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_raw_value_style_enum_case;
    return this;
}

Raw_value_style_enum_caseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raw_value_style_enum_caseContext.prototype.constructor = Raw_value_style_enum_caseContext;

Raw_value_style_enum_caseContext.prototype.enum_case_name = function() {
    return this.getTypedRuleContext(Enum_case_nameContext,0);
};

Raw_value_style_enum_caseContext.prototype.raw_value_assignment = function() {
    return this.getTypedRuleContext(Raw_value_assignmentContext,0);
};

Raw_value_style_enum_caseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRaw_value_style_enum_case(this);
	}
};

Raw_value_style_enum_caseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRaw_value_style_enum_case(this);
	}
};




CadenceParser.Raw_value_style_enum_caseContext = Raw_value_style_enum_caseContext;

CadenceParser.prototype.raw_value_style_enum_case = function() {

    var localctx = new Raw_value_style_enum_caseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CadenceParser.RULE_raw_value_style_enum_case);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1291;
        this.enum_case_name();
        this.state = 1293;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.EQUAL) {
            this.state = 1292;
            this.raw_value_assignment();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Raw_value_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_raw_value_assignment;
    return this;
}

Raw_value_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raw_value_assignmentContext.prototype.constructor = Raw_value_assignmentContext;

Raw_value_assignmentContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Raw_value_assignmentContext.prototype.raw_value_literal = function() {
    return this.getTypedRuleContext(Raw_value_literalContext,0);
};

Raw_value_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRaw_value_assignment(this);
	}
};

Raw_value_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRaw_value_assignment(this);
	}
};




CadenceParser.Raw_value_assignmentContext = Raw_value_assignmentContext;

CadenceParser.prototype.raw_value_assignment = function() {

    var localctx = new Raw_value_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CadenceParser.RULE_raw_value_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1295;
        this.match(CadenceParser.EQUAL);
        this.state = 1296;
        this.raw_value_literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Raw_value_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_raw_value_literal;
    return this;
}

Raw_value_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raw_value_literalContext.prototype.constructor = Raw_value_literalContext;

Raw_value_literalContext.prototype.numeric_literal = function() {
    return this.getTypedRuleContext(Numeric_literalContext,0);
};

Raw_value_literalContext.prototype.static_string_literal = function() {
    return this.getTypedRuleContext(Static_string_literalContext,0);
};

Raw_value_literalContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

Raw_value_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRaw_value_literal(this);
	}
};

Raw_value_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRaw_value_literal(this);
	}
};




CadenceParser.Raw_value_literalContext = Raw_value_literalContext;

CadenceParser.prototype.raw_value_literal = function() {

    var localctx = new Raw_value_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CadenceParser.RULE_raw_value_literal);
    try {
        this.state = 1301;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.SUB:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
            this.enterOuterAlt(localctx, 1);
            this.state = 1298;
            this.numeric_literal();
            break;
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.enterOuterAlt(localctx, 2);
            this.state = 1299;
            this.static_string_literal();
            break;
        case CadenceParser.FALSE:
        case CadenceParser.TRUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1300;
            this.boolean_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Struct_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_struct_declaration;
    return this;
}

Struct_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_declarationContext.prototype.constructor = Struct_declarationContext;

Struct_declarationContext.prototype.STRUCT = function() {
    return this.getToken(CadenceParser.STRUCT, 0);
};

Struct_declarationContext.prototype.struct_name = function() {
    return this.getTypedRuleContext(Struct_nameContext,0);
};

Struct_declarationContext.prototype.struct_body = function() {
    return this.getTypedRuleContext(Struct_bodyContext,0);
};

Struct_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Struct_declarationContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Struct_declarationContext.prototype.type_inheritance_clause = function() {
    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
};

Struct_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStruct_declaration(this);
	}
};

Struct_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStruct_declaration(this);
	}
};




CadenceParser.Struct_declarationContext = Struct_declarationContext;

CadenceParser.prototype.struct_declaration = function() {

    var localctx = new Struct_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CadenceParser.RULE_struct_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
            this.state = 1303;
            this.access_level_modifier();
        }

        this.state = 1306;
        this.match(CadenceParser.STRUCT);
        this.state = 1307;
        this.struct_name();
        this.state = 1309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 1308;
            this.generic_parameter_clause();
        }

        this.state = 1312;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 1311;
            this.type_inheritance_clause();
        }

        this.state = 1314;
        this.struct_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Struct_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_struct_name;
    return this;
}

Struct_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_nameContext.prototype.constructor = Struct_nameContext;

Struct_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Struct_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStruct_name(this);
	}
};

Struct_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStruct_name(this);
	}
};




CadenceParser.Struct_nameContext = Struct_nameContext;

CadenceParser.prototype.struct_name = function() {

    var localctx = new Struct_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CadenceParser.RULE_struct_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1316;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Struct_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_struct_body;
    return this;
}

Struct_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_bodyContext.prototype.constructor = Struct_bodyContext;

Struct_bodyContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Struct_bodyContext.prototype.struct_members = function() {
    return this.getTypedRuleContext(Struct_membersContext,0);
};

Struct_bodyContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Struct_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStruct_body(this);
	}
};

Struct_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStruct_body(this);
	}
};




CadenceParser.Struct_bodyContext = Struct_bodyContext;

CadenceParser.prototype.struct_body = function() {

    var localctx = new Struct_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CadenceParser.RULE_struct_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1318;
        this.match(CadenceParser.LCURLY);
        this.state = 1319;
        this.struct_members();
        this.state = 1320;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Struct_membersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_struct_members;
    return this;
}

Struct_membersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_membersContext.prototype.constructor = Struct_membersContext;

Struct_membersContext.prototype.struct_member = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Struct_memberContext);
    } else {
        return this.getTypedRuleContext(Struct_memberContext,i);
    }
};

Struct_membersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStruct_members(this);
	}
};

Struct_membersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStruct_members(this);
	}
};




CadenceParser.Struct_membersContext = Struct_membersContext;

CadenceParser.prototype.struct_members = function() {

    var localctx = new Struct_membersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CadenceParser.RULE_struct_members);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1325;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.POSTFIX - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)))) !== 0)) {
            this.state = 1322;
            this.struct_member();
            this.state = 1327;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Struct_memberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_struct_member;
    return this;
}

Struct_memberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_memberContext.prototype.constructor = Struct_memberContext;

Struct_memberContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

Struct_memberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStruct_member(this);
	}
};

Struct_memberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStruct_member(this);
	}
};




CadenceParser.Struct_memberContext = Struct_memberContext;

CadenceParser.prototype.struct_member = function() {

    var localctx = new Struct_memberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CadenceParser.RULE_struct_member);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1328;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_class_declaration;
    return this;
}

Class_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_declarationContext.prototype.constructor = Class_declarationContext;

Class_declarationContext.prototype.CLASS = function() {
    return this.getToken(CadenceParser.CLASS, 0);
};

Class_declarationContext.prototype.class_name = function() {
    return this.getTypedRuleContext(Class_nameContext,0);
};

Class_declarationContext.prototype.class_body = function() {
    return this.getTypedRuleContext(Class_bodyContext,0);
};

Class_declarationContext.prototype.FINAL = function() {
    return this.getToken(CadenceParser.FINAL, 0);
};

Class_declarationContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Class_declarationContext.prototype.type_inheritance_clause = function() {
    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
};

Class_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Class_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClass_declaration(this);
	}
};

Class_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClass_declaration(this);
	}
};




CadenceParser.Class_declarationContext = Class_declarationContext;

CadenceParser.prototype.class_declaration = function() {

    var localctx = new Class_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CadenceParser.RULE_class_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1340;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
                this.state = 1330;
                this.access_level_modifier();
            }

            this.state = 1334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.FINAL) {
                this.state = 1333;
                this.match(CadenceParser.FINAL);
            }

            break;

        case 2:
            this.state = 1336;
            this.match(CadenceParser.FINAL);
            this.state = 1338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
                this.state = 1337;
                this.access_level_modifier();
            }

            break;

        }
        this.state = 1342;
        this.match(CadenceParser.CLASS);
        this.state = 1343;
        this.class_name();
        this.state = 1345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 1344;
            this.generic_parameter_clause();
        }

        this.state = 1348;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 1347;
            this.type_inheritance_clause();
        }

        this.state = 1350;
        this.class_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_class_name;
    return this;
}

Class_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_nameContext.prototype.constructor = Class_nameContext;

Class_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Class_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClass_name(this);
	}
};

Class_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClass_name(this);
	}
};




CadenceParser.Class_nameContext = Class_nameContext;

CadenceParser.prototype.class_name = function() {

    var localctx = new Class_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CadenceParser.RULE_class_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1352;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_class_body;
    return this;
}

Class_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_bodyContext.prototype.constructor = Class_bodyContext;

Class_bodyContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Class_bodyContext.prototype.class_members = function() {
    return this.getTypedRuleContext(Class_membersContext,0);
};

Class_bodyContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Class_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClass_body(this);
	}
};

Class_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClass_body(this);
	}
};




CadenceParser.Class_bodyContext = Class_bodyContext;

CadenceParser.prototype.class_body = function() {

    var localctx = new Class_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CadenceParser.RULE_class_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1354;
        this.match(CadenceParser.LCURLY);
        this.state = 1355;
        this.class_members();
        this.state = 1356;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_membersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_class_members;
    return this;
}

Class_membersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_membersContext.prototype.constructor = Class_membersContext;

Class_membersContext.prototype.class_member = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Class_memberContext);
    } else {
        return this.getTypedRuleContext(Class_memberContext,i);
    }
};

Class_membersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClass_members(this);
	}
};

Class_membersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClass_members(this);
	}
};




CadenceParser.Class_membersContext = Class_membersContext;

CadenceParser.prototype.class_members = function() {

    var localctx = new Class_membersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CadenceParser.RULE_class_members);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.POSTFIX - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)))) !== 0)) {
            this.state = 1358;
            this.class_member();
            this.state = 1363;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Class_memberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_class_member;
    return this;
}

Class_memberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_memberContext.prototype.constructor = Class_memberContext;

Class_memberContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

Class_memberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClass_member(this);
	}
};

Class_memberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClass_member(this);
	}
};




CadenceParser.Class_memberContext = Class_memberContext;

CadenceParser.prototype.class_member = function() {

    var localctx = new Class_memberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, CadenceParser.RULE_class_member);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1364;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_declaration;
    return this;
}

Protocol_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_declarationContext.prototype.constructor = Protocol_declarationContext;

Protocol_declarationContext.prototype.PROTOCOL = function() {
    return this.getToken(CadenceParser.PROTOCOL, 0);
};

Protocol_declarationContext.prototype.protocol_name = function() {
    return this.getTypedRuleContext(Protocol_nameContext,0);
};

Protocol_declarationContext.prototype.protocol_body = function() {
    return this.getTypedRuleContext(Protocol_bodyContext,0);
};

Protocol_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Protocol_declarationContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Protocol_declarationContext.prototype.CLASS = function() {
    return this.getToken(CadenceParser.CLASS, 0);
};

Protocol_declarationContext.prototype.type_inheritance_clause = function() {
    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
};

Protocol_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_declaration(this);
	}
};

Protocol_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_declaration(this);
	}
};




CadenceParser.Protocol_declarationContext = Protocol_declarationContext;

CadenceParser.prototype.protocol_declaration = function() {

    var localctx = new Protocol_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, CadenceParser.RULE_protocol_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1367;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
            this.state = 1366;
            this.access_level_modifier();
        }

        this.state = 1369;
        this.match(CadenceParser.PROTOCOL);
        this.state = 1370;
        this.protocol_name();
        this.state = 1374;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
        if(la_===1) {
            this.state = 1371;
            this.match(CadenceParser.COLON);
            this.state = 1372;
            this.match(CadenceParser.CLASS);

        } else if(la_===2) {
            this.state = 1373;
            this.type_inheritance_clause();

        }
        this.state = 1376;
        this.protocol_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_name;
    return this;
}

Protocol_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_nameContext.prototype.constructor = Protocol_nameContext;

Protocol_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Protocol_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_name(this);
	}
};

Protocol_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_name(this);
	}
};




CadenceParser.Protocol_nameContext = Protocol_nameContext;

CadenceParser.prototype.protocol_name = function() {

    var localctx = new Protocol_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, CadenceParser.RULE_protocol_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1378;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_body;
    return this;
}

Protocol_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_bodyContext.prototype.constructor = Protocol_bodyContext;

Protocol_bodyContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Protocol_bodyContext.prototype.protocol_members = function() {
    return this.getTypedRuleContext(Protocol_membersContext,0);
};

Protocol_bodyContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Protocol_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_body(this);
	}
};

Protocol_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_body(this);
	}
};




CadenceParser.Protocol_bodyContext = Protocol_bodyContext;

CadenceParser.prototype.protocol_body = function() {

    var localctx = new Protocol_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, CadenceParser.RULE_protocol_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1380;
        this.match(CadenceParser.LCURLY);
        this.state = 1381;
        this.protocol_members();
        this.state = 1382;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_membersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_members;
    return this;
}

Protocol_membersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_membersContext.prototype.constructor = Protocol_membersContext;

Protocol_membersContext.prototype.protocol_member = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Protocol_memberContext);
    } else {
        return this.getTypedRuleContext(Protocol_memberContext,i);
    }
};

Protocol_membersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_members(this);
	}
};

Protocol_membersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_members(this);
	}
};




CadenceParser.Protocol_membersContext = Protocol_membersContext;

CadenceParser.prototype.protocol_members = function() {

    var localctx = new Protocol_membersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, CadenceParser.RULE_protocol_members);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1387;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CadenceParser.INIT - 47)) | (1 << (CadenceParser.ASSOCIATED_TYPE - 47)) | (1 << (CadenceParser.SUBSCRIPT - 47)) | (1 << (CadenceParser.PREFIX - 47)) | (1 << (CadenceParser.INFIX - 47)) | (1 << (CadenceParser.POSTFIX - 47)) | (1 << (CadenceParser.TYPEALIAS - 47)) | (1 << (CadenceParser.CONVENIENCE - 47)) | (1 << (CadenceParser.DYNAMIC - 47)) | (1 << (CadenceParser.LAZY - 47)) | (1 << (CadenceParser.OPTIONAL - 47)) | (1 << (CadenceParser.OVERRIDE - 47)) | (1 << (CadenceParser.REQUIRED - 47)) | (1 << (CadenceParser.STATIC - 47)) | (1 << (CadenceParser.WEAK - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CadenceParser.UNOWNED - 79)) | (1 << (CadenceParser.MUTATING - 79)) | (1 << (CadenceParser.NONMUTATING - 79)) | (1 << (CadenceParser.FILE_PRIVATE - 79)))) !== 0)) {
            this.state = 1384;
            this.protocol_member();
            this.state = 1389;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_memberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_member;
    return this;
}

Protocol_memberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_memberContext.prototype.constructor = Protocol_memberContext;

Protocol_memberContext.prototype.protocol_member_declaration = function() {
    return this.getTypedRuleContext(Protocol_member_declarationContext,0);
};

Protocol_memberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_member(this);
	}
};

Protocol_memberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_member(this);
	}
};




CadenceParser.Protocol_memberContext = Protocol_memberContext;

CadenceParser.prototype.protocol_member = function() {

    var localctx = new Protocol_memberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, CadenceParser.RULE_protocol_member);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1390;
        this.protocol_member_declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_member_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_member_declaration;
    return this;
}

Protocol_member_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_member_declarationContext.prototype.constructor = Protocol_member_declarationContext;

Protocol_member_declarationContext.prototype.protocol_property_declaration = function() {
    return this.getTypedRuleContext(Protocol_property_declarationContext,0);
};

Protocol_member_declarationContext.prototype.protocol_method_declaration = function() {
    return this.getTypedRuleContext(Protocol_method_declarationContext,0);
};

Protocol_member_declarationContext.prototype.protocol_initializer_declaration = function() {
    return this.getTypedRuleContext(Protocol_initializer_declarationContext,0);
};

Protocol_member_declarationContext.prototype.protocol_subscript_declaration = function() {
    return this.getTypedRuleContext(Protocol_subscript_declarationContext,0);
};

Protocol_member_declarationContext.prototype.protocol_associated_type_declaration = function() {
    return this.getTypedRuleContext(Protocol_associated_type_declarationContext,0);
};

Protocol_member_declarationContext.prototype.typealias_declaration = function() {
    return this.getTypedRuleContext(Typealias_declarationContext,0);
};

Protocol_member_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_member_declaration(this);
	}
};

Protocol_member_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_member_declaration(this);
	}
};




CadenceParser.Protocol_member_declarationContext = Protocol_member_declarationContext;

CadenceParser.prototype.protocol_member_declaration = function() {

    var localctx = new Protocol_member_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, CadenceParser.RULE_protocol_member_declaration);
    try {
        this.state = 1398;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1392;
            this.protocol_property_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1393;
            this.protocol_method_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1394;
            this.protocol_initializer_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1395;
            this.protocol_subscript_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1396;
            this.protocol_associated_type_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1397;
            this.typealias_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_property_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_property_declaration;
    return this;
}

Protocol_property_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_property_declarationContext.prototype.constructor = Protocol_property_declarationContext;

Protocol_property_declarationContext.prototype.variable_declaration_head = function() {
    return this.getTypedRuleContext(Variable_declaration_headContext,0);
};

Protocol_property_declarationContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Protocol_property_declarationContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

Protocol_property_declarationContext.prototype.getter_setter_keyword_block = function() {
    return this.getTypedRuleContext(Getter_setter_keyword_blockContext,0);
};

Protocol_property_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_property_declaration(this);
	}
};

Protocol_property_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_property_declaration(this);
	}
};




CadenceParser.Protocol_property_declarationContext = Protocol_property_declarationContext;

CadenceParser.prototype.protocol_property_declaration = function() {

    var localctx = new Protocol_property_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, CadenceParser.RULE_protocol_property_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1400;
        this.variable_declaration_head();
        this.state = 1401;
        this.variable_name();
        this.state = 1402;
        this.type_annotation();
        this.state = 1403;
        this.getter_setter_keyword_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_method_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_method_declaration;
    return this;
}

Protocol_method_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_method_declarationContext.prototype.constructor = Protocol_method_declarationContext;

Protocol_method_declarationContext.prototype.function_head = function() {
    return this.getTypedRuleContext(Function_headContext,0);
};

Protocol_method_declarationContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Protocol_method_declarationContext.prototype.function_signature = function() {
    return this.getTypedRuleContext(Function_signatureContext,0);
};

Protocol_method_declarationContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Protocol_method_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_method_declaration(this);
	}
};

Protocol_method_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_method_declaration(this);
	}
};




CadenceParser.Protocol_method_declarationContext = Protocol_method_declarationContext;

CadenceParser.prototype.protocol_method_declaration = function() {

    var localctx = new Protocol_method_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, CadenceParser.RULE_protocol_method_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1405;
        this.function_head();
        this.state = 1406;
        this.function_name();
        this.state = 1408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 1407;
            this.generic_parameter_clause();
        }

        this.state = 1410;
        this.function_signature();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_initializer_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_initializer_declaration;
    return this;
}

Protocol_initializer_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_initializer_declarationContext.prototype.constructor = Protocol_initializer_declarationContext;

Protocol_initializer_declarationContext.prototype.initializer_head = function() {
    return this.getTypedRuleContext(Initializer_headContext,0);
};

Protocol_initializer_declarationContext.prototype.parameter_clause = function() {
    return this.getTypedRuleContext(Parameter_clauseContext,0);
};

Protocol_initializer_declarationContext.prototype.RETHROWS = function() {
    return this.getToken(CadenceParser.RETHROWS, 0);
};

Protocol_initializer_declarationContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Protocol_initializer_declarationContext.prototype.THROWS = function() {
    return this.getToken(CadenceParser.THROWS, 0);
};

Protocol_initializer_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_initializer_declaration(this);
	}
};

Protocol_initializer_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_initializer_declaration(this);
	}
};




CadenceParser.Protocol_initializer_declarationContext = Protocol_initializer_declarationContext;

CadenceParser.prototype.protocol_initializer_declaration = function() {

    var localctx = new Protocol_initializer_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, CadenceParser.RULE_protocol_initializer_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1412;
        this.initializer_head();
        this.state = 1414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 1413;
            this.generic_parameter_clause();
        }

        this.state = 1416;
        this.parameter_clause();
        this.state = 1421;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.ACCESS:
        case CadenceParser.CLASS:
        case CadenceParser.FUNC:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.THROWS:
        case CadenceParser.INIT:
        case CadenceParser.ASSOCIATED_TYPE:
        case CadenceParser.SUBSCRIPT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.POSTFIX:
        case CadenceParser.TYPEALIAS:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.STATIC:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.FILE_PRIVATE:
        case CadenceParser.RCURLY:
            this.state = 1418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.THROWS) {
                this.state = 1417;
                this.match(CadenceParser.THROWS);
            }

            break;
        case CadenceParser.RETHROWS:
            this.state = 1420;
            this.match(CadenceParser.RETHROWS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_subscript_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_subscript_declaration;
    return this;
}

Protocol_subscript_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_subscript_declarationContext.prototype.constructor = Protocol_subscript_declarationContext;

Protocol_subscript_declarationContext.prototype.subscript_head = function() {
    return this.getTypedRuleContext(Subscript_headContext,0);
};

Protocol_subscript_declarationContext.prototype.subscript_result = function() {
    return this.getTypedRuleContext(Subscript_resultContext,0);
};

Protocol_subscript_declarationContext.prototype.getter_setter_keyword_block = function() {
    return this.getTypedRuleContext(Getter_setter_keyword_blockContext,0);
};

Protocol_subscript_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_subscript_declaration(this);
	}
};

Protocol_subscript_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_subscript_declaration(this);
	}
};




CadenceParser.Protocol_subscript_declarationContext = Protocol_subscript_declarationContext;

CadenceParser.prototype.protocol_subscript_declaration = function() {

    var localctx = new Protocol_subscript_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, CadenceParser.RULE_protocol_subscript_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1423;
        this.subscript_head();
        this.state = 1424;
        this.subscript_result();
        this.state = 1425;
        this.getter_setter_keyword_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_associated_type_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_associated_type_declaration;
    return this;
}

Protocol_associated_type_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_associated_type_declarationContext.prototype.constructor = Protocol_associated_type_declarationContext;

Protocol_associated_type_declarationContext.prototype.ASSOCIATED_TYPE = function() {
    return this.getToken(CadenceParser.ASSOCIATED_TYPE, 0);
};

Protocol_associated_type_declarationContext.prototype.typealias_name = function() {
    return this.getTypedRuleContext(Typealias_nameContext,0);
};

Protocol_associated_type_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Protocol_associated_type_declarationContext.prototype.type_inheritance_clause = function() {
    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
};

Protocol_associated_type_declarationContext.prototype.typealias_assignment = function() {
    return this.getTypedRuleContext(Typealias_assignmentContext,0);
};

Protocol_associated_type_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_associated_type_declaration(this);
	}
};

Protocol_associated_type_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_associated_type_declaration(this);
	}
};




CadenceParser.Protocol_associated_type_declarationContext = Protocol_associated_type_declarationContext;

CadenceParser.prototype.protocol_associated_type_declaration = function() {

    var localctx = new Protocol_associated_type_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, CadenceParser.RULE_protocol_associated_type_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1428;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
            this.state = 1427;
            this.access_level_modifier();
        }

        this.state = 1430;
        this.match(CadenceParser.ASSOCIATED_TYPE);
        this.state = 1431;
        this.typealias_name();
        this.state = 1433;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 1432;
            this.type_inheritance_clause();
        }

        this.state = 1436;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.EQUAL) {
            this.state = 1435;
            this.typealias_assignment();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Deinitializer_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_deinitializer_declaration;
    return this;
}

Deinitializer_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Deinitializer_declarationContext.prototype.constructor = Deinitializer_declarationContext;

Deinitializer_declarationContext.prototype.DEINIT = function() {
    return this.getToken(CadenceParser.DEINIT, 0);
};

Deinitializer_declarationContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Deinitializer_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDeinitializer_declaration(this);
	}
};

Deinitializer_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDeinitializer_declaration(this);
	}
};




CadenceParser.Deinitializer_declarationContext = Deinitializer_declarationContext;

CadenceParser.prototype.deinitializer_declaration = function() {

    var localctx = new Deinitializer_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, CadenceParser.RULE_deinitializer_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1438;
        this.match(CadenceParser.DEINIT);
        this.state = 1439;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Extension_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_extension_declaration;
    return this;
}

Extension_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extension_declarationContext.prototype.constructor = Extension_declarationContext;

Extension_declarationContext.prototype.EXTENSION = function() {
    return this.getToken(CadenceParser.EXTENSION, 0);
};

Extension_declarationContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Extension_declarationContext.prototype.extension_body = function() {
    return this.getTypedRuleContext(Extension_bodyContext,0);
};

Extension_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Extension_declarationContext.prototype.type_inheritance_clause = function() {
    return this.getTypedRuleContext(Type_inheritance_clauseContext,0);
};

Extension_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExtension_declaration(this);
	}
};

Extension_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExtension_declaration(this);
	}
};




CadenceParser.Extension_declarationContext = Extension_declarationContext;

CadenceParser.prototype.extension_declaration = function() {

    var localctx = new Extension_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, CadenceParser.RULE_extension_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
            this.state = 1441;
            this.access_level_modifier();
        }

        this.state = 1444;
        this.match(CadenceParser.EXTENSION);
        this.state = 1445;
        this.type_identifier();
        this.state = 1447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 1446;
            this.type_inheritance_clause();
        }

        this.state = 1449;
        this.extension_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Extension_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_extension_body;
    return this;
}

Extension_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extension_bodyContext.prototype.constructor = Extension_bodyContext;

Extension_bodyContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Extension_bodyContext.prototype.extension_members = function() {
    return this.getTypedRuleContext(Extension_membersContext,0);
};

Extension_bodyContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Extension_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExtension_body(this);
	}
};

Extension_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExtension_body(this);
	}
};




CadenceParser.Extension_bodyContext = Extension_bodyContext;

CadenceParser.prototype.extension_body = function() {

    var localctx = new Extension_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, CadenceParser.RULE_extension_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1451;
        this.match(CadenceParser.LCURLY);
        this.state = 1452;
        this.extension_members();
        this.state = 1453;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Extension_membersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_extension_members;
    return this;
}

Extension_membersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extension_membersContext.prototype.constructor = Extension_membersContext;

Extension_membersContext.prototype.extension_member = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Extension_memberContext);
    } else {
        return this.getTypedRuleContext(Extension_memberContext,i);
    }
};

Extension_membersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExtension_members(this);
	}
};

Extension_membersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExtension_members(this);
	}
};




CadenceParser.Extension_membersContext = Extension_membersContext;

CadenceParser.prototype.extension_members = function() {

    var localctx = new Extension_membersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, CadenceParser.RULE_extension_members);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1458;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.POSTFIX - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)))) !== 0)) {
            this.state = 1455;
            this.extension_member();
            this.state = 1460;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Extension_memberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_extension_member;
    return this;
}

Extension_memberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extension_memberContext.prototype.constructor = Extension_memberContext;

Extension_memberContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

Extension_memberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExtension_member(this);
	}
};

Extension_memberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExtension_member(this);
	}
};




CadenceParser.Extension_memberContext = Extension_memberContext;

CadenceParser.prototype.extension_member = function() {

    var localctx = new Extension_memberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, CadenceParser.RULE_extension_member);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1461;
        this.declaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subscript_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_subscript_declaration;
    return this;
}

Subscript_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subscript_declarationContext.prototype.constructor = Subscript_declarationContext;

Subscript_declarationContext.prototype.subscript_head = function() {
    return this.getTypedRuleContext(Subscript_headContext,0);
};

Subscript_declarationContext.prototype.subscript_result = function() {
    return this.getTypedRuleContext(Subscript_resultContext,0);
};

Subscript_declarationContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Subscript_declarationContext.prototype.getter_setter_block = function() {
    return this.getTypedRuleContext(Getter_setter_blockContext,0);
};

Subscript_declarationContext.prototype.getter_setter_keyword_block = function() {
    return this.getTypedRuleContext(Getter_setter_keyword_blockContext,0);
};

Subscript_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSubscript_declaration(this);
	}
};

Subscript_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSubscript_declaration(this);
	}
};




CadenceParser.Subscript_declarationContext = Subscript_declarationContext;

CadenceParser.prototype.subscript_declaration = function() {

    var localctx = new Subscript_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, CadenceParser.RULE_subscript_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1463;
        this.subscript_head();
        this.state = 1464;
        this.subscript_result();
        this.state = 1468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1465;
            this.code_block();
            break;

        case 2:
            this.state = 1466;
            this.getter_setter_block();
            break;

        case 3:
            this.state = 1467;
            this.getter_setter_keyword_block();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subscript_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_subscript_head;
    return this;
}

Subscript_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subscript_headContext.prototype.constructor = Subscript_headContext;

Subscript_headContext.prototype.SUBSCRIPT = function() {
    return this.getToken(CadenceParser.SUBSCRIPT, 0);
};

Subscript_headContext.prototype.parameter_clause = function() {
    return this.getTypedRuleContext(Parameter_clauseContext,0);
};

Subscript_headContext.prototype.declaration_modifiers = function() {
    return this.getTypedRuleContext(Declaration_modifiersContext,0);
};

Subscript_headContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Subscript_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSubscript_head(this);
	}
};

Subscript_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSubscript_head(this);
	}
};




CadenceParser.Subscript_headContext = Subscript_headContext;

CadenceParser.prototype.subscript_head = function() {

    var localctx = new Subscript_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, CadenceParser.RULE_subscript_head);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1471;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (CadenceParser.PREFIX - 52)) | (1 << (CadenceParser.INFIX - 52)) | (1 << (CadenceParser.POSTFIX - 52)) | (1 << (CadenceParser.CONVENIENCE - 52)) | (1 << (CadenceParser.DYNAMIC - 52)) | (1 << (CadenceParser.LAZY - 52)) | (1 << (CadenceParser.OPTIONAL - 52)) | (1 << (CadenceParser.OVERRIDE - 52)) | (1 << (CadenceParser.REQUIRED - 52)) | (1 << (CadenceParser.STATIC - 52)) | (1 << (CadenceParser.WEAK - 52)) | (1 << (CadenceParser.UNOWNED - 52)) | (1 << (CadenceParser.MUTATING - 52)) | (1 << (CadenceParser.NONMUTATING - 52)))) !== 0) || _la===CadenceParser.FILE_PRIVATE) {
            this.state = 1470;
            this.declaration_modifiers();
        }

        this.state = 1473;
        this.match(CadenceParser.SUBSCRIPT);
        this.state = 1475;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 1474;
            this.generic_parameter_clause();
        }

        this.state = 1477;
        this.parameter_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subscript_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_subscript_result;
    return this;
}

Subscript_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subscript_resultContext.prototype.constructor = Subscript_resultContext;

Subscript_resultContext.prototype.arrow_operator = function() {
    return this.getTypedRuleContext(Arrow_operatorContext,0);
};

Subscript_resultContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Subscript_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSubscript_result(this);
	}
};

Subscript_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSubscript_result(this);
	}
};




CadenceParser.Subscript_resultContext = Subscript_resultContext;

CadenceParser.prototype.subscript_result = function() {

    var localctx = new Subscript_resultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, CadenceParser.RULE_subscript_result);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1479;
        this.arrow_operator();
        this.state = 1480;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operator_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_operator_declaration;
    return this;
}

Operator_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_declarationContext.prototype.constructor = Operator_declarationContext;

Operator_declarationContext.prototype.prefix_operator_declaration = function() {
    return this.getTypedRuleContext(Prefix_operator_declarationContext,0);
};

Operator_declarationContext.prototype.postfix_operator_declaration = function() {
    return this.getTypedRuleContext(Postfix_operator_declarationContext,0);
};

Operator_declarationContext.prototype.infix_operator_declaration = function() {
    return this.getTypedRuleContext(Infix_operator_declarationContext,0);
};

Operator_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOperator_declaration(this);
	}
};

Operator_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOperator_declaration(this);
	}
};




CadenceParser.Operator_declarationContext = Operator_declarationContext;

CadenceParser.prototype.operator_declaration = function() {

    var localctx = new Operator_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, CadenceParser.RULE_operator_declaration);
    try {
        this.state = 1485;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.PREFIX:
            this.enterOuterAlt(localctx, 1);
            this.state = 1482;
            this.prefix_operator_declaration();
            break;
        case CadenceParser.POSTFIX:
            this.enterOuterAlt(localctx, 2);
            this.state = 1483;
            this.postfix_operator_declaration();
            break;
        case CadenceParser.INFIX:
            this.enterOuterAlt(localctx, 3);
            this.state = 1484;
            this.infix_operator_declaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Prefix_operator_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_prefix_operator_declaration;
    return this;
}

Prefix_operator_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Prefix_operator_declarationContext.prototype.constructor = Prefix_operator_declarationContext;

Prefix_operator_declarationContext.prototype.PREFIX = function() {
    return this.getToken(CadenceParser.PREFIX, 0);
};

Prefix_operator_declarationContext.prototype.OPERATOR = function() {
    return this.getToken(CadenceParser.OPERATOR, 0);
};

Prefix_operator_declarationContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Prefix_operator_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrefix_operator_declaration(this);
	}
};

Prefix_operator_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrefix_operator_declaration(this);
	}
};




CadenceParser.Prefix_operator_declarationContext = Prefix_operator_declarationContext;

CadenceParser.prototype.prefix_operator_declaration = function() {

    var localctx = new Prefix_operator_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, CadenceParser.RULE_prefix_operator_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1487;
        this.match(CadenceParser.PREFIX);
        this.state = 1488;
        this.match(CadenceParser.OPERATOR);
        this.state = 1489;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Postfix_operator_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_postfix_operator_declaration;
    return this;
}

Postfix_operator_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Postfix_operator_declarationContext.prototype.constructor = Postfix_operator_declarationContext;

Postfix_operator_declarationContext.prototype.POSTFIX = function() {
    return this.getToken(CadenceParser.POSTFIX, 0);
};

Postfix_operator_declarationContext.prototype.OPERATOR = function() {
    return this.getToken(CadenceParser.OPERATOR, 0);
};

Postfix_operator_declarationContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Postfix_operator_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPostfix_operator_declaration(this);
	}
};

Postfix_operator_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPostfix_operator_declaration(this);
	}
};




CadenceParser.Postfix_operator_declarationContext = Postfix_operator_declarationContext;

CadenceParser.prototype.postfix_operator_declaration = function() {

    var localctx = new Postfix_operator_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, CadenceParser.RULE_postfix_operator_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1491;
        this.match(CadenceParser.POSTFIX);
        this.state = 1492;
        this.match(CadenceParser.OPERATOR);
        this.state = 1493;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Infix_operator_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_infix_operator_declaration;
    return this;
}

Infix_operator_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Infix_operator_declarationContext.prototype.constructor = Infix_operator_declarationContext;

Infix_operator_declarationContext.prototype.INFIX = function() {
    return this.getToken(CadenceParser.INFIX, 0);
};

Infix_operator_declarationContext.prototype.OPERATOR = function() {
    return this.getToken(CadenceParser.OPERATOR, 0);
};

Infix_operator_declarationContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Infix_operator_declarationContext.prototype.infix_operator_group = function() {
    return this.getTypedRuleContext(Infix_operator_groupContext,0);
};

Infix_operator_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInfix_operator_declaration(this);
	}
};

Infix_operator_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInfix_operator_declaration(this);
	}
};




CadenceParser.Infix_operator_declarationContext = Infix_operator_declarationContext;

CadenceParser.prototype.infix_operator_declaration = function() {

    var localctx = new Infix_operator_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, CadenceParser.RULE_infix_operator_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1495;
        this.match(CadenceParser.INFIX);
        this.state = 1496;
        this.match(CadenceParser.OPERATOR);
        this.state = 1497;
        this.operator();
        this.state = 1499;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 1498;
            this.infix_operator_group();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Infix_operator_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_infix_operator_group;
    return this;
}

Infix_operator_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Infix_operator_groupContext.prototype.constructor = Infix_operator_groupContext;

Infix_operator_groupContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Infix_operator_groupContext.prototype.precedence_group_name = function() {
    return this.getTypedRuleContext(Precedence_group_nameContext,0);
};

Infix_operator_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInfix_operator_group(this);
	}
};

Infix_operator_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInfix_operator_group(this);
	}
};




CadenceParser.Infix_operator_groupContext = Infix_operator_groupContext;

CadenceParser.prototype.infix_operator_group = function() {

    var localctx = new Infix_operator_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, CadenceParser.RULE_infix_operator_group);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1501;
        this.match(CadenceParser.COLON);
        this.state = 1502;
        this.precedence_group_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Precedence_group_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_precedence_group_declaration;
    return this;
}

Precedence_group_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precedence_group_declarationContext.prototype.constructor = Precedence_group_declarationContext;

Precedence_group_declarationContext.prototype.PRECEDENCE_GROUP = function() {
    return this.getToken(CadenceParser.PRECEDENCE_GROUP, 0);
};

Precedence_group_declarationContext.prototype.precedence_group_name = function() {
    return this.getTypedRuleContext(Precedence_group_nameContext,0);
};

Precedence_group_declarationContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Precedence_group_declarationContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Precedence_group_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrecedence_group_declaration(this);
	}
};

Precedence_group_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrecedence_group_declaration(this);
	}
};




CadenceParser.Precedence_group_declarationContext = Precedence_group_declarationContext;

CadenceParser.prototype.precedence_group_declaration = function() {

    var localctx = new Precedence_group_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, CadenceParser.RULE_precedence_group_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1504;
        this.match(CadenceParser.PRECEDENCE_GROUP);
        this.state = 1505;
        this.precedence_group_name();
        this.state = 1506;
        this.match(CadenceParser.LCURLY);
        this.state = 1507;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Precedence_group_attributesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_precedence_group_attributes;
    return this;
}

Precedence_group_attributesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precedence_group_attributesContext.prototype.constructor = Precedence_group_attributesContext;

Precedence_group_attributesContext.prototype.precedence_group_attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Precedence_group_attributeContext);
    } else {
        return this.getTypedRuleContext(Precedence_group_attributeContext,i);
    }
};

Precedence_group_attributesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrecedence_group_attributes(this);
	}
};

Precedence_group_attributesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrecedence_group_attributes(this);
	}
};




CadenceParser.Precedence_group_attributesContext = Precedence_group_attributesContext;

CadenceParser.prototype.precedence_group_attributes = function() {

    var localctx = new Precedence_group_attributesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, CadenceParser.RULE_precedence_group_attributes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1510; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1509;
            this.precedence_group_attribute();
            this.state = 1512; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (CadenceParser.HIGHER_THAN - 58)) | (1 << (CadenceParser.LOWER_THAN - 58)) | (1 << (CadenceParser.ASSIGNMENT - 58)) | (1 << (CadenceParser.ASSOCIATIVITY - 58)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Precedence_group_attributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_precedence_group_attribute;
    return this;
}

Precedence_group_attributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precedence_group_attributeContext.prototype.constructor = Precedence_group_attributeContext;

Precedence_group_attributeContext.prototype.precedence_group_relation = function() {
    return this.getTypedRuleContext(Precedence_group_relationContext,0);
};

Precedence_group_attributeContext.prototype.precedence_group_assignment = function() {
    return this.getTypedRuleContext(Precedence_group_assignmentContext,0);
};

Precedence_group_attributeContext.prototype.precedence_group_associativity = function() {
    return this.getTypedRuleContext(Precedence_group_associativityContext,0);
};

Precedence_group_attributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrecedence_group_attribute(this);
	}
};

Precedence_group_attributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrecedence_group_attribute(this);
	}
};




CadenceParser.Precedence_group_attributeContext = Precedence_group_attributeContext;

CadenceParser.prototype.precedence_group_attribute = function() {

    var localctx = new Precedence_group_attributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, CadenceParser.RULE_precedence_group_attribute);
    try {
        this.state = 1517;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.HIGHER_THAN:
        case CadenceParser.LOWER_THAN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1514;
            this.precedence_group_relation();
            break;
        case CadenceParser.ASSIGNMENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1515;
            this.precedence_group_assignment();
            break;
        case CadenceParser.ASSOCIATIVITY:
            this.enterOuterAlt(localctx, 3);
            this.state = 1516;
            this.precedence_group_associativity();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Precedence_group_relationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_precedence_group_relation;
    return this;
}

Precedence_group_relationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precedence_group_relationContext.prototype.constructor = Precedence_group_relationContext;

Precedence_group_relationContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Precedence_group_relationContext.prototype.precedence_group_names = function() {
    return this.getTypedRuleContext(Precedence_group_namesContext,0);
};

Precedence_group_relationContext.prototype.HIGHER_THAN = function() {
    return this.getToken(CadenceParser.HIGHER_THAN, 0);
};

Precedence_group_relationContext.prototype.LOWER_THAN = function() {
    return this.getToken(CadenceParser.LOWER_THAN, 0);
};

Precedence_group_relationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrecedence_group_relation(this);
	}
};

Precedence_group_relationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrecedence_group_relation(this);
	}
};




CadenceParser.Precedence_group_relationContext = Precedence_group_relationContext;

CadenceParser.prototype.precedence_group_relation = function() {

    var localctx = new Precedence_group_relationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, CadenceParser.RULE_precedence_group_relation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1519;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.HIGHER_THAN || _la===CadenceParser.LOWER_THAN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1520;
        this.match(CadenceParser.COLON);
        this.state = 1521;
        this.precedence_group_names();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Precedence_group_assignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_precedence_group_assignment;
    return this;
}

Precedence_group_assignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precedence_group_assignmentContext.prototype.constructor = Precedence_group_assignmentContext;

Precedence_group_assignmentContext.prototype.ASSIGNMENT = function() {
    return this.getToken(CadenceParser.ASSIGNMENT, 0);
};

Precedence_group_assignmentContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Precedence_group_assignmentContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

Precedence_group_assignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrecedence_group_assignment(this);
	}
};

Precedence_group_assignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrecedence_group_assignment(this);
	}
};




CadenceParser.Precedence_group_assignmentContext = Precedence_group_assignmentContext;

CadenceParser.prototype.precedence_group_assignment = function() {

    var localctx = new Precedence_group_assignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, CadenceParser.RULE_precedence_group_assignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1523;
        this.match(CadenceParser.ASSIGNMENT);
        this.state = 1524;
        this.match(CadenceParser.COLON);
        this.state = 1525;
        this.boolean_literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Precedence_group_associativityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_precedence_group_associativity;
    return this;
}

Precedence_group_associativityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precedence_group_associativityContext.prototype.constructor = Precedence_group_associativityContext;

Precedence_group_associativityContext.prototype.ASSOCIATIVITY = function() {
    return this.getToken(CadenceParser.ASSOCIATIVITY, 0);
};

Precedence_group_associativityContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Precedence_group_associativityContext.prototype.LEFT = function() {
    return this.getToken(CadenceParser.LEFT, 0);
};

Precedence_group_associativityContext.prototype.RIGHT = function() {
    return this.getToken(CadenceParser.RIGHT, 0);
};

Precedence_group_associativityContext.prototype.NONE = function() {
    return this.getToken(CadenceParser.NONE, 0);
};

Precedence_group_associativityContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrecedence_group_associativity(this);
	}
};

Precedence_group_associativityContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrecedence_group_associativity(this);
	}
};




CadenceParser.Precedence_group_associativityContext = Precedence_group_associativityContext;

CadenceParser.prototype.precedence_group_associativity = function() {

    var localctx = new Precedence_group_associativityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, CadenceParser.RULE_precedence_group_associativity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1527;
        this.match(CadenceParser.ASSOCIATIVITY);
        this.state = 1528;
        this.match(CadenceParser.COLON);
        this.state = 1529;
        _la = this._input.LA(1);
        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CadenceParser.LEFT - 54)) | (1 << (CadenceParser.RIGHT - 54)) | (1 << (CadenceParser.NONE - 54)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Precedence_group_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_precedence_group_names;
    return this;
}

Precedence_group_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precedence_group_namesContext.prototype.constructor = Precedence_group_namesContext;

Precedence_group_namesContext.prototype.precedence_group_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Precedence_group_nameContext);
    } else {
        return this.getTypedRuleContext(Precedence_group_nameContext,i);
    }
};

Precedence_group_namesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Precedence_group_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrecedence_group_names(this);
	}
};

Precedence_group_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrecedence_group_names(this);
	}
};




CadenceParser.Precedence_group_namesContext = Precedence_group_namesContext;

CadenceParser.prototype.precedence_group_names = function() {

    var localctx = new Precedence_group_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, CadenceParser.RULE_precedence_group_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1531;
        this.precedence_group_name();
        this.state = 1536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 1532;
            this.match(CadenceParser.COMMA);
            this.state = 1533;
            this.precedence_group_name();
            this.state = 1538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Precedence_group_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_precedence_group_name;
    return this;
}

Precedence_group_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Precedence_group_nameContext.prototype.constructor = Precedence_group_nameContext;

Precedence_group_nameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Precedence_group_nameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.DOT);
    } else {
        return this.getToken(CadenceParser.DOT, i);
    }
};


Precedence_group_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrecedence_group_name(this);
	}
};

Precedence_group_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrecedence_group_name(this);
	}
};




CadenceParser.Precedence_group_nameContext = Precedence_group_nameContext;

CadenceParser.prototype.precedence_group_name = function() {

    var localctx = new Precedence_group_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, CadenceParser.RULE_precedence_group_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1539;
        this.identifier();
        this.state = 1544;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1540;
                this.match(CadenceParser.DOT);
                this.state = 1541;
                this.identifier(); 
            }
            this.state = 1546;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Declaration_modifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_declaration_modifier;
    return this;
}

Declaration_modifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_modifierContext.prototype.constructor = Declaration_modifierContext;

Declaration_modifierContext.prototype.CLASS = function() {
    return this.getToken(CadenceParser.CLASS, 0);
};

Declaration_modifierContext.prototype.CONVENIENCE = function() {
    return this.getToken(CadenceParser.CONVENIENCE, 0);
};

Declaration_modifierContext.prototype.DYNAMIC = function() {
    return this.getToken(CadenceParser.DYNAMIC, 0);
};

Declaration_modifierContext.prototype.FINAL = function() {
    return this.getToken(CadenceParser.FINAL, 0);
};

Declaration_modifierContext.prototype.INFIX = function() {
    return this.getToken(CadenceParser.INFIX, 0);
};

Declaration_modifierContext.prototype.LAZY = function() {
    return this.getToken(CadenceParser.LAZY, 0);
};

Declaration_modifierContext.prototype.OPTIONAL = function() {
    return this.getToken(CadenceParser.OPTIONAL, 0);
};

Declaration_modifierContext.prototype.OVERRIDE = function() {
    return this.getToken(CadenceParser.OVERRIDE, 0);
};

Declaration_modifierContext.prototype.POSTFIX = function() {
    return this.getToken(CadenceParser.POSTFIX, 0);
};

Declaration_modifierContext.prototype.PREFIX = function() {
    return this.getToken(CadenceParser.PREFIX, 0);
};

Declaration_modifierContext.prototype.REQUIRED = function() {
    return this.getToken(CadenceParser.REQUIRED, 0);
};

Declaration_modifierContext.prototype.STATIC = function() {
    return this.getToken(CadenceParser.STATIC, 0);
};

Declaration_modifierContext.prototype.UNOWNED = function() {
    return this.getToken(CadenceParser.UNOWNED, 0);
};

Declaration_modifierContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Declaration_modifierContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Declaration_modifierContext.prototype.SAFE = function() {
    return this.getToken(CadenceParser.SAFE, 0);
};

Declaration_modifierContext.prototype.UNSAFE = function() {
    return this.getToken(CadenceParser.UNSAFE, 0);
};

Declaration_modifierContext.prototype.WEAK = function() {
    return this.getToken(CadenceParser.WEAK, 0);
};

Declaration_modifierContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Declaration_modifierContext.prototype.mutation_modifier = function() {
    return this.getTypedRuleContext(Mutation_modifierContext,0);
};

Declaration_modifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDeclaration_modifier(this);
	}
};

Declaration_modifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDeclaration_modifier(this);
	}
};




CadenceParser.Declaration_modifierContext = Declaration_modifierContext;

CadenceParser.prototype.declaration_modifier = function() {

    var localctx = new Declaration_modifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, CadenceParser.RULE_declaration_modifier);
    var _la = 0; // Token type
    try {
        this.state = 1568;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.CLASS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1547;
            this.match(CadenceParser.CLASS);
            break;
        case CadenceParser.CONVENIENCE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1548;
            this.match(CadenceParser.CONVENIENCE);
            break;
        case CadenceParser.DYNAMIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 1549;
            this.match(CadenceParser.DYNAMIC);
            break;
        case CadenceParser.FINAL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1550;
            this.match(CadenceParser.FINAL);
            break;
        case CadenceParser.INFIX:
            this.enterOuterAlt(localctx, 5);
            this.state = 1551;
            this.match(CadenceParser.INFIX);
            break;
        case CadenceParser.LAZY:
            this.enterOuterAlt(localctx, 6);
            this.state = 1552;
            this.match(CadenceParser.LAZY);
            break;
        case CadenceParser.OPTIONAL:
            this.enterOuterAlt(localctx, 7);
            this.state = 1553;
            this.match(CadenceParser.OPTIONAL);
            break;
        case CadenceParser.OVERRIDE:
            this.enterOuterAlt(localctx, 8);
            this.state = 1554;
            this.match(CadenceParser.OVERRIDE);
            break;
        case CadenceParser.POSTFIX:
            this.enterOuterAlt(localctx, 9);
            this.state = 1555;
            this.match(CadenceParser.POSTFIX);
            break;
        case CadenceParser.PREFIX:
            this.enterOuterAlt(localctx, 10);
            this.state = 1556;
            this.match(CadenceParser.PREFIX);
            break;
        case CadenceParser.REQUIRED:
            this.enterOuterAlt(localctx, 11);
            this.state = 1557;
            this.match(CadenceParser.REQUIRED);
            break;
        case CadenceParser.STATIC:
            this.enterOuterAlt(localctx, 12);
            this.state = 1558;
            this.match(CadenceParser.STATIC);
            break;
        case CadenceParser.UNOWNED:
            this.enterOuterAlt(localctx, 13);
            this.state = 1559;
            this.match(CadenceParser.UNOWNED);
            this.state = 1563;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.LPAREN) {
                this.state = 1560;
                this.match(CadenceParser.LPAREN);
                this.state = 1561;
                _la = this._input.LA(1);
                if(!(_la===CadenceParser.SAFE || _la===CadenceParser.UNSAFE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1562;
                this.match(CadenceParser.RPAREN);
            }

            break;
        case CadenceParser.WEAK:
            this.enterOuterAlt(localctx, 14);
            this.state = 1565;
            this.match(CadenceParser.WEAK);
            break;
        case CadenceParser.ACCESS:
        case CadenceParser.INTERNAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.FILE_PRIVATE:
            this.enterOuterAlt(localctx, 15);
            this.state = 1566;
            this.access_level_modifier();
            break;
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
            this.enterOuterAlt(localctx, 16);
            this.state = 1567;
            this.mutation_modifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Declaration_modifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_declaration_modifiers;
    return this;
}

Declaration_modifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_modifiersContext.prototype.constructor = Declaration_modifiersContext;

Declaration_modifiersContext.prototype.declaration_modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declaration_modifierContext);
    } else {
        return this.getTypedRuleContext(Declaration_modifierContext,i);
    }
};

Declaration_modifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDeclaration_modifiers(this);
	}
};

Declaration_modifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDeclaration_modifiers(this);
	}
};




CadenceParser.Declaration_modifiersContext = Declaration_modifiersContext;

CadenceParser.prototype.declaration_modifiers = function() {

    var localctx = new Declaration_modifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, CadenceParser.RULE_declaration_modifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1571; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1570;
            this.declaration_modifier();
            this.state = 1573; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (CadenceParser.PREFIX - 52)) | (1 << (CadenceParser.INFIX - 52)) | (1 << (CadenceParser.POSTFIX - 52)) | (1 << (CadenceParser.CONVENIENCE - 52)) | (1 << (CadenceParser.DYNAMIC - 52)) | (1 << (CadenceParser.LAZY - 52)) | (1 << (CadenceParser.OPTIONAL - 52)) | (1 << (CadenceParser.OVERRIDE - 52)) | (1 << (CadenceParser.REQUIRED - 52)) | (1 << (CadenceParser.STATIC - 52)) | (1 << (CadenceParser.WEAK - 52)) | (1 << (CadenceParser.UNOWNED - 52)) | (1 << (CadenceParser.MUTATING - 52)) | (1 << (CadenceParser.NONMUTATING - 52)))) !== 0) || _la===CadenceParser.FILE_PRIVATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Mutation_modifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_mutation_modifier;
    return this;
}

Mutation_modifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mutation_modifierContext.prototype.constructor = Mutation_modifierContext;

Mutation_modifierContext.prototype.MUTATING = function() {
    return this.getToken(CadenceParser.MUTATING, 0);
};

Mutation_modifierContext.prototype.NONMUTATING = function() {
    return this.getToken(CadenceParser.NONMUTATING, 0);
};

Mutation_modifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterMutation_modifier(this);
	}
};

Mutation_modifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitMutation_modifier(this);
	}
};




CadenceParser.Mutation_modifierContext = Mutation_modifierContext;

CadenceParser.prototype.mutation_modifier = function() {

    var localctx = new Mutation_modifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, CadenceParser.RULE_mutation_modifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1575;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.MUTATING || _la===CadenceParser.NONMUTATING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_pattern;
    return this;
}

PatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternContext.prototype.constructor = PatternContext;

PatternContext.prototype.wildcard_pattern = function() {
    return this.getTypedRuleContext(Wildcard_patternContext,0);
};

PatternContext.prototype.identifier_pattern = function() {
    return this.getTypedRuleContext(Identifier_patternContext,0);
};

PatternContext.prototype.tuple_pattern = function() {
    return this.getTypedRuleContext(Tuple_patternContext,0);
};

PatternContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

PatternContext.prototype.value_binding_pattern = function() {
    return this.getTypedRuleContext(Value_binding_patternContext,0);
};

PatternContext.prototype.enum_case_pattern = function() {
    return this.getTypedRuleContext(Enum_case_patternContext,0);
};

PatternContext.prototype.optional_pattern = function() {
    return this.getTypedRuleContext(Optional_patternContext,0);
};

PatternContext.prototype.IS = function() {
    return this.getToken(CadenceParser.IS, 0);
};

PatternContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PatternContext.prototype.expression_pattern = function() {
    return this.getTypedRuleContext(Expression_patternContext,0);
};

PatternContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

PatternContext.prototype.AS = function() {
    return this.getToken(CadenceParser.AS, 0);
};

PatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPattern(this);
	}
};

PatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPattern(this);
	}
};



CadenceParser.prototype.pattern = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PatternContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 342;
    this.enterRecursionRule(localctx, 342, CadenceParser.RULE_pattern, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1592;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1581;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CadenceParser.UNDERSCORE:
                this.state = 1578;
                this.wildcard_pattern();
                break;
            case CadenceParser.AS:
            case CadenceParser.ALPHA:
            case CadenceParser.CATCH:
            case CadenceParser.CLASS:
            case CadenceParser.DEFAULT:
            case CadenceParser.DO:
            case CadenceParser.GUARD:
            case CadenceParser.FOR:
            case CadenceParser.IN:
            case CadenceParser.INTERNAL:
            case CadenceParser.FINAL:
            case CadenceParser.OPEN:
            case CadenceParser.PRIVATE:
            case CadenceParser.PUBLIC:
            case CadenceParser.WHERE:
            case CadenceParser.WHILE:
            case CadenceParser.PROTOCOL:
            case CadenceParser.GET:
            case CadenceParser.SET:
            case CadenceParser.WILL_SET:
            case CadenceParser.DID_SET:
            case CadenceParser.INDIRECT:
            case CadenceParser.PREFIX:
            case CadenceParser.INFIX:
            case CadenceParser.LEFT:
            case CadenceParser.RIGHT:
            case CadenceParser.NONE:
            case CadenceParser.PRECEDENCE_GROUP:
            case CadenceParser.HIGHER_THAN:
            case CadenceParser.LOWER_THAN:
            case CadenceParser.ASSIGNMENT:
            case CadenceParser.ASSOCIATIVITY:
            case CadenceParser.POSTFIX:
            case CadenceParser.OPERATOR:
            case CadenceParser.OS:
            case CadenceParser.ARCH:
            case CadenceParser.SWIFT:
            case CadenceParser.COMPILER:
            case CadenceParser.CAN_IMPORT:
            case CadenceParser.TARGET_ENVIRONMENT:
            case CadenceParser.CONVENIENCE:
            case CadenceParser.DYNAMIC:
            case CadenceParser.LAZY:
            case CadenceParser.OPTIONAL:
            case CadenceParser.OVERRIDE:
            case CadenceParser.REQUIRED:
            case CadenceParser.WEAK:
            case CadenceParser.UNOWNED:
            case CadenceParser.SAFE:
            case CadenceParser.UNSAFE:
            case CadenceParser.MUTATING:
            case CadenceParser.NONMUTATING:
            case CadenceParser.RED:
            case CadenceParser.BLUE:
            case CadenceParser.GREEN:
            case CadenceParser.RESOURCE_NAME:
            case CadenceParser.SOME:
            case CadenceParser.TYPE:
            case CadenceParser.PRECEDENCE:
            case CadenceParser.SELF:
            case CadenceParser.SELF_BIG:
            case CadenceParser.MAC_OS:
            case CadenceParser.I_OS:
            case CadenceParser.OSX:
            case CadenceParser.WATCH_OS:
            case CadenceParser.TV_OS:
            case CadenceParser.LINUX:
            case CadenceParser.WINDOWS:
            case CadenceParser.I386:
            case CadenceParser.X86_64:
            case CadenceParser.ARM:
            case CadenceParser.ARM64:
            case CadenceParser.SIMULATOR:
            case CadenceParser.MAC_CATALYST:
            case CadenceParser.I_OS_APPLICATION_EXTENSION:
            case CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION:
            case CadenceParser.MAC_OS_APPLICATION_EXTENSION:
            case CadenceParser.FILE:
            case CadenceParser.LINE:
            case CadenceParser.GETTER:
            case CadenceParser.SETTER:
            case CadenceParser.Identifier:
            case CadenceParser.BACKTICK:
                this.state = 1579;
                this.identifier_pattern();
                break;
            case CadenceParser.LPAREN:
                this.state = 1580;
                this.tuple_pattern();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1584;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
            if(la_===1) {
                this.state = 1583;
                this.type_annotation();

            }
            break;

        case 2:
            this.state = 1586;
            this.value_binding_pattern();
            break;

        case 3:
            this.state = 1587;
            this.enum_case_pattern();
            break;

        case 4:
            this.state = 1588;
            this.optional_pattern();
            break;

        case 5:
            this.state = 1589;
            this.match(CadenceParser.IS);
            this.state = 1590;
            this.type(0);
            break;

        case 6:
            this.state = 1591;
            this.expression_pattern();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1599;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,151,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PatternContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CadenceParser.RULE_pattern);
                this.state = 1594;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 1595;
                this.match(CadenceParser.AS);
                this.state = 1596;
                this.type(0); 
            }
            this.state = 1601;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,151,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Wildcard_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_wildcard_pattern;
    return this;
}

Wildcard_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Wildcard_patternContext.prototype.constructor = Wildcard_patternContext;

Wildcard_patternContext.prototype.UNDERSCORE = function() {
    return this.getToken(CadenceParser.UNDERSCORE, 0);
};

Wildcard_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterWildcard_pattern(this);
	}
};

Wildcard_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitWildcard_pattern(this);
	}
};




CadenceParser.Wildcard_patternContext = Wildcard_patternContext;

CadenceParser.prototype.wildcard_pattern = function() {

    var localctx = new Wildcard_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, CadenceParser.RULE_wildcard_pattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1602;
        this.match(CadenceParser.UNDERSCORE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Identifier_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_identifier_pattern;
    return this;
}

Identifier_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Identifier_patternContext.prototype.constructor = Identifier_patternContext;

Identifier_patternContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Identifier_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterIdentifier_pattern(this);
	}
};

Identifier_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitIdentifier_pattern(this);
	}
};




CadenceParser.Identifier_patternContext = Identifier_patternContext;

CadenceParser.prototype.identifier_pattern = function() {

    var localctx = new Identifier_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, CadenceParser.RULE_identifier_pattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1604;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Value_binding_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_value_binding_pattern;
    return this;
}

Value_binding_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_binding_patternContext.prototype.constructor = Value_binding_patternContext;

Value_binding_patternContext.prototype.VAR = function() {
    return this.getToken(CadenceParser.VAR, 0);
};

Value_binding_patternContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

Value_binding_patternContext.prototype.LET = function() {
    return this.getToken(CadenceParser.LET, 0);
};

Value_binding_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterValue_binding_pattern(this);
	}
};

Value_binding_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitValue_binding_pattern(this);
	}
};




CadenceParser.Value_binding_patternContext = Value_binding_patternContext;

CadenceParser.prototype.value_binding_pattern = function() {

    var localctx = new Value_binding_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, CadenceParser.RULE_value_binding_pattern);
    try {
        this.state = 1610;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.VAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 1606;
            this.match(CadenceParser.VAR);
            this.state = 1607;
            this.pattern(0);
            break;
        case CadenceParser.LET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1608;
            this.match(CadenceParser.LET);
            this.state = 1609;
            this.pattern(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_pattern;
    return this;
}

Tuple_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_patternContext.prototype.constructor = Tuple_patternContext;

Tuple_patternContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Tuple_patternContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Tuple_patternContext.prototype.tuple_pattern_element_list = function() {
    return this.getTypedRuleContext(Tuple_pattern_element_listContext,0);
};

Tuple_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_pattern(this);
	}
};

Tuple_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_pattern(this);
	}
};




CadenceParser.Tuple_patternContext = Tuple_patternContext;

CadenceParser.prototype.tuple_pattern = function() {

    var localctx = new Tuple_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, CadenceParser.RULE_tuple_pattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1612;
        this.match(CadenceParser.LPAREN);
        this.state = 1614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.STRING_TYPE) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.VAR - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.GET - 32)) | (1 << (CadenceParser.SET - 32)) | (1 << (CadenceParser.WILL_SET - 32)) | (1 << (CadenceParser.DID_SET - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.LEFT - 32)) | (1 << (CadenceParser.RIGHT - 32)) | (1 << (CadenceParser.NONE - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.HIGHER_THAN - 32)) | (1 << (CadenceParser.LOWER_THAN - 32)) | (1 << (CadenceParser.ASSIGNMENT - 32)) | (1 << (CadenceParser.ASSOCIATIVITY - 32)) | (1 << (CadenceParser.POSTFIX - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CadenceParser.OS - 65)) | (1 << (CadenceParser.ARCH - 65)) | (1 << (CadenceParser.SWIFT - 65)) | (1 << (CadenceParser.COMPILER - 65)) | (1 << (CadenceParser.CAN_IMPORT - 65)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 65)) | (1 << (CadenceParser.CONVENIENCE - 65)) | (1 << (CadenceParser.DYNAMIC - 65)) | (1 << (CadenceParser.LAZY - 65)) | (1 << (CadenceParser.OPTIONAL - 65)) | (1 << (CadenceParser.OVERRIDE - 65)) | (1 << (CadenceParser.REQUIRED - 65)) | (1 << (CadenceParser.WEAK - 65)) | (1 << (CadenceParser.UNOWNED - 65)) | (1 << (CadenceParser.SAFE - 65)) | (1 << (CadenceParser.UNSAFE - 65)) | (1 << (CadenceParser.MUTATING - 65)) | (1 << (CadenceParser.NONMUTATING - 65)) | (1 << (CadenceParser.IS - 65)) | (1 << (CadenceParser.SUPER - 65)) | (1 << (CadenceParser.FALSE - 65)) | (1 << (CadenceParser.RED - 65)) | (1 << (CadenceParser.BLUE - 65)) | (1 << (CadenceParser.GREEN - 65)) | (1 << (CadenceParser.RESOURCE_NAME - 65)) | (1 << (CadenceParser.TRUE - 65)) | (1 << (CadenceParser.NIL - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CadenceParser.SOME - 97)) | (1 << (CadenceParser.TYPE - 97)) | (1 << (CadenceParser.PRECEDENCE - 97)) | (1 << (CadenceParser.SELF - 97)) | (1 << (CadenceParser.SELF_BIG - 97)) | (1 << (CadenceParser.MAC_OS - 97)) | (1 << (CadenceParser.I_OS - 97)) | (1 << (CadenceParser.OSX - 97)) | (1 << (CadenceParser.WATCH_OS - 97)) | (1 << (CadenceParser.TV_OS - 97)) | (1 << (CadenceParser.LINUX - 97)) | (1 << (CadenceParser.WINDOWS - 97)) | (1 << (CadenceParser.I386 - 97)) | (1 << (CadenceParser.X86_64 - 97)) | (1 << (CadenceParser.ARM - 97)) | (1 << (CadenceParser.ARM64 - 97)) | (1 << (CadenceParser.SIMULATOR - 97)) | (1 << (CadenceParser.MAC_CATALYST - 97)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.FILE - 97)) | (1 << (CadenceParser.LINE - 97)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CadenceParser.HASH_SELECTOR - 135)) | (1 << (CadenceParser.HASH_KEYPATH - 135)) | (1 << (CadenceParser.GETTER - 135)) | (1 << (CadenceParser.SETTER - 135)) | (1 << (CadenceParser.Identifier - 135)) | (1 << (CadenceParser.DOT - 135)) | (1 << (CadenceParser.LCURLY - 135)) | (1 << (CadenceParser.LPAREN - 135)) | (1 << (CadenceParser.LBRACK - 135)) | (1 << (CadenceParser.LT - 135)) | (1 << (CadenceParser.GT - 135)) | (1 << (CadenceParser.UNDERSCORE - 135)) | (1 << (CadenceParser.BANG - 135)) | (1 << (CadenceParser.QUESTION - 135)) | (1 << (CadenceParser.AND - 135)) | (1 << (CadenceParser.SUB - 135)) | (1 << (CadenceParser.EQUAL - 135)) | (1 << (CadenceParser.OR - 135)) | (1 << (CadenceParser.DIV - 135)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CadenceParser.ADD - 167)) | (1 << (CadenceParser.MUL - 167)) | (1 << (CadenceParser.MOD - 167)) | (1 << (CadenceParser.CARET - 167)) | (1 << (CadenceParser.TILDE - 167)) | (1 << (CadenceParser.BACKTICK - 167)) | (1 << (CadenceParser.BACKSLASH - 167)) | (1 << (CadenceParser.Operator_head_other - 167)) | (1 << (CadenceParser.Binary_literal - 167)) | (1 << (CadenceParser.Octal_literal - 167)) | (1 << (CadenceParser.Decimal_digits - 167)) | (1 << (CadenceParser.Decimal_literal - 167)) | (1 << (CadenceParser.Hexadecimal_literal - 167)) | (1 << (CadenceParser.Floating_point_literal - 167)) | (1 << (CadenceParser.Multi_line_extended_string_open - 167)) | (1 << (CadenceParser.Single_line_extended_string_open - 167)) | (1 << (CadenceParser.Multi_line_string_open - 167)) | (1 << (CadenceParser.Single_line_string_open - 167)))) !== 0)) {
            this.state = 1613;
            this.tuple_pattern_element_list();
        }

        this.state = 1616;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_pattern_element_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_pattern_element_list;
    return this;
}

Tuple_pattern_element_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_pattern_element_listContext.prototype.constructor = Tuple_pattern_element_listContext;

Tuple_pattern_element_listContext.prototype.tuple_pattern_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tuple_pattern_elementContext);
    } else {
        return this.getTypedRuleContext(Tuple_pattern_elementContext,i);
    }
};

Tuple_pattern_element_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Tuple_pattern_element_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_pattern_element_list(this);
	}
};

Tuple_pattern_element_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_pattern_element_list(this);
	}
};




CadenceParser.Tuple_pattern_element_listContext = Tuple_pattern_element_listContext;

CadenceParser.prototype.tuple_pattern_element_list = function() {

    var localctx = new Tuple_pattern_element_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, CadenceParser.RULE_tuple_pattern_element_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1618;
        this.tuple_pattern_element();
        this.state = 1623;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 1619;
            this.match(CadenceParser.COMMA);
            this.state = 1620;
            this.tuple_pattern_element();
            this.state = 1625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_pattern_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_pattern_element;
    return this;
}

Tuple_pattern_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_pattern_elementContext.prototype.constructor = Tuple_pattern_elementContext;

Tuple_pattern_elementContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

Tuple_pattern_elementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Tuple_pattern_elementContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Tuple_pattern_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_pattern_element(this);
	}
};

Tuple_pattern_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_pattern_element(this);
	}
};




CadenceParser.Tuple_pattern_elementContext = Tuple_pattern_elementContext;

CadenceParser.prototype.tuple_pattern_element = function() {

    var localctx = new Tuple_pattern_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, CadenceParser.RULE_tuple_pattern_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1629;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        if(la_===1) {
            this.state = 1626;
            this.identifier();
            this.state = 1627;
            this.match(CadenceParser.COLON);

        }
        this.state = 1631;
        this.pattern(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Enum_case_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_enum_case_pattern;
    return this;
}

Enum_case_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_case_patternContext.prototype.constructor = Enum_case_patternContext;

Enum_case_patternContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Enum_case_patternContext.prototype.enum_case_name = function() {
    return this.getTypedRuleContext(Enum_case_nameContext,0);
};

Enum_case_patternContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Enum_case_patternContext.prototype.tuple_pattern = function() {
    return this.getTypedRuleContext(Tuple_patternContext,0);
};

Enum_case_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterEnum_case_pattern(this);
	}
};

Enum_case_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitEnum_case_pattern(this);
	}
};




CadenceParser.Enum_case_patternContext = Enum_case_patternContext;

CadenceParser.prototype.enum_case_pattern = function() {

    var localctx = new Enum_case_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, CadenceParser.RULE_enum_case_pattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1634;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.STRING_TYPE) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CadenceParser.GETTER - 140)) | (1 << (CadenceParser.SETTER - 140)) | (1 << (CadenceParser.Identifier - 140)))) !== 0) || _la===CadenceParser.BACKTICK) {
            this.state = 1633;
            this.type_identifier();
        }

        this.state = 1636;
        this.match(CadenceParser.DOT);
        this.state = 1637;
        this.enum_case_name();
        this.state = 1639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        if(la_===1) {
            this.state = 1638;
            this.tuple_pattern();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Optional_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_optional_pattern;
    return this;
}

Optional_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Optional_patternContext.prototype.constructor = Optional_patternContext;

Optional_patternContext.prototype.identifier_pattern = function() {
    return this.getTypedRuleContext(Identifier_patternContext,0);
};

Optional_patternContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Optional_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOptional_pattern(this);
	}
};

Optional_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOptional_pattern(this);
	}
};




CadenceParser.Optional_patternContext = Optional_patternContext;

CadenceParser.prototype.optional_pattern = function() {

    var localctx = new Optional_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, CadenceParser.RULE_optional_pattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1641;
        this.identifier_pattern();
        this.state = 1642;
        this.match(CadenceParser.QUESTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expression_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_expression_pattern;
    return this;
}

Expression_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_patternContext.prototype.constructor = Expression_patternContext;

Expression_patternContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Expression_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExpression_pattern(this);
	}
};

Expression_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExpression_pattern(this);
	}
};




CadenceParser.Expression_patternContext = Expression_patternContext;

CadenceParser.prototype.expression_pattern = function() {

    var localctx = new Expression_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, CadenceParser.RULE_expression_pattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1644;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Balanced_tokensContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_balanced_tokens;
    return this;
}

Balanced_tokensContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Balanced_tokensContext.prototype.constructor = Balanced_tokensContext;

Balanced_tokensContext.prototype.balanced_token = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Balanced_tokenContext);
    } else {
        return this.getTypedRuleContext(Balanced_tokenContext,i);
    }
};

Balanced_tokensContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBalanced_tokens(this);
	}
};

Balanced_tokensContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBalanced_tokens(this);
	}
};




CadenceParser.Balanced_tokensContext = Balanced_tokensContext;

CadenceParser.prototype.balanced_tokens = function() {

    var localctx = new Balanced_tokensContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, CadenceParser.RULE_balanced_tokens);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1647; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1646;
            this.balanced_token();
            this.state = 1649; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CASE) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DEFER) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.ELSE) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FALLTHROUGH) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN) | (1 << CadenceParser.IF) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.VAR - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.GET - 32)) | (1 << (CadenceParser.SET - 32)) | (1 << (CadenceParser.WILL_SET - 32)) | (1 << (CadenceParser.DID_SET - 32)) | (1 << (CadenceParser.REPEAT - 32)) | (1 << (CadenceParser.SWITCH - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.RETURN - 32)) | (1 << (CadenceParser.THROW - 32)) | (1 << (CadenceParser.THROWS - 32)) | (1 << (CadenceParser.RETHROWS - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.ASSOCIATED_TYPE - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.LEFT - 32)) | (1 << (CadenceParser.RIGHT - 32)) | (1 << (CadenceParser.NONE - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.HIGHER_THAN - 32)) | (1 << (CadenceParser.LOWER_THAN - 32)) | (1 << (CadenceParser.ASSIGNMENT - 32)) | (1 << (CadenceParser.ASSOCIATIVITY - 32)) | (1 << (CadenceParser.POSTFIX - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.OS - 64)) | (1 << (CadenceParser.ARCH - 64)) | (1 << (CadenceParser.SWIFT - 64)) | (1 << (CadenceParser.COMPILER - 64)) | (1 << (CadenceParser.CAN_IMPORT - 64)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.SAFE - 64)) | (1 << (CadenceParser.UNSAFE - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)) | (1 << (CadenceParser.IS - 64)) | (1 << (CadenceParser.TRY - 64)) | (1 << (CadenceParser.SUPER - 64)) | (1 << (CadenceParser.ANY - 64)) | (1 << (CadenceParser.FALSE - 64)) | (1 << (CadenceParser.RED - 64)) | (1 << (CadenceParser.BLUE - 64)) | (1 << (CadenceParser.GREEN - 64)) | (1 << (CadenceParser.RESOURCE_NAME - 64)) | (1 << (CadenceParser.TRUE - 64)) | (1 << (CadenceParser.NIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CadenceParser.INOUT - 96)) | (1 << (CadenceParser.SOME - 96)) | (1 << (CadenceParser.TYPE - 96)) | (1 << (CadenceParser.PRECEDENCE - 96)) | (1 << (CadenceParser.SELF - 96)) | (1 << (CadenceParser.SELF_BIG - 96)) | (1 << (CadenceParser.MAC_OS - 96)) | (1 << (CadenceParser.I_OS - 96)) | (1 << (CadenceParser.OSX - 96)) | (1 << (CadenceParser.WATCH_OS - 96)) | (1 << (CadenceParser.TV_OS - 96)) | (1 << (CadenceParser.LINUX - 96)) | (1 << (CadenceParser.WINDOWS - 96)) | (1 << (CadenceParser.I386 - 96)) | (1 << (CadenceParser.X86_64 - 96)) | (1 << (CadenceParser.ARM - 96)) | (1 << (CadenceParser.ARM64 - 96)) | (1 << (CadenceParser.SIMULATOR - 96)) | (1 << (CadenceParser.MAC_CATALYST - 96)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.SOURCE_LOCATION - 96)) | (1 << (CadenceParser.FILE - 96)) | (1 << (CadenceParser.LINE - 96)) | (1 << (CadenceParser.ERROR - 96)) | (1 << (CadenceParser.WARNING - 96)) | (1 << (CadenceParser.AVAILABLE - 96)) | (1 << (CadenceParser.HASH_IF - 96)) | (1 << (CadenceParser.HASH_ELSEIF - 96)) | (1 << (CadenceParser.HASH_ELSE - 96)) | (1 << (CadenceParser.HASH_ENDIF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CadenceParser.HASH_FILE - 128)) | (1 << (CadenceParser.HASH_FILE_ID - 128)) | (1 << (CadenceParser.HASH_FILE_PATH - 128)) | (1 << (CadenceParser.HASH_LINE - 128)) | (1 << (CadenceParser.HASH_COLUMN - 128)) | (1 << (CadenceParser.HASH_FUNCTION - 128)) | (1 << (CadenceParser.HASH_SELECTOR - 128)) | (1 << (CadenceParser.HASH_COLOR_LITERAL - 128)) | (1 << (CadenceParser.HASH_FILE_LITERAL - 128)) | (1 << (CadenceParser.HASH_IMAGE_LITERAL - 128)) | (1 << (CadenceParser.GETTER - 128)) | (1 << (CadenceParser.SETTER - 128)) | (1 << (CadenceParser.Identifier - 128)) | (1 << (CadenceParser.DOT - 128)) | (1 << (CadenceParser.LCURLY - 128)) | (1 << (CadenceParser.LPAREN - 128)) | (1 << (CadenceParser.LBRACK - 128)) | (1 << (CadenceParser.COMMA - 128)) | (1 << (CadenceParser.COLON - 128)) | (1 << (CadenceParser.SEMI - 128)) | (1 << (CadenceParser.LT - 128)) | (1 << (CadenceParser.GT - 128)) | (1 << (CadenceParser.UNDERSCORE - 128)) | (1 << (CadenceParser.BANG - 128)) | (1 << (CadenceParser.QUESTION - 128)) | (1 << (CadenceParser.AT - 128)) | (1 << (CadenceParser.AND - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (CadenceParser.SUB - 160)) | (1 << (CadenceParser.EQUAL - 160)) | (1 << (CadenceParser.OR - 160)) | (1 << (CadenceParser.DIV - 160)) | (1 << (CadenceParser.ADD - 160)) | (1 << (CadenceParser.MUL - 160)) | (1 << (CadenceParser.MOD - 160)) | (1 << (CadenceParser.CARET - 160)) | (1 << (CadenceParser.TILDE - 160)) | (1 << (CadenceParser.HASH - 160)) | (1 << (CadenceParser.BACKTICK - 160)) | (1 << (CadenceParser.Operator_head_other - 160)) | (1 << (CadenceParser.Binary_literal - 160)) | (1 << (CadenceParser.Octal_literal - 160)) | (1 << (CadenceParser.Decimal_digits - 160)) | (1 << (CadenceParser.Decimal_literal - 160)) | (1 << (CadenceParser.Hexadecimal_literal - 160)) | (1 << (CadenceParser.Floating_point_literal - 160)) | (1 << (CadenceParser.Multi_line_extended_string_open - 160)) | (1 << (CadenceParser.Single_line_extended_string_open - 160)) | (1 << (CadenceParser.Multi_line_string_open - 160)) | (1 << (CadenceParser.Single_line_string_open - 160)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Balanced_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_balanced_token;
    return this;
}

Balanced_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Balanced_tokenContext.prototype.constructor = Balanced_tokenContext;

Balanced_tokenContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Balanced_tokenContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Balanced_tokenContext.prototype.balanced_tokens = function() {
    return this.getTypedRuleContext(Balanced_tokensContext,0);
};

Balanced_tokenContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Balanced_tokenContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Balanced_tokenContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Balanced_tokenContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Balanced_tokenContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Balanced_tokenContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Balanced_tokenContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

Balanced_tokenContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Balanced_tokenContext.prototype.balanced_token_punctuation = function() {
    return this.getTypedRuleContext(Balanced_token_punctuationContext,0);
};

Balanced_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBalanced_token(this);
	}
};

Balanced_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBalanced_token(this);
	}
};




CadenceParser.Balanced_tokenContext = Balanced_tokenContext;

CadenceParser.prototype.balanced_token = function() {

    var localctx = new Balanced_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, CadenceParser.RULE_balanced_token);
    var _la = 0; // Token type
    try {
        this.state = 1671;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1651;
            this.match(CadenceParser.LPAREN);
            this.state = 1653;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CASE) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DEFER) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.ELSE) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FALLTHROUGH) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN) | (1 << CadenceParser.IF) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.VAR - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.GET - 32)) | (1 << (CadenceParser.SET - 32)) | (1 << (CadenceParser.WILL_SET - 32)) | (1 << (CadenceParser.DID_SET - 32)) | (1 << (CadenceParser.REPEAT - 32)) | (1 << (CadenceParser.SWITCH - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.RETURN - 32)) | (1 << (CadenceParser.THROW - 32)) | (1 << (CadenceParser.THROWS - 32)) | (1 << (CadenceParser.RETHROWS - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.ASSOCIATED_TYPE - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.LEFT - 32)) | (1 << (CadenceParser.RIGHT - 32)) | (1 << (CadenceParser.NONE - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.HIGHER_THAN - 32)) | (1 << (CadenceParser.LOWER_THAN - 32)) | (1 << (CadenceParser.ASSIGNMENT - 32)) | (1 << (CadenceParser.ASSOCIATIVITY - 32)) | (1 << (CadenceParser.POSTFIX - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.OS - 64)) | (1 << (CadenceParser.ARCH - 64)) | (1 << (CadenceParser.SWIFT - 64)) | (1 << (CadenceParser.COMPILER - 64)) | (1 << (CadenceParser.CAN_IMPORT - 64)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.SAFE - 64)) | (1 << (CadenceParser.UNSAFE - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)) | (1 << (CadenceParser.IS - 64)) | (1 << (CadenceParser.TRY - 64)) | (1 << (CadenceParser.SUPER - 64)) | (1 << (CadenceParser.ANY - 64)) | (1 << (CadenceParser.FALSE - 64)) | (1 << (CadenceParser.RED - 64)) | (1 << (CadenceParser.BLUE - 64)) | (1 << (CadenceParser.GREEN - 64)) | (1 << (CadenceParser.RESOURCE_NAME - 64)) | (1 << (CadenceParser.TRUE - 64)) | (1 << (CadenceParser.NIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CadenceParser.INOUT - 96)) | (1 << (CadenceParser.SOME - 96)) | (1 << (CadenceParser.TYPE - 96)) | (1 << (CadenceParser.PRECEDENCE - 96)) | (1 << (CadenceParser.SELF - 96)) | (1 << (CadenceParser.SELF_BIG - 96)) | (1 << (CadenceParser.MAC_OS - 96)) | (1 << (CadenceParser.I_OS - 96)) | (1 << (CadenceParser.OSX - 96)) | (1 << (CadenceParser.WATCH_OS - 96)) | (1 << (CadenceParser.TV_OS - 96)) | (1 << (CadenceParser.LINUX - 96)) | (1 << (CadenceParser.WINDOWS - 96)) | (1 << (CadenceParser.I386 - 96)) | (1 << (CadenceParser.X86_64 - 96)) | (1 << (CadenceParser.ARM - 96)) | (1 << (CadenceParser.ARM64 - 96)) | (1 << (CadenceParser.SIMULATOR - 96)) | (1 << (CadenceParser.MAC_CATALYST - 96)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.SOURCE_LOCATION - 96)) | (1 << (CadenceParser.FILE - 96)) | (1 << (CadenceParser.LINE - 96)) | (1 << (CadenceParser.ERROR - 96)) | (1 << (CadenceParser.WARNING - 96)) | (1 << (CadenceParser.AVAILABLE - 96)) | (1 << (CadenceParser.HASH_IF - 96)) | (1 << (CadenceParser.HASH_ELSEIF - 96)) | (1 << (CadenceParser.HASH_ELSE - 96)) | (1 << (CadenceParser.HASH_ENDIF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CadenceParser.HASH_FILE - 128)) | (1 << (CadenceParser.HASH_FILE_ID - 128)) | (1 << (CadenceParser.HASH_FILE_PATH - 128)) | (1 << (CadenceParser.HASH_LINE - 128)) | (1 << (CadenceParser.HASH_COLUMN - 128)) | (1 << (CadenceParser.HASH_FUNCTION - 128)) | (1 << (CadenceParser.HASH_SELECTOR - 128)) | (1 << (CadenceParser.HASH_COLOR_LITERAL - 128)) | (1 << (CadenceParser.HASH_FILE_LITERAL - 128)) | (1 << (CadenceParser.HASH_IMAGE_LITERAL - 128)) | (1 << (CadenceParser.GETTER - 128)) | (1 << (CadenceParser.SETTER - 128)) | (1 << (CadenceParser.Identifier - 128)) | (1 << (CadenceParser.DOT - 128)) | (1 << (CadenceParser.LCURLY - 128)) | (1 << (CadenceParser.LPAREN - 128)) | (1 << (CadenceParser.LBRACK - 128)) | (1 << (CadenceParser.COMMA - 128)) | (1 << (CadenceParser.COLON - 128)) | (1 << (CadenceParser.SEMI - 128)) | (1 << (CadenceParser.LT - 128)) | (1 << (CadenceParser.GT - 128)) | (1 << (CadenceParser.UNDERSCORE - 128)) | (1 << (CadenceParser.BANG - 128)) | (1 << (CadenceParser.QUESTION - 128)) | (1 << (CadenceParser.AT - 128)) | (1 << (CadenceParser.AND - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (CadenceParser.SUB - 160)) | (1 << (CadenceParser.EQUAL - 160)) | (1 << (CadenceParser.OR - 160)) | (1 << (CadenceParser.DIV - 160)) | (1 << (CadenceParser.ADD - 160)) | (1 << (CadenceParser.MUL - 160)) | (1 << (CadenceParser.MOD - 160)) | (1 << (CadenceParser.CARET - 160)) | (1 << (CadenceParser.TILDE - 160)) | (1 << (CadenceParser.HASH - 160)) | (1 << (CadenceParser.BACKTICK - 160)) | (1 << (CadenceParser.Operator_head_other - 160)) | (1 << (CadenceParser.Binary_literal - 160)) | (1 << (CadenceParser.Octal_literal - 160)) | (1 << (CadenceParser.Decimal_digits - 160)) | (1 << (CadenceParser.Decimal_literal - 160)) | (1 << (CadenceParser.Hexadecimal_literal - 160)) | (1 << (CadenceParser.Floating_point_literal - 160)) | (1 << (CadenceParser.Multi_line_extended_string_open - 160)) | (1 << (CadenceParser.Single_line_extended_string_open - 160)) | (1 << (CadenceParser.Multi_line_string_open - 160)) | (1 << (CadenceParser.Single_line_string_open - 160)))) !== 0)) {
                this.state = 1652;
                this.balanced_tokens();
            }

            this.state = 1655;
            this.match(CadenceParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1656;
            this.match(CadenceParser.LBRACK);
            this.state = 1658;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CASE) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DEFER) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.ELSE) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FALLTHROUGH) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN) | (1 << CadenceParser.IF) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.VAR - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.GET - 32)) | (1 << (CadenceParser.SET - 32)) | (1 << (CadenceParser.WILL_SET - 32)) | (1 << (CadenceParser.DID_SET - 32)) | (1 << (CadenceParser.REPEAT - 32)) | (1 << (CadenceParser.SWITCH - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.RETURN - 32)) | (1 << (CadenceParser.THROW - 32)) | (1 << (CadenceParser.THROWS - 32)) | (1 << (CadenceParser.RETHROWS - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.ASSOCIATED_TYPE - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.LEFT - 32)) | (1 << (CadenceParser.RIGHT - 32)) | (1 << (CadenceParser.NONE - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.HIGHER_THAN - 32)) | (1 << (CadenceParser.LOWER_THAN - 32)) | (1 << (CadenceParser.ASSIGNMENT - 32)) | (1 << (CadenceParser.ASSOCIATIVITY - 32)) | (1 << (CadenceParser.POSTFIX - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.OS - 64)) | (1 << (CadenceParser.ARCH - 64)) | (1 << (CadenceParser.SWIFT - 64)) | (1 << (CadenceParser.COMPILER - 64)) | (1 << (CadenceParser.CAN_IMPORT - 64)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.SAFE - 64)) | (1 << (CadenceParser.UNSAFE - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)) | (1 << (CadenceParser.IS - 64)) | (1 << (CadenceParser.TRY - 64)) | (1 << (CadenceParser.SUPER - 64)) | (1 << (CadenceParser.ANY - 64)) | (1 << (CadenceParser.FALSE - 64)) | (1 << (CadenceParser.RED - 64)) | (1 << (CadenceParser.BLUE - 64)) | (1 << (CadenceParser.GREEN - 64)) | (1 << (CadenceParser.RESOURCE_NAME - 64)) | (1 << (CadenceParser.TRUE - 64)) | (1 << (CadenceParser.NIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CadenceParser.INOUT - 96)) | (1 << (CadenceParser.SOME - 96)) | (1 << (CadenceParser.TYPE - 96)) | (1 << (CadenceParser.PRECEDENCE - 96)) | (1 << (CadenceParser.SELF - 96)) | (1 << (CadenceParser.SELF_BIG - 96)) | (1 << (CadenceParser.MAC_OS - 96)) | (1 << (CadenceParser.I_OS - 96)) | (1 << (CadenceParser.OSX - 96)) | (1 << (CadenceParser.WATCH_OS - 96)) | (1 << (CadenceParser.TV_OS - 96)) | (1 << (CadenceParser.LINUX - 96)) | (1 << (CadenceParser.WINDOWS - 96)) | (1 << (CadenceParser.I386 - 96)) | (1 << (CadenceParser.X86_64 - 96)) | (1 << (CadenceParser.ARM - 96)) | (1 << (CadenceParser.ARM64 - 96)) | (1 << (CadenceParser.SIMULATOR - 96)) | (1 << (CadenceParser.MAC_CATALYST - 96)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.SOURCE_LOCATION - 96)) | (1 << (CadenceParser.FILE - 96)) | (1 << (CadenceParser.LINE - 96)) | (1 << (CadenceParser.ERROR - 96)) | (1 << (CadenceParser.WARNING - 96)) | (1 << (CadenceParser.AVAILABLE - 96)) | (1 << (CadenceParser.HASH_IF - 96)) | (1 << (CadenceParser.HASH_ELSEIF - 96)) | (1 << (CadenceParser.HASH_ELSE - 96)) | (1 << (CadenceParser.HASH_ENDIF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CadenceParser.HASH_FILE - 128)) | (1 << (CadenceParser.HASH_FILE_ID - 128)) | (1 << (CadenceParser.HASH_FILE_PATH - 128)) | (1 << (CadenceParser.HASH_LINE - 128)) | (1 << (CadenceParser.HASH_COLUMN - 128)) | (1 << (CadenceParser.HASH_FUNCTION - 128)) | (1 << (CadenceParser.HASH_SELECTOR - 128)) | (1 << (CadenceParser.HASH_COLOR_LITERAL - 128)) | (1 << (CadenceParser.HASH_FILE_LITERAL - 128)) | (1 << (CadenceParser.HASH_IMAGE_LITERAL - 128)) | (1 << (CadenceParser.GETTER - 128)) | (1 << (CadenceParser.SETTER - 128)) | (1 << (CadenceParser.Identifier - 128)) | (1 << (CadenceParser.DOT - 128)) | (1 << (CadenceParser.LCURLY - 128)) | (1 << (CadenceParser.LPAREN - 128)) | (1 << (CadenceParser.LBRACK - 128)) | (1 << (CadenceParser.COMMA - 128)) | (1 << (CadenceParser.COLON - 128)) | (1 << (CadenceParser.SEMI - 128)) | (1 << (CadenceParser.LT - 128)) | (1 << (CadenceParser.GT - 128)) | (1 << (CadenceParser.UNDERSCORE - 128)) | (1 << (CadenceParser.BANG - 128)) | (1 << (CadenceParser.QUESTION - 128)) | (1 << (CadenceParser.AT - 128)) | (1 << (CadenceParser.AND - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (CadenceParser.SUB - 160)) | (1 << (CadenceParser.EQUAL - 160)) | (1 << (CadenceParser.OR - 160)) | (1 << (CadenceParser.DIV - 160)) | (1 << (CadenceParser.ADD - 160)) | (1 << (CadenceParser.MUL - 160)) | (1 << (CadenceParser.MOD - 160)) | (1 << (CadenceParser.CARET - 160)) | (1 << (CadenceParser.TILDE - 160)) | (1 << (CadenceParser.HASH - 160)) | (1 << (CadenceParser.BACKTICK - 160)) | (1 << (CadenceParser.Operator_head_other - 160)) | (1 << (CadenceParser.Binary_literal - 160)) | (1 << (CadenceParser.Octal_literal - 160)) | (1 << (CadenceParser.Decimal_digits - 160)) | (1 << (CadenceParser.Decimal_literal - 160)) | (1 << (CadenceParser.Hexadecimal_literal - 160)) | (1 << (CadenceParser.Floating_point_literal - 160)) | (1 << (CadenceParser.Multi_line_extended_string_open - 160)) | (1 << (CadenceParser.Single_line_extended_string_open - 160)) | (1 << (CadenceParser.Multi_line_string_open - 160)) | (1 << (CadenceParser.Single_line_string_open - 160)))) !== 0)) {
                this.state = 1657;
                this.balanced_tokens();
            }

            this.state = 1660;
            this.match(CadenceParser.RBRACK);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1661;
            this.match(CadenceParser.LCURLY);
            this.state = 1663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CASE) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DEFER) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.ELSE) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FALLTHROUGH) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN) | (1 << CadenceParser.IF) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.VAR - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.GET - 32)) | (1 << (CadenceParser.SET - 32)) | (1 << (CadenceParser.WILL_SET - 32)) | (1 << (CadenceParser.DID_SET - 32)) | (1 << (CadenceParser.REPEAT - 32)) | (1 << (CadenceParser.SWITCH - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.RETURN - 32)) | (1 << (CadenceParser.THROW - 32)) | (1 << (CadenceParser.THROWS - 32)) | (1 << (CadenceParser.RETHROWS - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.ASSOCIATED_TYPE - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.LEFT - 32)) | (1 << (CadenceParser.RIGHT - 32)) | (1 << (CadenceParser.NONE - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.HIGHER_THAN - 32)) | (1 << (CadenceParser.LOWER_THAN - 32)) | (1 << (CadenceParser.ASSIGNMENT - 32)) | (1 << (CadenceParser.ASSOCIATIVITY - 32)) | (1 << (CadenceParser.POSTFIX - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.OS - 64)) | (1 << (CadenceParser.ARCH - 64)) | (1 << (CadenceParser.SWIFT - 64)) | (1 << (CadenceParser.COMPILER - 64)) | (1 << (CadenceParser.CAN_IMPORT - 64)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.SAFE - 64)) | (1 << (CadenceParser.UNSAFE - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)) | (1 << (CadenceParser.IS - 64)) | (1 << (CadenceParser.TRY - 64)) | (1 << (CadenceParser.SUPER - 64)) | (1 << (CadenceParser.ANY - 64)) | (1 << (CadenceParser.FALSE - 64)) | (1 << (CadenceParser.RED - 64)) | (1 << (CadenceParser.BLUE - 64)) | (1 << (CadenceParser.GREEN - 64)) | (1 << (CadenceParser.RESOURCE_NAME - 64)) | (1 << (CadenceParser.TRUE - 64)) | (1 << (CadenceParser.NIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CadenceParser.INOUT - 96)) | (1 << (CadenceParser.SOME - 96)) | (1 << (CadenceParser.TYPE - 96)) | (1 << (CadenceParser.PRECEDENCE - 96)) | (1 << (CadenceParser.SELF - 96)) | (1 << (CadenceParser.SELF_BIG - 96)) | (1 << (CadenceParser.MAC_OS - 96)) | (1 << (CadenceParser.I_OS - 96)) | (1 << (CadenceParser.OSX - 96)) | (1 << (CadenceParser.WATCH_OS - 96)) | (1 << (CadenceParser.TV_OS - 96)) | (1 << (CadenceParser.LINUX - 96)) | (1 << (CadenceParser.WINDOWS - 96)) | (1 << (CadenceParser.I386 - 96)) | (1 << (CadenceParser.X86_64 - 96)) | (1 << (CadenceParser.ARM - 96)) | (1 << (CadenceParser.ARM64 - 96)) | (1 << (CadenceParser.SIMULATOR - 96)) | (1 << (CadenceParser.MAC_CATALYST - 96)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 96)) | (1 << (CadenceParser.SOURCE_LOCATION - 96)) | (1 << (CadenceParser.FILE - 96)) | (1 << (CadenceParser.LINE - 96)) | (1 << (CadenceParser.ERROR - 96)) | (1 << (CadenceParser.WARNING - 96)) | (1 << (CadenceParser.AVAILABLE - 96)) | (1 << (CadenceParser.HASH_IF - 96)) | (1 << (CadenceParser.HASH_ELSEIF - 96)) | (1 << (CadenceParser.HASH_ELSE - 96)) | (1 << (CadenceParser.HASH_ENDIF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CadenceParser.HASH_FILE - 128)) | (1 << (CadenceParser.HASH_FILE_ID - 128)) | (1 << (CadenceParser.HASH_FILE_PATH - 128)) | (1 << (CadenceParser.HASH_LINE - 128)) | (1 << (CadenceParser.HASH_COLUMN - 128)) | (1 << (CadenceParser.HASH_FUNCTION - 128)) | (1 << (CadenceParser.HASH_SELECTOR - 128)) | (1 << (CadenceParser.HASH_COLOR_LITERAL - 128)) | (1 << (CadenceParser.HASH_FILE_LITERAL - 128)) | (1 << (CadenceParser.HASH_IMAGE_LITERAL - 128)) | (1 << (CadenceParser.GETTER - 128)) | (1 << (CadenceParser.SETTER - 128)) | (1 << (CadenceParser.Identifier - 128)) | (1 << (CadenceParser.DOT - 128)) | (1 << (CadenceParser.LCURLY - 128)) | (1 << (CadenceParser.LPAREN - 128)) | (1 << (CadenceParser.LBRACK - 128)) | (1 << (CadenceParser.COMMA - 128)) | (1 << (CadenceParser.COLON - 128)) | (1 << (CadenceParser.SEMI - 128)) | (1 << (CadenceParser.LT - 128)) | (1 << (CadenceParser.GT - 128)) | (1 << (CadenceParser.UNDERSCORE - 128)) | (1 << (CadenceParser.BANG - 128)) | (1 << (CadenceParser.QUESTION - 128)) | (1 << (CadenceParser.AT - 128)) | (1 << (CadenceParser.AND - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (CadenceParser.SUB - 160)) | (1 << (CadenceParser.EQUAL - 160)) | (1 << (CadenceParser.OR - 160)) | (1 << (CadenceParser.DIV - 160)) | (1 << (CadenceParser.ADD - 160)) | (1 << (CadenceParser.MUL - 160)) | (1 << (CadenceParser.MOD - 160)) | (1 << (CadenceParser.CARET - 160)) | (1 << (CadenceParser.TILDE - 160)) | (1 << (CadenceParser.HASH - 160)) | (1 << (CadenceParser.BACKTICK - 160)) | (1 << (CadenceParser.Operator_head_other - 160)) | (1 << (CadenceParser.Binary_literal - 160)) | (1 << (CadenceParser.Octal_literal - 160)) | (1 << (CadenceParser.Decimal_digits - 160)) | (1 << (CadenceParser.Decimal_literal - 160)) | (1 << (CadenceParser.Hexadecimal_literal - 160)) | (1 << (CadenceParser.Floating_point_literal - 160)) | (1 << (CadenceParser.Multi_line_extended_string_open - 160)) | (1 << (CadenceParser.Single_line_extended_string_open - 160)) | (1 << (CadenceParser.Multi_line_string_open - 160)) | (1 << (CadenceParser.Single_line_string_open - 160)))) !== 0)) {
                this.state = 1662;
                this.balanced_tokens();
            }

            this.state = 1665;
            this.match(CadenceParser.RCURLY);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1666;
            this.identifier();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1667;
            this.keyword();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1668;
            this.literal();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1669;
            this.operator();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1670;
            this.balanced_token_punctuation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Balanced_token_punctuationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_balanced_token_punctuation;
    return this;
}

Balanced_token_punctuationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Balanced_token_punctuationContext.prototype.constructor = Balanced_token_punctuationContext;

Balanced_token_punctuationContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Balanced_token_punctuationContext.prototype.COMMA = function() {
    return this.getToken(CadenceParser.COMMA, 0);
};

Balanced_token_punctuationContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Balanced_token_punctuationContext.prototype.SEMI = function() {
    return this.getToken(CadenceParser.SEMI, 0);
};

Balanced_token_punctuationContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Balanced_token_punctuationContext.prototype.AT = function() {
    return this.getToken(CadenceParser.AT, 0);
};

Balanced_token_punctuationContext.prototype.HASH = function() {
    return this.getToken(CadenceParser.HASH, 0);
};

Balanced_token_punctuationContext.prototype.BACKTICK = function() {
    return this.getToken(CadenceParser.BACKTICK, 0);
};

Balanced_token_punctuationContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Balanced_token_punctuationContext.prototype.arrow_operator = function() {
    return this.getTypedRuleContext(Arrow_operatorContext,0);
};

Balanced_token_punctuationContext.prototype.AND = function() {
    return this.getToken(CadenceParser.AND, 0);
};

Balanced_token_punctuationContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

Balanced_token_punctuationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBalanced_token_punctuation(this);
	}
};

Balanced_token_punctuationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBalanced_token_punctuation(this);
	}
};




CadenceParser.Balanced_token_punctuationContext = Balanced_token_punctuationContext;

CadenceParser.prototype.balanced_token_punctuation = function() {

    var localctx = new Balanced_token_punctuationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, CadenceParser.RULE_balanced_token_punctuation);
    var _la = 0; // Token type
    try {
        this.state = 1677;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.DOT:
        case CadenceParser.COMMA:
        case CadenceParser.COLON:
        case CadenceParser.SEMI:
        case CadenceParser.QUESTION:
        case CadenceParser.AT:
        case CadenceParser.EQUAL:
        case CadenceParser.HASH:
        case CadenceParser.BACKTICK:
            this.enterOuterAlt(localctx, 1);
            this.state = 1673;
            _la = this._input.LA(1);
            if(!(((((_la - 143)) & ~0x1f) == 0 && ((1 << (_la - 143)) & ((1 << (CadenceParser.DOT - 143)) | (1 << (CadenceParser.COMMA - 143)) | (1 << (CadenceParser.COLON - 143)) | (1 << (CadenceParser.SEMI - 143)) | (1 << (CadenceParser.QUESTION - 143)) | (1 << (CadenceParser.AT - 143)) | (1 << (CadenceParser.EQUAL - 143)) | (1 << (CadenceParser.HASH - 143)) | (1 << (CadenceParser.BACKTICK - 143)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case CadenceParser.SUB:
            this.enterOuterAlt(localctx, 2);
            this.state = 1674;
            this.arrow_operator();
            break;
        case CadenceParser.AND:
            this.enterOuterAlt(localctx, 3);
            this.state = 1675;
            this.match(CadenceParser.AND);
            break;
        case CadenceParser.BANG:
            this.enterOuterAlt(localctx, 4);
            this.state = 1676;
            this.match(CadenceParser.BANG);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.prefix_expression = function() {
    return this.getTypedRuleContext(Prefix_expressionContext,0);
};

ExpressionContext.prototype.binary_expressions = function() {
    return this.getTypedRuleContext(Binary_expressionsContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExpression(this);
	}
};




CadenceParser.ExpressionContext = ExpressionContext;

CadenceParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, CadenceParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1679;
        this.prefix_expression();
        this.state = 1681;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        if(la_===1) {
            this.state = 1680;
            this.binary_expressions();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExpression_list(this);
	}
};




CadenceParser.Expression_listContext = Expression_listContext;

CadenceParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, CadenceParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1683;
        this.expression();
        this.state = 1688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 1684;
            this.match(CadenceParser.COMMA);
            this.state = 1685;
            this.expression();
            this.state = 1690;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Prefix_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_prefix_expression;
    return this;
}

Prefix_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Prefix_expressionContext.prototype.constructor = Prefix_expressionContext;

Prefix_expressionContext.prototype.postfix_expression = function() {
    return this.getTypedRuleContext(Postfix_expressionContext,0);
};

Prefix_expressionContext.prototype.prefix_operator = function() {
    return this.getTypedRuleContext(Prefix_operatorContext,0);
};

Prefix_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrefix_expression(this);
	}
};

Prefix_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrefix_expression(this);
	}
};




CadenceParser.Prefix_expressionContext = Prefix_expressionContext;

CadenceParser.prototype.prefix_expression = function() {

    var localctx = new Prefix_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, CadenceParser.RULE_prefix_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1692;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
        if(la_===1) {
            this.state = 1691;
            this.prefix_operator();

        }
        this.state = 1694;
        this.postfix_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Try_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_try_operator;
    return this;
}

Try_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_operatorContext.prototype.constructor = Try_operatorContext;

Try_operatorContext.prototype.TRY = function() {
    return this.getToken(CadenceParser.TRY, 0);
};

Try_operatorContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Try_operatorContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

Try_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTry_operator(this);
	}
};

Try_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTry_operator(this);
	}
};




CadenceParser.Try_operatorContext = Try_operatorContext;

CadenceParser.prototype.try_operator = function() {

    var localctx = new Try_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, CadenceParser.RULE_try_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1696;
        this.match(CadenceParser.TRY);
        this.state = 1698;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
        if(la_===1) {
            this.state = 1697;
            _la = this._input.LA(1);
            if(!(_la===CadenceParser.BANG || _la===CadenceParser.QUESTION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Binary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_binary_expression;
    return this;
}

Binary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_expressionContext.prototype.constructor = Binary_expressionContext;

Binary_expressionContext.prototype.binary_operator = function() {
    return this.getTypedRuleContext(Binary_operatorContext,0);
};

Binary_expressionContext.prototype.prefix_expression = function() {
    return this.getTypedRuleContext(Prefix_expressionContext,0);
};

Binary_expressionContext.prototype.assignment_operator = function() {
    return this.getTypedRuleContext(Assignment_operatorContext,0);
};

Binary_expressionContext.prototype.conditional_operator = function() {
    return this.getTypedRuleContext(Conditional_operatorContext,0);
};

Binary_expressionContext.prototype.try_operator = function() {
    return this.getTypedRuleContext(Try_operatorContext,0);
};

Binary_expressionContext.prototype.type_casting_operator = function() {
    return this.getTypedRuleContext(Type_casting_operatorContext,0);
};

Binary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBinary_expression(this);
	}
};

Binary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBinary_expression(this);
	}
};




CadenceParser.Binary_expressionContext = Binary_expressionContext;

CadenceParser.prototype.binary_expression = function() {

    var localctx = new Binary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, CadenceParser.RULE_binary_expression);
    var _la = 0; // Token type
    try {
        this.state = 1713;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1700;
            this.binary_operator();
            this.state = 1701;
            this.prefix_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1705;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CadenceParser.EQUAL:
            case CadenceParser.MOVE:
            case CadenceParser.FORCE_MOVE:
            case CadenceParser.SWAP:
                this.state = 1703;
                this.assignment_operator();
                break;
            case CadenceParser.QUESTION:
                this.state = 1704;
                this.conditional_operator();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.TRY) {
                this.state = 1707;
                this.try_operator();
            }

            this.state = 1710;
            this.prefix_expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1712;
            this.type_casting_operator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Binary_expressionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_binary_expressions;
    return this;
}

Binary_expressionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_expressionsContext.prototype.constructor = Binary_expressionsContext;

Binary_expressionsContext.prototype.binary_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Binary_expressionContext);
    } else {
        return this.getTypedRuleContext(Binary_expressionContext,i);
    }
};

Binary_expressionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBinary_expressions(this);
	}
};

Binary_expressionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBinary_expressions(this);
	}
};




CadenceParser.Binary_expressionsContext = Binary_expressionsContext;

CadenceParser.prototype.binary_expressions = function() {

    var localctx = new Binary_expressionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, CadenceParser.RULE_binary_expressions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1716; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1715;
        		this.binary_expression();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1718; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,171, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Conditional_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_conditional_operator;
    return this;
}

Conditional_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conditional_operatorContext.prototype.constructor = Conditional_operatorContext;

Conditional_operatorContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Conditional_operatorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Conditional_operatorContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Conditional_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterConditional_operator(this);
	}
};

Conditional_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitConditional_operator(this);
	}
};




CadenceParser.Conditional_operatorContext = Conditional_operatorContext;

CadenceParser.prototype.conditional_operator = function() {

    var localctx = new Conditional_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, CadenceParser.RULE_conditional_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1720;
        this.match(CadenceParser.QUESTION);
        this.state = 1721;
        this.expression();
        this.state = 1722;
        this.match(CadenceParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_casting_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_casting_operator;
    return this;
}

Type_casting_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_casting_operatorContext.prototype.constructor = Type_casting_operatorContext;

Type_casting_operatorContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Type_casting_operatorContext.prototype.IS = function() {
    return this.getToken(CadenceParser.IS, 0);
};

Type_casting_operatorContext.prototype.AS = function() {
    return this.getToken(CadenceParser.AS, 0);
};

Type_casting_operatorContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Type_casting_operatorContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

Type_casting_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_casting_operator(this);
	}
};

Type_casting_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_casting_operator(this);
	}
};




CadenceParser.Type_casting_operatorContext = Type_casting_operatorContext;

CadenceParser.prototype.type_casting_operator = function() {

    var localctx = new Type_casting_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, CadenceParser.RULE_type_casting_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1729;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.IS:
            this.state = 1724;
            this.match(CadenceParser.IS);
            break;
        case CadenceParser.AS:
            this.state = 1725;
            this.match(CadenceParser.AS);
            this.state = 1727;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.BANG || _la===CadenceParser.QUESTION) {
                this.state = 1726;
                _la = this._input.LA(1);
                if(!(_la===CadenceParser.BANG || _la===CadenceParser.QUESTION)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1731;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_primary_expression;
    return this;
}

Primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_expressionContext.prototype.constructor = Primary_expressionContext;

Primary_expressionContext.prototype.array_type = function() {
    return this.getTypedRuleContext(Array_typeContext,0);
};

Primary_expressionContext.prototype.dictionary_type = function() {
    return this.getTypedRuleContext(Dictionary_typeContext,0);
};

Primary_expressionContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Primary_expressionContext.prototype.self_expression = function() {
    return this.getTypedRuleContext(Self_expressionContext,0);
};

Primary_expressionContext.prototype.superclass_expression = function() {
    return this.getTypedRuleContext(Superclass_expressionContext,0);
};

Primary_expressionContext.prototype.closure_expression = function() {
    return this.getTypedRuleContext(Closure_expressionContext,0);
};

Primary_expressionContext.prototype.parenthesized_operator = function() {
    return this.getTypedRuleContext(Parenthesized_operatorContext,0);
};

Primary_expressionContext.prototype.parenthesized_expression = function() {
    return this.getTypedRuleContext(Parenthesized_expressionContext,0);
};

Primary_expressionContext.prototype.tuple_expression = function() {
    return this.getTypedRuleContext(Tuple_expressionContext,0);
};

Primary_expressionContext.prototype.implicit_member_expression = function() {
    return this.getTypedRuleContext(Implicit_member_expressionContext,0);
};

Primary_expressionContext.prototype.wildcard_expression = function() {
    return this.getTypedRuleContext(Wildcard_expressionContext,0);
};

Primary_expressionContext.prototype.key_path_expression = function() {
    return this.getTypedRuleContext(Key_path_expressionContext,0);
};

Primary_expressionContext.prototype.selector_expression = function() {
    return this.getTypedRuleContext(Selector_expressionContext,0);
};

Primary_expressionContext.prototype.key_path_string_expression = function() {
    return this.getTypedRuleContext(Key_path_string_expressionContext,0);
};

Primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrimary_expression(this);
	}
};

Primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrimary_expression(this);
	}
};




CadenceParser.Primary_expressionContext = Primary_expressionContext;

CadenceParser.prototype.primary_expression = function() {

    var localctx = new Primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, CadenceParser.RULE_primary_expression);
    try {
        this.state = 1747;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1733;
            this.array_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1734;
            this.dictionary_type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1735;
            this.literal_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1736;
            this.self_expression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1737;
            this.superclass_expression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1738;
            this.closure_expression();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1739;
            this.parenthesized_operator();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1740;
            this.parenthesized_expression();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1741;
            this.tuple_expression();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1742;
            this.implicit_member_expression();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1743;
            this.wildcard_expression();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1744;
            this.key_path_expression();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1745;
            this.selector_expression();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1746;
            this.key_path_string_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Self_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_self_expression;
    return this;
}

Self_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Self_expressionContext.prototype.constructor = Self_expressionContext;

Self_expressionContext.prototype.SELF = function() {
    return this.getToken(CadenceParser.SELF, 0);
};

Self_expressionContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Self_expressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Self_expressionContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Self_expressionContext.prototype.function_call_argument_list = function() {
    return this.getTypedRuleContext(Function_call_argument_listContext,0);
};

Self_expressionContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Self_expressionContext.prototype.INIT = function() {
    return this.getToken(CadenceParser.INIT, 0);
};

Self_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSelf_expression(this);
	}
};

Self_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSelf_expression(this);
	}
};




CadenceParser.Self_expressionContext = Self_expressionContext;

CadenceParser.prototype.self_expression = function() {

    var localctx = new Self_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, CadenceParser.RULE_self_expression);
    try {
        this.state = 1760;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1749;
            this.match(CadenceParser.SELF);
            this.state = 1750;
            this.match(CadenceParser.DOT);
            this.state = 1751;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1752;
            this.match(CadenceParser.SELF);
            this.state = 1753;
            this.match(CadenceParser.LBRACK);
            this.state = 1754;
            this.function_call_argument_list();
            this.state = 1755;
            this.match(CadenceParser.RBRACK);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1757;
            this.match(CadenceParser.SELF);
            this.state = 1758;
            this.match(CadenceParser.DOT);
            this.state = 1759;
            this.match(CadenceParser.INIT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Superclass_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_superclass_expression;
    return this;
}

Superclass_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Superclass_expressionContext.prototype.constructor = Superclass_expressionContext;


 
Superclass_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function Superclass_subscript_expressionContext(parser, ctx) {
	Superclass_expressionContext.call(this, parser);
    Superclass_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Superclass_subscript_expressionContext.prototype = Object.create(Superclass_expressionContext.prototype);
Superclass_subscript_expressionContext.prototype.constructor = Superclass_subscript_expressionContext;

CadenceParser.Superclass_subscript_expressionContext = Superclass_subscript_expressionContext;

Superclass_subscript_expressionContext.prototype.SUPER = function() {
    return this.getToken(CadenceParser.SUPER, 0);
};

Superclass_subscript_expressionContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Superclass_subscript_expressionContext.prototype.function_call_argument_list = function() {
    return this.getTypedRuleContext(Function_call_argument_listContext,0);
};

Superclass_subscript_expressionContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};
Superclass_subscript_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSuperclass_subscript_expression(this);
	}
};

Superclass_subscript_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSuperclass_subscript_expression(this);
	}
};


function Superclass_initializer_expressionContext(parser, ctx) {
	Superclass_expressionContext.call(this, parser);
    Superclass_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Superclass_initializer_expressionContext.prototype = Object.create(Superclass_expressionContext.prototype);
Superclass_initializer_expressionContext.prototype.constructor = Superclass_initializer_expressionContext;

CadenceParser.Superclass_initializer_expressionContext = Superclass_initializer_expressionContext;

Superclass_initializer_expressionContext.prototype.SUPER = function() {
    return this.getToken(CadenceParser.SUPER, 0);
};

Superclass_initializer_expressionContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Superclass_initializer_expressionContext.prototype.INIT = function() {
    return this.getToken(CadenceParser.INIT, 0);
};
Superclass_initializer_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSuperclass_initializer_expression(this);
	}
};

Superclass_initializer_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSuperclass_initializer_expression(this);
	}
};


function Superclass_method_expressionContext(parser, ctx) {
	Superclass_expressionContext.call(this, parser);
    Superclass_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Superclass_method_expressionContext.prototype = Object.create(Superclass_expressionContext.prototype);
Superclass_method_expressionContext.prototype.constructor = Superclass_method_expressionContext;

CadenceParser.Superclass_method_expressionContext = Superclass_method_expressionContext;

Superclass_method_expressionContext.prototype.SUPER = function() {
    return this.getToken(CadenceParser.SUPER, 0);
};

Superclass_method_expressionContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Superclass_method_expressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
Superclass_method_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSuperclass_method_expression(this);
	}
};

Superclass_method_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSuperclass_method_expression(this);
	}
};



CadenceParser.Superclass_expressionContext = Superclass_expressionContext;

CadenceParser.prototype.superclass_expression = function() {

    var localctx = new Superclass_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, CadenceParser.RULE_superclass_expression);
    try {
        this.state = 1773;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        switch(la_) {
        case 1:
            localctx = new Superclass_method_expressionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1762;
            this.match(CadenceParser.SUPER);
            this.state = 1763;
            this.match(CadenceParser.DOT);
            this.state = 1764;
            this.identifier();
            break;

        case 2:
            localctx = new Superclass_subscript_expressionContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1765;
            this.match(CadenceParser.SUPER);
            this.state = 1766;
            this.match(CadenceParser.LBRACK);
            this.state = 1767;
            this.function_call_argument_list();
            this.state = 1768;
            this.match(CadenceParser.RBRACK);
            break;

        case 3:
            localctx = new Superclass_initializer_expressionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1770;
            this.match(CadenceParser.SUPER);
            this.state = 1771;
            this.match(CadenceParser.DOT);
            this.state = 1772;
            this.match(CadenceParser.INIT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Closure_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_closure_expression;
    return this;
}

Closure_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Closure_expressionContext.prototype.constructor = Closure_expressionContext;

Closure_expressionContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Closure_expressionContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Closure_expressionContext.prototype.closure_signature = function() {
    return this.getTypedRuleContext(Closure_signatureContext,0);
};

Closure_expressionContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

Closure_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClosure_expression(this);
	}
};

Closure_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClosure_expression(this);
	}
};




CadenceParser.Closure_expressionContext = Closure_expressionContext;

CadenceParser.prototype.closure_expression = function() {

    var localctx = new Closure_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, CadenceParser.RULE_closure_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1775;
        this.match(CadenceParser.LCURLY);
        this.state = 1777;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
        if(la_===1) {
            this.state = 1776;
            this.closure_signature();

        }
        this.state = 1780;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FALLTHROUGH) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN) | (1 << CadenceParser.IF) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.GET - 32)) | (1 << (CadenceParser.SET - 32)) | (1 << (CadenceParser.WILL_SET - 32)) | (1 << (CadenceParser.DID_SET - 32)) | (1 << (CadenceParser.REPEAT - 32)) | (1 << (CadenceParser.SWITCH - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.RETURN - 32)) | (1 << (CadenceParser.THROW - 32)) | (1 << (CadenceParser.INDIRECT - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.PREFIX - 32)) | (1 << (CadenceParser.INFIX - 32)) | (1 << (CadenceParser.LEFT - 32)) | (1 << (CadenceParser.RIGHT - 32)) | (1 << (CadenceParser.NONE - 32)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 32)) | (1 << (CadenceParser.HIGHER_THAN - 32)) | (1 << (CadenceParser.LOWER_THAN - 32)) | (1 << (CadenceParser.ASSIGNMENT - 32)) | (1 << (CadenceParser.ASSOCIATIVITY - 32)) | (1 << (CadenceParser.POSTFIX - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.OS - 64)) | (1 << (CadenceParser.ARCH - 64)) | (1 << (CadenceParser.SWIFT - 64)) | (1 << (CadenceParser.COMPILER - 64)) | (1 << (CadenceParser.CAN_IMPORT - 64)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 64)) | (1 << (CadenceParser.CONVENIENCE - 64)) | (1 << (CadenceParser.DYNAMIC - 64)) | (1 << (CadenceParser.LAZY - 64)) | (1 << (CadenceParser.OPTIONAL - 64)) | (1 << (CadenceParser.OVERRIDE - 64)) | (1 << (CadenceParser.REQUIRED - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.WEAK - 64)) | (1 << (CadenceParser.UNOWNED - 64)) | (1 << (CadenceParser.SAFE - 64)) | (1 << (CadenceParser.UNSAFE - 64)) | (1 << (CadenceParser.MUTATING - 64)) | (1 << (CadenceParser.NONMUTATING - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)) | (1 << (CadenceParser.SUPER - 64)) | (1 << (CadenceParser.FALSE - 64)) | (1 << (CadenceParser.RED - 64)) | (1 << (CadenceParser.BLUE - 64)) | (1 << (CadenceParser.GREEN - 64)) | (1 << (CadenceParser.RESOURCE_NAME - 64)) | (1 << (CadenceParser.TRUE - 64)) | (1 << (CadenceParser.NIL - 64)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (CadenceParser.SOME - 97)) | (1 << (CadenceParser.TYPE - 97)) | (1 << (CadenceParser.PRECEDENCE - 97)) | (1 << (CadenceParser.SELF - 97)) | (1 << (CadenceParser.SELF_BIG - 97)) | (1 << (CadenceParser.MAC_OS - 97)) | (1 << (CadenceParser.I_OS - 97)) | (1 << (CadenceParser.OSX - 97)) | (1 << (CadenceParser.WATCH_OS - 97)) | (1 << (CadenceParser.TV_OS - 97)) | (1 << (CadenceParser.LINUX - 97)) | (1 << (CadenceParser.WINDOWS - 97)) | (1 << (CadenceParser.I386 - 97)) | (1 << (CadenceParser.X86_64 - 97)) | (1 << (CadenceParser.ARM - 97)) | (1 << (CadenceParser.ARM64 - 97)) | (1 << (CadenceParser.SIMULATOR - 97)) | (1 << (CadenceParser.MAC_CATALYST - 97)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 97)) | (1 << (CadenceParser.FILE - 97)) | (1 << (CadenceParser.LINE - 97)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CadenceParser.HASH_SELECTOR - 135)) | (1 << (CadenceParser.HASH_KEYPATH - 135)) | (1 << (CadenceParser.GETTER - 135)) | (1 << (CadenceParser.SETTER - 135)) | (1 << (CadenceParser.Identifier - 135)) | (1 << (CadenceParser.DOT - 135)) | (1 << (CadenceParser.LCURLY - 135)) | (1 << (CadenceParser.LPAREN - 135)) | (1 << (CadenceParser.LBRACK - 135)) | (1 << (CadenceParser.LT - 135)) | (1 << (CadenceParser.GT - 135)) | (1 << (CadenceParser.UNDERSCORE - 135)) | (1 << (CadenceParser.BANG - 135)) | (1 << (CadenceParser.QUESTION - 135)) | (1 << (CadenceParser.AND - 135)) | (1 << (CadenceParser.SUB - 135)) | (1 << (CadenceParser.EQUAL - 135)) | (1 << (CadenceParser.OR - 135)) | (1 << (CadenceParser.DIV - 135)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CadenceParser.ADD - 167)) | (1 << (CadenceParser.MUL - 167)) | (1 << (CadenceParser.MOD - 167)) | (1 << (CadenceParser.CARET - 167)) | (1 << (CadenceParser.TILDE - 167)) | (1 << (CadenceParser.BACKTICK - 167)) | (1 << (CadenceParser.BACKSLASH - 167)) | (1 << (CadenceParser.Operator_head_other - 167)) | (1 << (CadenceParser.Binary_literal - 167)) | (1 << (CadenceParser.Octal_literal - 167)) | (1 << (CadenceParser.Decimal_digits - 167)) | (1 << (CadenceParser.Decimal_literal - 167)) | (1 << (CadenceParser.Hexadecimal_literal - 167)) | (1 << (CadenceParser.Floating_point_literal - 167)) | (1 << (CadenceParser.Multi_line_extended_string_open - 167)) | (1 << (CadenceParser.Single_line_extended_string_open - 167)) | (1 << (CadenceParser.Multi_line_string_open - 167)) | (1 << (CadenceParser.Single_line_string_open - 167)))) !== 0)) {
            this.state = 1779;
            this.statements();
        }

        this.state = 1782;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Closure_signatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_closure_signature;
    return this;
}

Closure_signatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Closure_signatureContext.prototype.constructor = Closure_signatureContext;

Closure_signatureContext.prototype.closure_parameter_clause = function() {
    return this.getTypedRuleContext(Closure_parameter_clauseContext,0);
};

Closure_signatureContext.prototype.IN = function() {
    return this.getToken(CadenceParser.IN, 0);
};

Closure_signatureContext.prototype.capture_list = function() {
    return this.getTypedRuleContext(Capture_listContext,0);
};

Closure_signatureContext.prototype.THROWS = function() {
    return this.getToken(CadenceParser.THROWS, 0);
};

Closure_signatureContext.prototype.function_result = function() {
    return this.getTypedRuleContext(Function_resultContext,0);
};

Closure_signatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClosure_signature(this);
	}
};

Closure_signatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClosure_signature(this);
	}
};




CadenceParser.Closure_signatureContext = Closure_signatureContext;

CadenceParser.prototype.closure_signature = function() {

    var localctx = new Closure_signatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, CadenceParser.RULE_closure_signature);
    var _la = 0; // Token type
    try {
        this.state = 1799;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1785;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.LBRACK) {
                this.state = 1784;
                this.capture_list();
            }

            this.state = 1787;
            this.closure_parameter_clause();
            this.state = 1789;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.THROWS) {
                this.state = 1788;
                this.match(CadenceParser.THROWS);
            }

            this.state = 1792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.COLON) {
                this.state = 1791;
                this.function_result();
            }

            this.state = 1794;
            this.match(CadenceParser.IN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1796;
            this.capture_list();
            this.state = 1797;
            this.match(CadenceParser.IN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Closure_parameter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_closure_parameter_clause;
    return this;
}

Closure_parameter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Closure_parameter_clauseContext.prototype.constructor = Closure_parameter_clauseContext;

Closure_parameter_clauseContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Closure_parameter_clauseContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Closure_parameter_clauseContext.prototype.closure_parameter_list = function() {
    return this.getTypedRuleContext(Closure_parameter_listContext,0);
};

Closure_parameter_clauseContext.prototype.identifier_list = function() {
    return this.getTypedRuleContext(Identifier_listContext,0);
};

Closure_parameter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClosure_parameter_clause(this);
	}
};

Closure_parameter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClosure_parameter_clause(this);
	}
};




CadenceParser.Closure_parameter_clauseContext = Closure_parameter_clauseContext;

CadenceParser.prototype.closure_parameter_clause = function() {

    var localctx = new Closure_parameter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, CadenceParser.RULE_closure_parameter_clause);
    var _la = 0; // Token type
    try {
        this.state = 1807;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1801;
            this.match(CadenceParser.LPAREN);
            this.state = 1803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CadenceParser.GETTER - 140)) | (1 << (CadenceParser.SETTER - 140)) | (1 << (CadenceParser.Identifier - 140)))) !== 0) || _la===CadenceParser.BACKTICK) {
                this.state = 1802;
                this.closure_parameter_list();
            }

            this.state = 1805;
            this.match(CadenceParser.RPAREN);
            break;
        case CadenceParser.AS:
        case CadenceParser.ALPHA:
        case CadenceParser.CATCH:
        case CadenceParser.CLASS:
        case CadenceParser.DEFAULT:
        case CadenceParser.DO:
        case CadenceParser.GUARD:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHERE:
        case CadenceParser.WHILE:
        case CadenceParser.PROTOCOL:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.WILL_SET:
        case CadenceParser.DID_SET:
        case CadenceParser.INDIRECT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.LEFT:
        case CadenceParser.RIGHT:
        case CadenceParser.NONE:
        case CadenceParser.PRECEDENCE_GROUP:
        case CadenceParser.HIGHER_THAN:
        case CadenceParser.LOWER_THAN:
        case CadenceParser.ASSIGNMENT:
        case CadenceParser.ASSOCIATIVITY:
        case CadenceParser.POSTFIX:
        case CadenceParser.OPERATOR:
        case CadenceParser.OS:
        case CadenceParser.ARCH:
        case CadenceParser.SWIFT:
        case CadenceParser.COMPILER:
        case CadenceParser.CAN_IMPORT:
        case CadenceParser.TARGET_ENVIRONMENT:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.SAFE:
        case CadenceParser.UNSAFE:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.RED:
        case CadenceParser.BLUE:
        case CadenceParser.GREEN:
        case CadenceParser.RESOURCE_NAME:
        case CadenceParser.SOME:
        case CadenceParser.TYPE:
        case CadenceParser.PRECEDENCE:
        case CadenceParser.SELF:
        case CadenceParser.SELF_BIG:
        case CadenceParser.MAC_OS:
        case CadenceParser.I_OS:
        case CadenceParser.OSX:
        case CadenceParser.WATCH_OS:
        case CadenceParser.TV_OS:
        case CadenceParser.LINUX:
        case CadenceParser.WINDOWS:
        case CadenceParser.I386:
        case CadenceParser.X86_64:
        case CadenceParser.ARM:
        case CadenceParser.ARM64:
        case CadenceParser.SIMULATOR:
        case CadenceParser.MAC_CATALYST:
        case CadenceParser.I_OS_APPLICATION_EXTENSION:
        case CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION:
        case CadenceParser.MAC_OS_APPLICATION_EXTENSION:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.GETTER:
        case CadenceParser.SETTER:
        case CadenceParser.Identifier:
        case CadenceParser.BACKTICK:
            this.enterOuterAlt(localctx, 2);
            this.state = 1806;
            this.identifier_list();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Closure_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_closure_parameter_list;
    return this;
}

Closure_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Closure_parameter_listContext.prototype.constructor = Closure_parameter_listContext;

Closure_parameter_listContext.prototype.closure_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Closure_parameterContext);
    } else {
        return this.getTypedRuleContext(Closure_parameterContext,i);
    }
};

Closure_parameter_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Closure_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClosure_parameter_list(this);
	}
};

Closure_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClosure_parameter_list(this);
	}
};




CadenceParser.Closure_parameter_listContext = Closure_parameter_listContext;

CadenceParser.prototype.closure_parameter_list = function() {

    var localctx = new Closure_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, CadenceParser.RULE_closure_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1809;
        this.closure_parameter();
        this.state = 1814;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 1810;
            this.match(CadenceParser.COMMA);
            this.state = 1811;
            this.closure_parameter();
            this.state = 1816;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Closure_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_closure_parameter;
    this.closure_parameter_name = null; // IdentifierContext
    return this;
}

Closure_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Closure_parameterContext.prototype.constructor = Closure_parameterContext;

Closure_parameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Closure_parameterContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

Closure_parameterContext.prototype.range_operator = function() {
    return this.getTypedRuleContext(Range_operatorContext,0);
};

Closure_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterClosure_parameter(this);
	}
};

Closure_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitClosure_parameter(this);
	}
};




CadenceParser.Closure_parameterContext = Closure_parameterContext;

CadenceParser.prototype.closure_parameter = function() {

    var localctx = new Closure_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, CadenceParser.RULE_closure_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1817;
        localctx.closure_parameter_name = this.identifier();
        this.state = 1822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 1818;
            this.type_annotation();
            this.state = 1820;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.DOT) {
                this.state = 1819;
                this.range_operator();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Capture_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_capture_list;
    return this;
}

Capture_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capture_listContext.prototype.constructor = Capture_listContext;

Capture_listContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Capture_listContext.prototype.capture_list_items = function() {
    return this.getTypedRuleContext(Capture_list_itemsContext,0);
};

Capture_listContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Capture_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCapture_list(this);
	}
};

Capture_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCapture_list(this);
	}
};




CadenceParser.Capture_listContext = Capture_listContext;

CadenceParser.prototype.capture_list = function() {

    var localctx = new Capture_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, CadenceParser.RULE_capture_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1824;
        this.match(CadenceParser.LBRACK);
        this.state = 1825;
        this.capture_list_items();
        this.state = 1826;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Capture_list_itemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_capture_list_items;
    return this;
}

Capture_list_itemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capture_list_itemsContext.prototype.constructor = Capture_list_itemsContext;

Capture_list_itemsContext.prototype.capture_list_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Capture_list_itemContext);
    } else {
        return this.getTypedRuleContext(Capture_list_itemContext,i);
    }
};

Capture_list_itemsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Capture_list_itemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCapture_list_items(this);
	}
};

Capture_list_itemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCapture_list_items(this);
	}
};




CadenceParser.Capture_list_itemsContext = Capture_list_itemsContext;

CadenceParser.prototype.capture_list_items = function() {

    var localctx = new Capture_list_itemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, CadenceParser.RULE_capture_list_items);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1828;
        this.capture_list_item();
        this.state = 1833;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 1829;
            this.match(CadenceParser.COMMA);
            this.state = 1830;
            this.capture_list_item();
            this.state = 1835;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Capture_list_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_capture_list_item;
    return this;
}

Capture_list_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capture_list_itemContext.prototype.constructor = Capture_list_itemContext;

Capture_list_itemContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Capture_list_itemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Capture_list_itemContext.prototype.self_expression = function() {
    return this.getTypedRuleContext(Self_expressionContext,0);
};

Capture_list_itemContext.prototype.capture_specifier = function() {
    return this.getTypedRuleContext(Capture_specifierContext,0);
};

Capture_list_itemContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Capture_list_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCapture_list_item(this);
	}
};

Capture_list_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCapture_list_item(this);
	}
};




CadenceParser.Capture_list_itemContext = Capture_list_itemContext;

CadenceParser.prototype.capture_list_item = function() {

    var localctx = new Capture_list_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, CadenceParser.RULE_capture_list_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1837;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        if(la_===1) {
            this.state = 1836;
            this.capture_specifier();

        }
        this.state = 1846;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1839;
            this.identifier();
            this.state = 1841;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
            if(la_===1) {
                this.state = 1840;
                this.match(CadenceParser.EQUAL);

            }
            this.state = 1843;
            this.expression();
            break;

        case 2:
            this.state = 1845;
            this.self_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Capture_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_capture_specifier;
    return this;
}

Capture_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Capture_specifierContext.prototype.constructor = Capture_specifierContext;

Capture_specifierContext.prototype.WEAK = function() {
    return this.getToken(CadenceParser.WEAK, 0);
};

Capture_specifierContext.prototype.UNOWNED = function() {
    return this.getToken(CadenceParser.UNOWNED, 0);
};

Capture_specifierContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Capture_specifierContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Capture_specifierContext.prototype.SAFE = function() {
    return this.getToken(CadenceParser.SAFE, 0);
};

Capture_specifierContext.prototype.UNSAFE = function() {
    return this.getToken(CadenceParser.UNSAFE, 0);
};

Capture_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCapture_specifier(this);
	}
};

Capture_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCapture_specifier(this);
	}
};




CadenceParser.Capture_specifierContext = Capture_specifierContext;

CadenceParser.prototype.capture_specifier = function() {

    var localctx = new Capture_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, CadenceParser.RULE_capture_specifier);
    var _la = 0; // Token type
    try {
        this.state = 1855;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.WEAK:
            this.enterOuterAlt(localctx, 1);
            this.state = 1848;
            this.match(CadenceParser.WEAK);
            break;
        case CadenceParser.UNOWNED:
            this.enterOuterAlt(localctx, 2);
            this.state = 1849;
            this.match(CadenceParser.UNOWNED);
            this.state = 1853;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.LPAREN) {
                this.state = 1850;
                this.match(CadenceParser.LPAREN);
                this.state = 1851;
                _la = this._input.LA(1);
                if(!(_la===CadenceParser.SAFE || _la===CadenceParser.UNSAFE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1852;
                this.match(CadenceParser.RPAREN);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Implicit_member_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_implicit_member_expression;
    return this;
}

Implicit_member_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Implicit_member_expressionContext.prototype.constructor = Implicit_member_expressionContext;

Implicit_member_expressionContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.DOT);
    } else {
        return this.getToken(CadenceParser.DOT, i);
    }
};


Implicit_member_expressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Implicit_member_expressionContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Implicit_member_expressionContext.prototype.postfix_expression = function() {
    return this.getTypedRuleContext(Postfix_expressionContext,0);
};

Implicit_member_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterImplicit_member_expression(this);
	}
};

Implicit_member_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitImplicit_member_expression(this);
	}
};




CadenceParser.Implicit_member_expressionContext = Implicit_member_expressionContext;

CadenceParser.prototype.implicit_member_expression = function() {

    var localctx = new Implicit_member_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, CadenceParser.RULE_implicit_member_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1857;
        this.match(CadenceParser.DOT);
        this.state = 1860;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1858;
            this.identifier();
            break;

        case 2:
            this.state = 1859;
            this.keyword();
            break;

        }
        this.state = 1864;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        if(la_===1) {
            this.state = 1862;
            this.match(CadenceParser.DOT);
            this.state = 1863;
            this.postfix_expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parenthesized_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_parenthesized_operator;
    return this;
}

Parenthesized_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesized_operatorContext.prototype.constructor = Parenthesized_operatorContext;

Parenthesized_operatorContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Parenthesized_operatorContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Parenthesized_operatorContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Parenthesized_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterParenthesized_operator(this);
	}
};

Parenthesized_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitParenthesized_operator(this);
	}
};




CadenceParser.Parenthesized_operatorContext = Parenthesized_operatorContext;

CadenceParser.prototype.parenthesized_operator = function() {

    var localctx = new Parenthesized_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, CadenceParser.RULE_parenthesized_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1866;
        this.match(CadenceParser.LPAREN);
        this.state = 1867;
        this.operator();
        this.state = 1868;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parenthesized_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_parenthesized_expression;
    return this;
}

Parenthesized_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parenthesized_expressionContext.prototype.constructor = Parenthesized_expressionContext;

Parenthesized_expressionContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Parenthesized_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Parenthesized_expressionContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Parenthesized_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterParenthesized_expression(this);
	}
};

Parenthesized_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitParenthesized_expression(this);
	}
};




CadenceParser.Parenthesized_expressionContext = Parenthesized_expressionContext;

CadenceParser.prototype.parenthesized_expression = function() {

    var localctx = new Parenthesized_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, CadenceParser.RULE_parenthesized_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1870;
        this.match(CadenceParser.LPAREN);
        this.state = 1871;
        this.expression();
        this.state = 1872;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_expression;
    return this;
}

Tuple_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_expressionContext.prototype.constructor = Tuple_expressionContext;

Tuple_expressionContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Tuple_expressionContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Tuple_expressionContext.prototype.tuple_element = function() {
    return this.getTypedRuleContext(Tuple_elementContext,0);
};

Tuple_expressionContext.prototype.COMMA = function() {
    return this.getToken(CadenceParser.COMMA, 0);
};

Tuple_expressionContext.prototype.tuple_element_list = function() {
    return this.getTypedRuleContext(Tuple_element_listContext,0);
};

Tuple_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_expression(this);
	}
};

Tuple_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_expression(this);
	}
};




CadenceParser.Tuple_expressionContext = Tuple_expressionContext;

CadenceParser.prototype.tuple_expression = function() {

    var localctx = new Tuple_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, CadenceParser.RULE_tuple_expression);
    try {
        this.state = 1882;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1874;
            this.match(CadenceParser.LPAREN);
            this.state = 1875;
            this.match(CadenceParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1876;
            this.match(CadenceParser.LPAREN);
            this.state = 1877;
            this.tuple_element();
            this.state = 1878;
            this.match(CadenceParser.COMMA);
            this.state = 1879;
            this.tuple_element_list();
            this.state = 1880;
            this.match(CadenceParser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_element_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_element_list;
    return this;
}

Tuple_element_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_element_listContext.prototype.constructor = Tuple_element_listContext;

Tuple_element_listContext.prototype.tuple_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tuple_elementContext);
    } else {
        return this.getTypedRuleContext(Tuple_elementContext,i);
    }
};

Tuple_element_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Tuple_element_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_element_list(this);
	}
};

Tuple_element_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_element_list(this);
	}
};




CadenceParser.Tuple_element_listContext = Tuple_element_listContext;

CadenceParser.prototype.tuple_element_list = function() {

    var localctx = new Tuple_element_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, CadenceParser.RULE_tuple_element_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1884;
        this.tuple_element();
        this.state = 1889;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 1885;
            this.match(CadenceParser.COMMA);
            this.state = 1886;
            this.tuple_element();
            this.state = 1891;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_element;
    return this;
}

Tuple_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_elementContext.prototype.constructor = Tuple_elementContext;

Tuple_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Tuple_elementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Tuple_elementContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Tuple_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_element(this);
	}
};

Tuple_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_element(this);
	}
};




CadenceParser.Tuple_elementContext = Tuple_elementContext;

CadenceParser.prototype.tuple_element = function() {

    var localctx = new Tuple_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, CadenceParser.RULE_tuple_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1895;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
        if(la_===1) {
            this.state = 1892;
            this.identifier();
            this.state = 1893;
            this.match(CadenceParser.COLON);

        }
        this.state = 1897;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Wildcard_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_wildcard_expression;
    return this;
}

Wildcard_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Wildcard_expressionContext.prototype.constructor = Wildcard_expressionContext;

Wildcard_expressionContext.prototype.UNDERSCORE = function() {
    return this.getToken(CadenceParser.UNDERSCORE, 0);
};

Wildcard_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterWildcard_expression(this);
	}
};

Wildcard_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitWildcard_expression(this);
	}
};




CadenceParser.Wildcard_expressionContext = Wildcard_expressionContext;

CadenceParser.prototype.wildcard_expression = function() {

    var localctx = new Wildcard_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, CadenceParser.RULE_wildcard_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1899;
        this.match(CadenceParser.UNDERSCORE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Key_path_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_key_path_expression;
    return this;
}

Key_path_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_path_expressionContext.prototype.constructor = Key_path_expressionContext;

Key_path_expressionContext.prototype.BACKSLASH = function() {
    return this.getToken(CadenceParser.BACKSLASH, 0);
};

Key_path_expressionContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Key_path_expressionContext.prototype.key_path_components = function() {
    return this.getTypedRuleContext(Key_path_componentsContext,0);
};

Key_path_expressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Key_path_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterKey_path_expression(this);
	}
};

Key_path_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitKey_path_expression(this);
	}
};




CadenceParser.Key_path_expressionContext = Key_path_expressionContext;

CadenceParser.prototype.key_path_expression = function() {

    var localctx = new Key_path_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, CadenceParser.RULE_key_path_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1901;
        this.match(CadenceParser.BACKSLASH);
        this.state = 1903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.STRING_TYPE) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.ANY - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CadenceParser.GETTER - 140)) | (1 << (CadenceParser.SETTER - 140)) | (1 << (CadenceParser.Identifier - 140)) | (1 << (CadenceParser.LPAREN - 140)) | (1 << (CadenceParser.LBRACK - 140)))) !== 0) || _la===CadenceParser.BACKTICK) {
            this.state = 1902;
            this.type(0);
        }

        this.state = 1905;
        this.match(CadenceParser.DOT);
        this.state = 1906;
        this.key_path_components();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Key_path_componentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_key_path_components;
    return this;
}

Key_path_componentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_path_componentsContext.prototype.constructor = Key_path_componentsContext;

Key_path_componentsContext.prototype.key_path_component = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Key_path_componentContext);
    } else {
        return this.getTypedRuleContext(Key_path_componentContext,i);
    }
};

Key_path_componentsContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.DOT);
    } else {
        return this.getToken(CadenceParser.DOT, i);
    }
};


Key_path_componentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterKey_path_components(this);
	}
};

Key_path_componentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitKey_path_components(this);
	}
};




CadenceParser.Key_path_componentsContext = Key_path_componentsContext;

CadenceParser.prototype.key_path_components = function() {

    var localctx = new Key_path_componentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, CadenceParser.RULE_key_path_components);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1908;
        this.key_path_component();
        this.state = 1913;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,200,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1909;
                this.match(CadenceParser.DOT);
                this.state = 1910;
                this.key_path_component(); 
            }
            this.state = 1915;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,200,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Key_path_componentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_key_path_component;
    return this;
}

Key_path_componentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_path_componentContext.prototype.constructor = Key_path_componentContext;

Key_path_componentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Key_path_componentContext.prototype.key_path_postfixes = function() {
    return this.getTypedRuleContext(Key_path_postfixesContext,0);
};

Key_path_componentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterKey_path_component(this);
	}
};

Key_path_componentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitKey_path_component(this);
	}
};




CadenceParser.Key_path_componentContext = Key_path_componentContext;

CadenceParser.prototype.key_path_component = function() {

    var localctx = new Key_path_componentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, CadenceParser.RULE_key_path_component);
    try {
        this.state = 1921;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1916;
            this.identifier();
            this.state = 1918;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
            if(la_===1) {
                this.state = 1917;
                this.key_path_postfixes();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1920;
            this.key_path_postfixes();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Key_path_postfixesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_key_path_postfixes;
    return this;
}

Key_path_postfixesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_path_postfixesContext.prototype.constructor = Key_path_postfixesContext;

Key_path_postfixesContext.prototype.key_path_postfix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Key_path_postfixContext);
    } else {
        return this.getTypedRuleContext(Key_path_postfixContext,i);
    }
};

Key_path_postfixesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterKey_path_postfixes(this);
	}
};

Key_path_postfixesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitKey_path_postfixes(this);
	}
};




CadenceParser.Key_path_postfixesContext = Key_path_postfixesContext;

CadenceParser.prototype.key_path_postfixes = function() {

    var localctx = new Key_path_postfixesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, CadenceParser.RULE_key_path_postfixes);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1924; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1923;
        		this.key_path_postfix();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1926; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,203, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Key_path_postfixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_key_path_postfix;
    return this;
}

Key_path_postfixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_path_postfixContext.prototype.constructor = Key_path_postfixContext;

Key_path_postfixContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Key_path_postfixContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

Key_path_postfixContext.prototype.SELF = function() {
    return this.getToken(CadenceParser.SELF, 0);
};

Key_path_postfixContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Key_path_postfixContext.prototype.function_call_argument_list = function() {
    return this.getTypedRuleContext(Function_call_argument_listContext,0);
};

Key_path_postfixContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Key_path_postfixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterKey_path_postfix(this);
	}
};

Key_path_postfixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitKey_path_postfix(this);
	}
};




CadenceParser.Key_path_postfixContext = Key_path_postfixContext;

CadenceParser.prototype.key_path_postfix = function() {

    var localctx = new Key_path_postfixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, CadenceParser.RULE_key_path_postfix);
    try {
        this.state = 1935;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.QUESTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 1928;
            this.match(CadenceParser.QUESTION);
            break;
        case CadenceParser.BANG:
            this.enterOuterAlt(localctx, 2);
            this.state = 1929;
            this.match(CadenceParser.BANG);
            break;
        case CadenceParser.SELF:
            this.enterOuterAlt(localctx, 3);
            this.state = 1930;
            this.match(CadenceParser.SELF);
            break;
        case CadenceParser.LBRACK:
            this.enterOuterAlt(localctx, 4);
            this.state = 1931;
            this.match(CadenceParser.LBRACK);
            this.state = 1932;
            this.function_call_argument_list();
            this.state = 1933;
            this.match(CadenceParser.RBRACK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Selector_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_selector_expression;
    return this;
}

Selector_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Selector_expressionContext.prototype.constructor = Selector_expressionContext;

Selector_expressionContext.prototype.HASH_SELECTOR = function() {
    return this.getToken(CadenceParser.HASH_SELECTOR, 0);
};

Selector_expressionContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Selector_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Selector_expressionContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Selector_expressionContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Selector_expressionContext.prototype.GETTER = function() {
    return this.getToken(CadenceParser.GETTER, 0);
};

Selector_expressionContext.prototype.SETTER = function() {
    return this.getToken(CadenceParser.SETTER, 0);
};

Selector_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSelector_expression(this);
	}
};

Selector_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSelector_expression(this);
	}
};




CadenceParser.Selector_expressionContext = Selector_expressionContext;

CadenceParser.prototype.selector_expression = function() {

    var localctx = new Selector_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, CadenceParser.RULE_selector_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1937;
        this.match(CadenceParser.HASH_SELECTOR);
        this.state = 1938;
        this.match(CadenceParser.LPAREN);
        this.state = 1941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.GETTER || _la===CadenceParser.SETTER) {
            this.state = 1939;
            _la = this._input.LA(1);
            if(!(_la===CadenceParser.GETTER || _la===CadenceParser.SETTER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1940;
            this.match(CadenceParser.COLON);
        }

        this.state = 1943;
        this.expression();
        this.state = 1944;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Key_path_string_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_key_path_string_expression;
    return this;
}

Key_path_string_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_path_string_expressionContext.prototype.constructor = Key_path_string_expressionContext;

Key_path_string_expressionContext.prototype.HASH_KEYPATH = function() {
    return this.getToken(CadenceParser.HASH_KEYPATH, 0);
};

Key_path_string_expressionContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Key_path_string_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Key_path_string_expressionContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Key_path_string_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterKey_path_string_expression(this);
	}
};

Key_path_string_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitKey_path_string_expression(this);
	}
};




CadenceParser.Key_path_string_expressionContext = Key_path_string_expressionContext;

CadenceParser.prototype.key_path_string_expression = function() {

    var localctx = new Key_path_string_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, CadenceParser.RULE_key_path_string_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1946;
        this.match(CadenceParser.HASH_KEYPATH);
        this.state = 1947;
        this.match(CadenceParser.LPAREN);
        this.state = 1948;
        this.expression();
        this.state = 1949;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Postfix_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_postfix_expression;
    return this;
}

Postfix_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Postfix_expressionContext.prototype.constructor = Postfix_expressionContext;

Postfix_expressionContext.prototype.primary_expression = function() {
    return this.getTypedRuleContext(Primary_expressionContext,0);
};

Postfix_expressionContext.prototype.function_call_suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_call_suffixContext);
    } else {
        return this.getTypedRuleContext(Function_call_suffixContext,i);
    }
};

Postfix_expressionContext.prototype.initializer_suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Initializer_suffixContext);
    } else {
        return this.getTypedRuleContext(Initializer_suffixContext,i);
    }
};

Postfix_expressionContext.prototype.explicit_member_suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Explicit_member_suffixContext);
    } else {
        return this.getTypedRuleContext(Explicit_member_suffixContext,i);
    }
};

Postfix_expressionContext.prototype.postfix_self_suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Postfix_self_suffixContext);
    } else {
        return this.getTypedRuleContext(Postfix_self_suffixContext,i);
    }
};

Postfix_expressionContext.prototype.subscript_suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subscript_suffixContext);
    } else {
        return this.getTypedRuleContext(Subscript_suffixContext,i);
    }
};

Postfix_expressionContext.prototype.forced_value_suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Forced_value_suffixContext);
    } else {
        return this.getTypedRuleContext(Forced_value_suffixContext,i);
    }
};

Postfix_expressionContext.prototype.optional_chaining_suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Optional_chaining_suffixContext);
    } else {
        return this.getTypedRuleContext(Optional_chaining_suffixContext,i);
    }
};

Postfix_expressionContext.prototype.postfix_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Postfix_operatorContext);
    } else {
        return this.getTypedRuleContext(Postfix_operatorContext,i);
    }
};

Postfix_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPostfix_expression(this);
	}
};

Postfix_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPostfix_expression(this);
	}
};




CadenceParser.Postfix_expressionContext = Postfix_expressionContext;

CadenceParser.prototype.postfix_expression = function() {

    var localctx = new Postfix_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, CadenceParser.RULE_postfix_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1951;
        this.primary_expression();
        this.state = 1961;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,207,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1959;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1952;
                    this.function_call_suffix();
                    break;

                case 2:
                    this.state = 1953;
                    this.initializer_suffix();
                    break;

                case 3:
                    this.state = 1954;
                    this.explicit_member_suffix();
                    break;

                case 4:
                    this.state = 1955;
                    this.postfix_self_suffix();
                    break;

                case 5:
                    this.state = 1956;
                    this.subscript_suffix();
                    break;

                case 6:
                    this.state = 1957;
                    this.forced_value_suffix();
                    break;

                case 7:
                    this.state = 1958;
                    this.optional_chaining_suffix();
                    break;

                } 
            }
            this.state = 1963;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,207,this._ctx);
        }

        this.state = 1967;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,208,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 1964;
                this.postfix_operator(); 
            }
            this.state = 1969;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,208,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_call_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_call_suffix;
    return this;
}

Function_call_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_call_suffixContext.prototype.constructor = Function_call_suffixContext;

Function_call_suffixContext.prototype.trailing_closures = function() {
    return this.getTypedRuleContext(Trailing_closuresContext,0);
};

Function_call_suffixContext.prototype.function_call_argument_clause = function() {
    return this.getTypedRuleContext(Function_call_argument_clauseContext,0);
};

Function_call_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_call_suffix(this);
	}
};

Function_call_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_call_suffix(this);
	}
};




CadenceParser.Function_call_suffixContext = Function_call_suffixContext;

CadenceParser.prototype.function_call_suffix = function() {

    var localctx = new Function_call_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, CadenceParser.RULE_function_call_suffix);
    var _la = 0; // Token type
    try {
        this.state = 1975;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1971;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.LPAREN) {
                this.state = 1970;
                this.function_call_argument_clause();
            }

            this.state = 1973;
            this.trailing_closures();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1974;
            this.function_call_argument_clause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initializer_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_initializer_suffix;
    return this;
}

Initializer_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_suffixContext.prototype.constructor = Initializer_suffixContext;

Initializer_suffixContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Initializer_suffixContext.prototype.INIT = function() {
    return this.getToken(CadenceParser.INIT, 0);
};

Initializer_suffixContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Initializer_suffixContext.prototype.argument_names = function() {
    return this.getTypedRuleContext(Argument_namesContext,0);
};

Initializer_suffixContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Initializer_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInitializer_suffix(this);
	}
};

Initializer_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInitializer_suffix(this);
	}
};




CadenceParser.Initializer_suffixContext = Initializer_suffixContext;

CadenceParser.prototype.initializer_suffix = function() {

    var localctx = new Initializer_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, CadenceParser.RULE_initializer_suffix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1977;
        this.match(CadenceParser.DOT);
        this.state = 1978;
        this.match(CadenceParser.INIT);
        this.state = 1983;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
        if(la_===1) {
            this.state = 1979;
            this.match(CadenceParser.LPAREN);
            this.state = 1980;
            this.argument_names();
            this.state = 1981;
            this.match(CadenceParser.RPAREN);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Explicit_member_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_explicit_member_suffix;
    return this;
}

Explicit_member_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Explicit_member_suffixContext.prototype.constructor = Explicit_member_suffixContext;

Explicit_member_suffixContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Explicit_member_suffixContext.prototype.Decimal_digits = function() {
    return this.getToken(CadenceParser.Decimal_digits, 0);
};

Explicit_member_suffixContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Explicit_member_suffixContext.prototype.generic_argument_clause = function() {
    return this.getTypedRuleContext(Generic_argument_clauseContext,0);
};

Explicit_member_suffixContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Explicit_member_suffixContext.prototype.argument_names = function() {
    return this.getTypedRuleContext(Argument_namesContext,0);
};

Explicit_member_suffixContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Explicit_member_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExplicit_member_suffix(this);
	}
};

Explicit_member_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExplicit_member_suffix(this);
	}
};




CadenceParser.Explicit_member_suffixContext = Explicit_member_suffixContext;

CadenceParser.prototype.explicit_member_suffix = function() {

    var localctx = new Explicit_member_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, CadenceParser.RULE_explicit_member_suffix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1985;
        this.match(CadenceParser.DOT);
        this.state = 1995;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.Decimal_digits:
            this.state = 1986;
            this.match(CadenceParser.Decimal_digits);
            break;
        case CadenceParser.AS:
        case CadenceParser.ALPHA:
        case CadenceParser.CATCH:
        case CadenceParser.CLASS:
        case CadenceParser.DEFAULT:
        case CadenceParser.DO:
        case CadenceParser.GUARD:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHERE:
        case CadenceParser.WHILE:
        case CadenceParser.PROTOCOL:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.WILL_SET:
        case CadenceParser.DID_SET:
        case CadenceParser.INDIRECT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.LEFT:
        case CadenceParser.RIGHT:
        case CadenceParser.NONE:
        case CadenceParser.PRECEDENCE_GROUP:
        case CadenceParser.HIGHER_THAN:
        case CadenceParser.LOWER_THAN:
        case CadenceParser.ASSIGNMENT:
        case CadenceParser.ASSOCIATIVITY:
        case CadenceParser.POSTFIX:
        case CadenceParser.OPERATOR:
        case CadenceParser.OS:
        case CadenceParser.ARCH:
        case CadenceParser.SWIFT:
        case CadenceParser.COMPILER:
        case CadenceParser.CAN_IMPORT:
        case CadenceParser.TARGET_ENVIRONMENT:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.SAFE:
        case CadenceParser.UNSAFE:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.RED:
        case CadenceParser.BLUE:
        case CadenceParser.GREEN:
        case CadenceParser.RESOURCE_NAME:
        case CadenceParser.SOME:
        case CadenceParser.TYPE:
        case CadenceParser.PRECEDENCE:
        case CadenceParser.SELF:
        case CadenceParser.SELF_BIG:
        case CadenceParser.MAC_OS:
        case CadenceParser.I_OS:
        case CadenceParser.OSX:
        case CadenceParser.WATCH_OS:
        case CadenceParser.TV_OS:
        case CadenceParser.LINUX:
        case CadenceParser.WINDOWS:
        case CadenceParser.I386:
        case CadenceParser.X86_64:
        case CadenceParser.ARM:
        case CadenceParser.ARM64:
        case CadenceParser.SIMULATOR:
        case CadenceParser.MAC_CATALYST:
        case CadenceParser.I_OS_APPLICATION_EXTENSION:
        case CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION:
        case CadenceParser.MAC_OS_APPLICATION_EXTENSION:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.GETTER:
        case CadenceParser.SETTER:
        case CadenceParser.Identifier:
        case CadenceParser.BACKTICK:
            this.state = 1987;
            this.identifier();
            this.state = 1993;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
            if(la_===1) {
                this.state = 1988;
                this.generic_argument_clause();

            } else if(la_===2) {
                this.state = 1989;
                this.match(CadenceParser.LPAREN);
                this.state = 1990;
                this.argument_names();
                this.state = 1991;
                this.match(CadenceParser.RPAREN);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Postfix_self_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_postfix_self_suffix;
    return this;
}

Postfix_self_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Postfix_self_suffixContext.prototype.constructor = Postfix_self_suffixContext;

Postfix_self_suffixContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Postfix_self_suffixContext.prototype.SELF = function() {
    return this.getToken(CadenceParser.SELF, 0);
};

Postfix_self_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPostfix_self_suffix(this);
	}
};

Postfix_self_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPostfix_self_suffix(this);
	}
};




CadenceParser.Postfix_self_suffixContext = Postfix_self_suffixContext;

CadenceParser.prototype.postfix_self_suffix = function() {

    var localctx = new Postfix_self_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, CadenceParser.RULE_postfix_self_suffix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1997;
        this.match(CadenceParser.DOT);
        this.state = 1998;
        this.match(CadenceParser.SELF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Subscript_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_subscript_suffix;
    return this;
}

Subscript_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subscript_suffixContext.prototype.constructor = Subscript_suffixContext;

Subscript_suffixContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Subscript_suffixContext.prototype.function_call_argument_list = function() {
    return this.getTypedRuleContext(Function_call_argument_listContext,0);
};

Subscript_suffixContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Subscript_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSubscript_suffix(this);
	}
};

Subscript_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSubscript_suffix(this);
	}
};




CadenceParser.Subscript_suffixContext = Subscript_suffixContext;

CadenceParser.prototype.subscript_suffix = function() {

    var localctx = new Subscript_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, CadenceParser.RULE_subscript_suffix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2000;
        this.match(CadenceParser.LBRACK);
        this.state = 2001;
        this.function_call_argument_list();
        this.state = 2002;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Forced_value_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_forced_value_suffix;
    return this;
}

Forced_value_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Forced_value_suffixContext.prototype.constructor = Forced_value_suffixContext;

Forced_value_suffixContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

Forced_value_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterForced_value_suffix(this);
	}
};

Forced_value_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitForced_value_suffix(this);
	}
};




CadenceParser.Forced_value_suffixContext = Forced_value_suffixContext;

CadenceParser.prototype.forced_value_suffix = function() {

    var localctx = new Forced_value_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, CadenceParser.RULE_forced_value_suffix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2004;
        if (!( !SwiftSupport.isBinaryOp(_input))) {
            throw new antlr4.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(_input)");
        }
        this.state = 2005;
        this.match(CadenceParser.BANG);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Optional_chaining_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_optional_chaining_suffix;
    return this;
}

Optional_chaining_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Optional_chaining_suffixContext.prototype.constructor = Optional_chaining_suffixContext;

Optional_chaining_suffixContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Optional_chaining_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOptional_chaining_suffix(this);
	}
};

Optional_chaining_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOptional_chaining_suffix(this);
	}
};




CadenceParser.Optional_chaining_suffixContext = Optional_chaining_suffixContext;

CadenceParser.prototype.optional_chaining_suffix = function() {

    var localctx = new Optional_chaining_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, CadenceParser.RULE_optional_chaining_suffix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2007;
        if (!( !SwiftSupport.isBinaryOp(_input))) {
            throw new antlr4.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(_input)");
        }
        this.state = 2008;
        this.match(CadenceParser.QUESTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_call_argument_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_call_argument_clause;
    return this;
}

Function_call_argument_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_call_argument_clauseContext.prototype.constructor = Function_call_argument_clauseContext;

Function_call_argument_clauseContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Function_call_argument_clauseContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Function_call_argument_clauseContext.prototype.function_call_argument_list = function() {
    return this.getTypedRuleContext(Function_call_argument_listContext,0);
};

Function_call_argument_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_call_argument_clause(this);
	}
};

Function_call_argument_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_call_argument_clause(this);
	}
};




CadenceParser.Function_call_argument_clauseContext = Function_call_argument_clauseContext;

CadenceParser.prototype.function_call_argument_clause = function() {

    var localctx = new Function_call_argument_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, CadenceParser.RULE_function_call_argument_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2010;
        this.match(CadenceParser.LPAREN);
        this.state = 2012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.SUPER - 66)) | (1 << (CadenceParser.FALSE - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.TRUE - 66)) | (1 << (CadenceParser.NIL - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (CadenceParser.HASH_SELECTOR - 135)) | (1 << (CadenceParser.HASH_KEYPATH - 135)) | (1 << (CadenceParser.GETTER - 135)) | (1 << (CadenceParser.SETTER - 135)) | (1 << (CadenceParser.Identifier - 135)) | (1 << (CadenceParser.DOT - 135)) | (1 << (CadenceParser.LCURLY - 135)) | (1 << (CadenceParser.LPAREN - 135)) | (1 << (CadenceParser.LBRACK - 135)) | (1 << (CadenceParser.LT - 135)) | (1 << (CadenceParser.GT - 135)) | (1 << (CadenceParser.UNDERSCORE - 135)) | (1 << (CadenceParser.BANG - 135)) | (1 << (CadenceParser.QUESTION - 135)) | (1 << (CadenceParser.AND - 135)) | (1 << (CadenceParser.SUB - 135)) | (1 << (CadenceParser.EQUAL - 135)) | (1 << (CadenceParser.OR - 135)) | (1 << (CadenceParser.DIV - 135)))) !== 0) || ((((_la - 167)) & ~0x1f) == 0 && ((1 << (_la - 167)) & ((1 << (CadenceParser.ADD - 167)) | (1 << (CadenceParser.MUL - 167)) | (1 << (CadenceParser.MOD - 167)) | (1 << (CadenceParser.CARET - 167)) | (1 << (CadenceParser.TILDE - 167)) | (1 << (CadenceParser.BACKTICK - 167)) | (1 << (CadenceParser.BACKSLASH - 167)) | (1 << (CadenceParser.Operator_head_other - 167)) | (1 << (CadenceParser.Binary_literal - 167)) | (1 << (CadenceParser.Octal_literal - 167)) | (1 << (CadenceParser.Decimal_digits - 167)) | (1 << (CadenceParser.Decimal_literal - 167)) | (1 << (CadenceParser.Hexadecimal_literal - 167)) | (1 << (CadenceParser.Floating_point_literal - 167)) | (1 << (CadenceParser.Multi_line_extended_string_open - 167)) | (1 << (CadenceParser.Single_line_extended_string_open - 167)) | (1 << (CadenceParser.Multi_line_string_open - 167)) | (1 << (CadenceParser.Single_line_string_open - 167)))) !== 0)) {
            this.state = 2011;
            this.function_call_argument_list();
        }

        this.state = 2014;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_call_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_call_argument_list;
    return this;
}

Function_call_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_call_argument_listContext.prototype.constructor = Function_call_argument_listContext;

Function_call_argument_listContext.prototype.function_call_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_call_argumentContext);
    } else {
        return this.getTypedRuleContext(Function_call_argumentContext,i);
    }
};

Function_call_argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Function_call_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_call_argument_list(this);
	}
};

Function_call_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_call_argument_list(this);
	}
};




CadenceParser.Function_call_argument_listContext = Function_call_argument_listContext;

CadenceParser.prototype.function_call_argument_list = function() {

    var localctx = new Function_call_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, CadenceParser.RULE_function_call_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2016;
        this.function_call_argument();
        this.state = 2021;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 2017;
            this.match(CadenceParser.COMMA);
            this.state = 2018;
            this.function_call_argument();
            this.state = 2023;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_call_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_call_argument;
    return this;
}

Function_call_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_call_argumentContext.prototype.constructor = Function_call_argumentContext;

Function_call_argumentContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Function_call_argumentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Function_call_argumentContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Function_call_argumentContext.prototype.argument_name = function() {
    return this.getTypedRuleContext(Argument_nameContext,0);
};

Function_call_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_call_argument(this);
	}
};

Function_call_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_call_argument(this);
	}
};




CadenceParser.Function_call_argumentContext = Function_call_argumentContext;

CadenceParser.prototype.function_call_argument = function() {

    var localctx = new Function_call_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, CadenceParser.RULE_function_call_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2025;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
        if(la_===1) {
            this.state = 2024;
            this.argument_name();

        }
        this.state = 2030;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2027;
            this.identifier();
            break;

        case 2:
            this.state = 2028;
            this.expression();
            break;

        case 3:
            this.state = 2029;
            this.operator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Trailing_closuresContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_trailing_closures;
    return this;
}

Trailing_closuresContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trailing_closuresContext.prototype.constructor = Trailing_closuresContext;

Trailing_closuresContext.prototype.closure_expression = function() {
    return this.getTypedRuleContext(Closure_expressionContext,0);
};

Trailing_closuresContext.prototype.labeled_trailing_closures = function() {
    return this.getTypedRuleContext(Labeled_trailing_closuresContext,0);
};

Trailing_closuresContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTrailing_closures(this);
	}
};

Trailing_closuresContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTrailing_closures(this);
	}
};




CadenceParser.Trailing_closuresContext = Trailing_closuresContext;

CadenceParser.prototype.trailing_closures = function() {

    var localctx = new Trailing_closuresContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, CadenceParser.RULE_trailing_closures);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2032;
        this.closure_expression();
        this.state = 2034;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
        if(la_===1) {
            this.state = 2033;
            this.labeled_trailing_closures();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Labeled_trailing_closuresContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_labeled_trailing_closures;
    return this;
}

Labeled_trailing_closuresContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Labeled_trailing_closuresContext.prototype.constructor = Labeled_trailing_closuresContext;

Labeled_trailing_closuresContext.prototype.labeled_trailing_closure = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Labeled_trailing_closureContext);
    } else {
        return this.getTypedRuleContext(Labeled_trailing_closureContext,i);
    }
};

Labeled_trailing_closuresContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLabeled_trailing_closures(this);
	}
};

Labeled_trailing_closuresContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLabeled_trailing_closures(this);
	}
};




CadenceParser.Labeled_trailing_closuresContext = Labeled_trailing_closuresContext;

CadenceParser.prototype.labeled_trailing_closures = function() {

    var localctx = new Labeled_trailing_closuresContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, CadenceParser.RULE_labeled_trailing_closures);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2037; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2036;
        		this.labeled_trailing_closure();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2039; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,219, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Labeled_trailing_closureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_labeled_trailing_closure;
    return this;
}

Labeled_trailing_closureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Labeled_trailing_closureContext.prototype.constructor = Labeled_trailing_closureContext;

Labeled_trailing_closureContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Labeled_trailing_closureContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Labeled_trailing_closureContext.prototype.closure_expression = function() {
    return this.getTypedRuleContext(Closure_expressionContext,0);
};

Labeled_trailing_closureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLabeled_trailing_closure(this);
	}
};

Labeled_trailing_closureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLabeled_trailing_closure(this);
	}
};




CadenceParser.Labeled_trailing_closureContext = Labeled_trailing_closureContext;

CadenceParser.prototype.labeled_trailing_closure = function() {

    var localctx = new Labeled_trailing_closureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, CadenceParser.RULE_labeled_trailing_closure);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2041;
        this.identifier();
        this.state = 2042;
        this.match(CadenceParser.COLON);
        this.state = 2043;
        this.closure_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Argument_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_argument_names;
    return this;
}

Argument_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_namesContext.prototype.constructor = Argument_namesContext;

Argument_namesContext.prototype.argument_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Argument_nameContext);
    } else {
        return this.getTypedRuleContext(Argument_nameContext,i);
    }
};

Argument_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArgument_names(this);
	}
};

Argument_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArgument_names(this);
	}
};




CadenceParser.Argument_namesContext = Argument_namesContext;

CadenceParser.prototype.argument_names = function() {

    var localctx = new Argument_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, CadenceParser.RULE_argument_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2046; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2045;
            this.argument_name();
            this.state = 2048; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CadenceParser.GETTER - 140)) | (1 << (CadenceParser.SETTER - 140)) | (1 << (CadenceParser.Identifier - 140)))) !== 0) || _la===CadenceParser.BACKTICK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Argument_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_argument_name;
    return this;
}

Argument_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_nameContext.prototype.constructor = Argument_nameContext;

Argument_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Argument_nameContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Argument_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArgument_name(this);
	}
};

Argument_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArgument_name(this);
	}
};




CadenceParser.Argument_nameContext = Argument_nameContext;

CadenceParser.prototype.argument_name = function() {

    var localctx = new Argument_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, CadenceParser.RULE_argument_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2050;
        this.identifier();
        this.state = 2051;
        this.match(CadenceParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.function_type = function() {
    return this.getTypedRuleContext(Function_typeContext,0);
};

TypeContext.prototype.array_type = function() {
    return this.getTypedRuleContext(Array_typeContext,0);
};

TypeContext.prototype.dictionary_type = function() {
    return this.getTypedRuleContext(Dictionary_typeContext,0);
};

TypeContext.prototype.protocol_composition_type = function() {
    return this.getTypedRuleContext(Protocol_composition_typeContext,0);
};

TypeContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

TypeContext.prototype.tuple_type = function() {
    return this.getTypedRuleContext(Tuple_typeContext,0);
};

TypeContext.prototype.opaque_type = function() {
    return this.getTypedRuleContext(Opaque_typeContext,0);
};

TypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

TypeContext.prototype.self_type = function() {
    return this.getTypedRuleContext(Self_typeContext,0);
};

TypeContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

TypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

TypeContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

TypeContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

TypeContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

TypeContext.prototype.TYPE = function() {
    return this.getToken(CadenceParser.TYPE, 0);
};

TypeContext.prototype.PROTOCOL = function() {
    return this.getToken(CadenceParser.PROTOCOL, 0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType(this);
	}
};



CadenceParser.prototype.type = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 468;
    this.enterRecursionRule(localctx, 468, CadenceParser.RULE_type, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2067;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2054;
            this.function_type();
            break;

        case 2:
            this.state = 2055;
            this.array_type();
            break;

        case 3:
            this.state = 2056;
            this.dictionary_type();
            break;

        case 4:
            this.state = 2057;
            this.protocol_composition_type();
            break;

        case 5:
            this.state = 2058;
            this.type_identifier();
            break;

        case 6:
            this.state = 2059;
            this.tuple_type();
            break;

        case 7:
            this.state = 2060;
            this.opaque_type();
            break;

        case 8:
            this.state = 2061;
            this.any_type();
            break;

        case 9:
            this.state = 2062;
            this.self_type();
            break;

        case 10:
            this.state = 2063;
            this.match(CadenceParser.LPAREN);
            this.state = 2064;
            this.type(0);
            this.state = 2065;
            this.match(CadenceParser.RPAREN);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 2082;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,223,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CadenceParser.RULE_type);
                this.state = 2069;
                if (!( this.precpred(this._ctx, 4))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                }
                this.state = 2078;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2070;
                    if (!( !SwiftSupport.isBinaryOp(_input))) {
                        throw new antlr4.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(_input)");
                    }
                    this.state = 2071;
                    this.match(CadenceParser.QUESTION);
                    break;

                case 2:
                    this.state = 2072;
                    if (!( !SwiftSupport.isBinaryOp(_input))) {
                        throw new antlr4.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(_input)");
                    }
                    this.state = 2073;
                    this.match(CadenceParser.BANG);
                    break;

                case 3:
                    this.state = 2074;
                    this.match(CadenceParser.DOT);
                    this.state = 2075;
                    this.match(CadenceParser.TYPE);
                    break;

                case 4:
                    this.state = 2076;
                    this.match(CadenceParser.DOT);
                    this.state = 2077;
                    this.match(CadenceParser.PROTOCOL);
                    break;

                } 
            }
            this.state = 2084;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,223,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Type_annotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_annotation;
    return this;
}

Type_annotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_annotationContext.prototype.constructor = Type_annotationContext;

Type_annotationContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Type_annotationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Type_annotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_annotation(this);
	}
};

Type_annotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_annotation(this);
	}
};




CadenceParser.Type_annotationContext = Type_annotationContext;

CadenceParser.prototype.type_annotation = function() {

    var localctx = new Type_annotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, CadenceParser.RULE_type_annotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2085;
        this.match(CadenceParser.COLON);
        this.state = 2086;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_identifier;
    return this;
}

Type_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifierContext.prototype.constructor = Type_identifierContext;

Type_identifierContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_identifierContext.prototype.generic_argument_clause = function() {
    return this.getTypedRuleContext(Generic_argument_clauseContext,0);
};

Type_identifierContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Type_identifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Type_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_identifier(this);
	}
};

Type_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_identifier(this);
	}
};




CadenceParser.Type_identifierContext = Type_identifierContext;

CadenceParser.prototype.type_identifier = function() {

    var localctx = new Type_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, CadenceParser.RULE_type_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2088;
        this.type_name();
        this.state = 2090;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
        if(la_===1) {
            this.state = 2089;
            this.generic_argument_clause();

        }
        this.state = 2094;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
        if(la_===1) {
            this.state = 2092;
            this.match(CadenceParser.DOT);
            this.state = 2093;
            this.type_identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_name;
    return this;
}

Type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_nameContext.prototype.constructor = Type_nameContext;

Type_nameContext.prototype.STRING_TYPE = function() {
    return this.getToken(CadenceParser.STRING_TYPE, 0);
};

Type_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_name(this);
	}
};

Type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_name(this);
	}
};




CadenceParser.Type_nameContext = Type_nameContext;

CadenceParser.prototype.type_name = function() {

    var localctx = new Type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, CadenceParser.RULE_type_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2098;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.STRING_TYPE:
            this.state = 2096;
            this.match(CadenceParser.STRING_TYPE);
            break;
        case CadenceParser.AS:
        case CadenceParser.ALPHA:
        case CadenceParser.CATCH:
        case CadenceParser.CLASS:
        case CadenceParser.DEFAULT:
        case CadenceParser.DO:
        case CadenceParser.GUARD:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHERE:
        case CadenceParser.WHILE:
        case CadenceParser.PROTOCOL:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.WILL_SET:
        case CadenceParser.DID_SET:
        case CadenceParser.INDIRECT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.LEFT:
        case CadenceParser.RIGHT:
        case CadenceParser.NONE:
        case CadenceParser.PRECEDENCE_GROUP:
        case CadenceParser.HIGHER_THAN:
        case CadenceParser.LOWER_THAN:
        case CadenceParser.ASSIGNMENT:
        case CadenceParser.ASSOCIATIVITY:
        case CadenceParser.POSTFIX:
        case CadenceParser.OPERATOR:
        case CadenceParser.OS:
        case CadenceParser.ARCH:
        case CadenceParser.SWIFT:
        case CadenceParser.COMPILER:
        case CadenceParser.CAN_IMPORT:
        case CadenceParser.TARGET_ENVIRONMENT:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.SAFE:
        case CadenceParser.UNSAFE:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.RED:
        case CadenceParser.BLUE:
        case CadenceParser.GREEN:
        case CadenceParser.RESOURCE_NAME:
        case CadenceParser.SOME:
        case CadenceParser.TYPE:
        case CadenceParser.PRECEDENCE:
        case CadenceParser.SELF:
        case CadenceParser.SELF_BIG:
        case CadenceParser.MAC_OS:
        case CadenceParser.I_OS:
        case CadenceParser.OSX:
        case CadenceParser.WATCH_OS:
        case CadenceParser.TV_OS:
        case CadenceParser.LINUX:
        case CadenceParser.WINDOWS:
        case CadenceParser.I386:
        case CadenceParser.X86_64:
        case CadenceParser.ARM:
        case CadenceParser.ARM64:
        case CadenceParser.SIMULATOR:
        case CadenceParser.MAC_CATALYST:
        case CadenceParser.I_OS_APPLICATION_EXTENSION:
        case CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION:
        case CadenceParser.MAC_OS_APPLICATION_EXTENSION:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.GETTER:
        case CadenceParser.SETTER:
        case CadenceParser.Identifier:
        case CadenceParser.BACKTICK:
            this.state = 2097;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_type;
    return this;
}

Tuple_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_typeContext.prototype.constructor = Tuple_typeContext;

Tuple_typeContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Tuple_typeContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Tuple_typeContext.prototype.tuple_type_element_list = function() {
    return this.getTypedRuleContext(Tuple_type_element_listContext,0);
};

Tuple_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_type(this);
	}
};

Tuple_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_type(this);
	}
};




CadenceParser.Tuple_typeContext = Tuple_typeContext;

CadenceParser.prototype.tuple_type = function() {

    var localctx = new Tuple_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, CadenceParser.RULE_tuple_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2100;
        this.match(CadenceParser.LPAREN);
        this.state = 2102;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.STRING_TYPE) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.ANY - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CadenceParser.GETTER - 140)) | (1 << (CadenceParser.SETTER - 140)) | (1 << (CadenceParser.Identifier - 140)) | (1 << (CadenceParser.LPAREN - 140)) | (1 << (CadenceParser.LBRACK - 140)))) !== 0) || _la===CadenceParser.BACKTICK) {
            this.state = 2101;
            this.tuple_type_element_list();
        }

        this.state = 2104;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_type_element_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_type_element_list;
    return this;
}

Tuple_type_element_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_type_element_listContext.prototype.constructor = Tuple_type_element_listContext;

Tuple_type_element_listContext.prototype.tuple_type_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tuple_type_elementContext);
    } else {
        return this.getTypedRuleContext(Tuple_type_elementContext,i);
    }
};

Tuple_type_element_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Tuple_type_element_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_type_element_list(this);
	}
};

Tuple_type_element_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_type_element_list(this);
	}
};




CadenceParser.Tuple_type_element_listContext = Tuple_type_element_listContext;

CadenceParser.prototype.tuple_type_element_list = function() {

    var localctx = new Tuple_type_element_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, CadenceParser.RULE_tuple_type_element_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2106;
        this.tuple_type_element();
        this.state = 2111;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 2107;
            this.match(CadenceParser.COMMA);
            this.state = 2108;
            this.tuple_type_element();
            this.state = 2113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_type_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_type_element;
    return this;
}

Tuple_type_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_type_elementContext.prototype.constructor = Tuple_type_elementContext;

Tuple_type_elementContext.prototype.element_name = function() {
    return this.getTypedRuleContext(Element_nameContext,0);
};

Tuple_type_elementContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

Tuple_type_elementContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Tuple_type_elementContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Tuple_type_elementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Tuple_type_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_type_element(this);
	}
};

Tuple_type_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_type_element(this);
	}
};




CadenceParser.Tuple_type_elementContext = Tuple_type_elementContext;

CadenceParser.prototype.tuple_type_element = function() {

    var localctx = new Tuple_type_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, CadenceParser.RULE_tuple_type_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2118;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2114;
            this.element_name();
            this.state = 2115;
            this.type_annotation();
            break;

        case 2:
            this.state = 2117;
            this.type(0);
            break;

        }
        this.state = 2122;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.EQUAL) {
            this.state = 2120;
            this.match(CadenceParser.EQUAL);
            this.state = 2121;
            this.expression();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Element_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_element_name;
    return this;
}

Element_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Element_nameContext.prototype.constructor = Element_nameContext;

Element_nameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Element_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterElement_name(this);
	}
};

Element_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitElement_name(this);
	}
};




CadenceParser.Element_nameContext = Element_nameContext;

CadenceParser.prototype.element_name = function() {

    var localctx = new Element_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, CadenceParser.RULE_element_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2125; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2124;
            this.identifier();
            this.state = 2127; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CadenceParser.GETTER - 140)) | (1 << (CadenceParser.SETTER - 140)) | (1 << (CadenceParser.Identifier - 140)))) !== 0) || _la===CadenceParser.BACKTICK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_type;
    return this;
}

Function_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_typeContext.prototype.constructor = Function_typeContext;

Function_typeContext.prototype.function_type_argument_clause = function() {
    return this.getTypedRuleContext(Function_type_argument_clauseContext,0);
};

Function_typeContext.prototype.arrow_operator = function() {
    return this.getTypedRuleContext(Arrow_operatorContext,0);
};

Function_typeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Function_typeContext.prototype.THROWS = function() {
    return this.getToken(CadenceParser.THROWS, 0);
};

Function_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_type(this);
	}
};

Function_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_type(this);
	}
};




CadenceParser.Function_typeContext = Function_typeContext;

CadenceParser.prototype.function_type = function() {

    var localctx = new Function_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, CadenceParser.RULE_function_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2129;
        this.function_type_argument_clause();
        this.state = 2131;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.THROWS) {
            this.state = 2130;
            this.match(CadenceParser.THROWS);
        }

        this.state = 2133;
        this.arrow_operator();
        this.state = 2134;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_type_argument_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_type_argument_clause;
    return this;
}

Function_type_argument_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_type_argument_clauseContext.prototype.constructor = Function_type_argument_clauseContext;

Function_type_argument_clauseContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Function_type_argument_clauseContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Function_type_argument_clauseContext.prototype.function_type_argument_list = function() {
    return this.getTypedRuleContext(Function_type_argument_listContext,0);
};

Function_type_argument_clauseContext.prototype.range_operator = function() {
    return this.getTypedRuleContext(Range_operatorContext,0);
};

Function_type_argument_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_type_argument_clause(this);
	}
};

Function_type_argument_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_type_argument_clause(this);
	}
};




CadenceParser.Function_type_argument_clauseContext = Function_type_argument_clauseContext;

CadenceParser.prototype.function_type_argument_clause = function() {

    var localctx = new Function_type_argument_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, CadenceParser.RULE_function_type_argument_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2136;
        this.match(CadenceParser.LPAREN);
        this.state = 2141;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.STRING_TYPE) | (1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.ANY - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.INOUT - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CadenceParser.GETTER - 140)) | (1 << (CadenceParser.SETTER - 140)) | (1 << (CadenceParser.Identifier - 140)) | (1 << (CadenceParser.LPAREN - 140)) | (1 << (CadenceParser.LBRACK - 140)))) !== 0) || _la===CadenceParser.BACKTICK) {
            this.state = 2137;
            this.function_type_argument_list();
            this.state = 2139;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.DOT) {
                this.state = 2138;
                this.range_operator();
            }

        }

        this.state = 2143;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_type_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_type_argument_list;
    return this;
}

Function_type_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_type_argument_listContext.prototype.constructor = Function_type_argument_listContext;

Function_type_argument_listContext.prototype.function_type_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_type_argumentContext);
    } else {
        return this.getTypedRuleContext(Function_type_argumentContext,i);
    }
};

Function_type_argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Function_type_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_type_argument_list(this);
	}
};

Function_type_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_type_argument_list(this);
	}
};




CadenceParser.Function_type_argument_listContext = Function_type_argument_listContext;

CadenceParser.prototype.function_type_argument_list = function() {

    var localctx = new Function_type_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, CadenceParser.RULE_function_type_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2145;
        this.function_type_argument();
        this.state = 2150;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 2146;
            this.match(CadenceParser.COMMA);
            this.state = 2147;
            this.function_type_argument();
            this.state = 2152;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_type_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_type_argument;
    return this;
}

Function_type_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_type_argumentContext.prototype.constructor = Function_type_argumentContext;

Function_type_argumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Function_type_argumentContext.prototype.INOUT = function() {
    return this.getToken(CadenceParser.INOUT, 0);
};

Function_type_argumentContext.prototype.argument_label = function() {
    return this.getTypedRuleContext(Argument_labelContext,0);
};

Function_type_argumentContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

Function_type_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_type_argument(this);
	}
};

Function_type_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_type_argument(this);
	}
};




CadenceParser.Function_type_argumentContext = Function_type_argumentContext;

CadenceParser.prototype.function_type_argument = function() {

    var localctx = new Function_type_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, CadenceParser.RULE_function_type_argument);
    var _la = 0; // Token type
    try {
        this.state = 2160;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2154;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.INOUT) {
                this.state = 2153;
                this.match(CadenceParser.INOUT);
            }

            this.state = 2156;
            this.type(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2157;
            this.argument_label();
            this.state = 2158;
            this.type_annotation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Argument_labelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_argument_label;
    return this;
}

Argument_labelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_labelContext.prototype.constructor = Argument_labelContext;

Argument_labelContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Argument_labelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArgument_label(this);
	}
};

Argument_labelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArgument_label(this);
	}
};




CadenceParser.Argument_labelContext = Argument_labelContext;

CadenceParser.prototype.argument_label = function() {

    var localctx = new Argument_labelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, CadenceParser.RULE_argument_label);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2163; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2162;
            this.identifier();
            this.state = 2165; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (CadenceParser.GETTER - 140)) | (1 << (CadenceParser.SETTER - 140)) | (1 << (CadenceParser.Identifier - 140)))) !== 0) || _la===CadenceParser.BACKTICK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_array_type;
    return this;
}

Array_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_typeContext.prototype.constructor = Array_typeContext;

Array_typeContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Array_typeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Array_typeContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Array_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArray_type(this);
	}
};

Array_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArray_type(this);
	}
};




CadenceParser.Array_typeContext = Array_typeContext;

CadenceParser.prototype.array_type = function() {

    var localctx = new Array_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, CadenceParser.RULE_array_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2167;
        this.match(CadenceParser.LBRACK);
        this.state = 2168;
        this.type(0);
        this.state = 2169;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dictionary_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dictionary_type;
    return this;
}

Dictionary_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dictionary_typeContext.prototype.constructor = Dictionary_typeContext;

Dictionary_typeContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Dictionary_typeContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

Dictionary_typeContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Dictionary_typeContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Dictionary_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDictionary_type(this);
	}
};

Dictionary_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDictionary_type(this);
	}
};




CadenceParser.Dictionary_typeContext = Dictionary_typeContext;

CadenceParser.prototype.dictionary_type = function() {

    var localctx = new Dictionary_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, CadenceParser.RULE_dictionary_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2171;
        this.match(CadenceParser.LBRACK);
        this.state = 2172;
        this.type(0);
        this.state = 2173;
        this.match(CadenceParser.COLON);
        this.state = 2174;
        this.type(0);
        this.state = 2175;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_composition_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_composition_type;
    return this;
}

Protocol_composition_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_composition_typeContext.prototype.constructor = Protocol_composition_typeContext;

Protocol_composition_typeContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Protocol_composition_typeContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.AND);
    } else {
        return this.getToken(CadenceParser.AND, i);
    }
};


Protocol_composition_typeContext.prototype.trailing_composition_and = function() {
    return this.getTypedRuleContext(Trailing_composition_andContext,0);
};

Protocol_composition_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_composition_type(this);
	}
};

Protocol_composition_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_composition_type(this);
	}
};




CadenceParser.Protocol_composition_typeContext = Protocol_composition_typeContext;

CadenceParser.prototype.protocol_composition_type = function() {

    var localctx = new Protocol_composition_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, CadenceParser.RULE_protocol_composition_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2177;
        this.type_identifier();
        this.state = 2182;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,239,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2178;
                this.match(CadenceParser.AND);
                this.state = 2179;
                this.type_identifier(); 
            }
            this.state = 2184;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,239,this._ctx);
        }

        this.state = 2186;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
        if(la_===1) {
            this.state = 2185;
            this.trailing_composition_and();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Trailing_composition_andContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_trailing_composition_and;
    return this;
}

Trailing_composition_andContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trailing_composition_andContext.prototype.constructor = Trailing_composition_andContext;

Trailing_composition_andContext.prototype.AND = function() {
    return this.getToken(CadenceParser.AND, 0);
};

Trailing_composition_andContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTrailing_composition_and(this);
	}
};

Trailing_composition_andContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTrailing_composition_and(this);
	}
};




CadenceParser.Trailing_composition_andContext = Trailing_composition_andContext;

CadenceParser.prototype.trailing_composition_and = function() {

    var localctx = new Trailing_composition_andContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, CadenceParser.RULE_trailing_composition_and);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2188;
        if (!( !SwiftSupport.isBinaryOp(_input))) {
            throw new antlr4.error.FailedPredicateException(this, "!SwiftSupport.isBinaryOp(_input)");
        }
        this.state = 2189;
        this.match(CadenceParser.AND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Opaque_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_opaque_type;
    return this;
}

Opaque_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Opaque_typeContext.prototype.constructor = Opaque_typeContext;

Opaque_typeContext.prototype.SOME = function() {
    return this.getToken(CadenceParser.SOME, 0);
};

Opaque_typeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Opaque_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOpaque_type(this);
	}
};

Opaque_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOpaque_type(this);
	}
};




CadenceParser.Opaque_typeContext = Opaque_typeContext;

CadenceParser.prototype.opaque_type = function() {

    var localctx = new Opaque_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, CadenceParser.RULE_opaque_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2191;
        this.match(CadenceParser.SOME);
        this.state = 2192;
        this.type(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_any_type;
    return this;
}

Any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_typeContext.prototype.constructor = Any_typeContext;

Any_typeContext.prototype.ANY = function() {
    return this.getToken(CadenceParser.ANY, 0);
};

Any_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterAny_type(this);
	}
};

Any_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitAny_type(this);
	}
};




CadenceParser.Any_typeContext = Any_typeContext;

CadenceParser.prototype.any_type = function() {

    var localctx = new Any_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, CadenceParser.RULE_any_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2194;
        this.match(CadenceParser.ANY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Self_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_self_type;
    return this;
}

Self_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Self_typeContext.prototype.constructor = Self_typeContext;

Self_typeContext.prototype.SELF_BIG = function() {
    return this.getToken(CadenceParser.SELF_BIG, 0);
};

Self_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSelf_type(this);
	}
};

Self_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSelf_type(this);
	}
};




CadenceParser.Self_typeContext = Self_typeContext;

CadenceParser.prototype.self_type = function() {

    var localctx = new Self_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, CadenceParser.RULE_self_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2196;
        this.match(CadenceParser.SELF_BIG);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_inheritance_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_inheritance_clause;
    return this;
}

Type_inheritance_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_inheritance_clauseContext.prototype.constructor = Type_inheritance_clauseContext;

Type_inheritance_clauseContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Type_inheritance_clauseContext.prototype.type_inheritance_list = function() {
    return this.getTypedRuleContext(Type_inheritance_listContext,0);
};

Type_inheritance_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_inheritance_clause(this);
	}
};

Type_inheritance_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_inheritance_clause(this);
	}
};




CadenceParser.Type_inheritance_clauseContext = Type_inheritance_clauseContext;

CadenceParser.prototype.type_inheritance_clause = function() {

    var localctx = new Type_inheritance_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, CadenceParser.RULE_type_inheritance_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2198;
        this.match(CadenceParser.COLON);
        this.state = 2199;
        this.type_inheritance_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_inheritance_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_inheritance_list;
    return this;
}

Type_inheritance_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_inheritance_listContext.prototype.constructor = Type_inheritance_listContext;

Type_inheritance_listContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Type_inheritance_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Type_inheritance_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_inheritance_list(this);
	}
};

Type_inheritance_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_inheritance_list(this);
	}
};




CadenceParser.Type_inheritance_listContext = Type_inheritance_listContext;

CadenceParser.prototype.type_inheritance_list = function() {

    var localctx = new Type_inheritance_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, CadenceParser.RULE_type_inheritance_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2201;
        this.type_identifier();
        this.state = 2206;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 2202;
            this.match(CadenceParser.COMMA);
            this.state = 2203;
            this.type_identifier();
            this.state = 2208;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.LINUX = function() {
    return this.getToken(CadenceParser.LINUX, 0);
};

IdentifierContext.prototype.WINDOWS = function() {
    return this.getToken(CadenceParser.WINDOWS, 0);
};

IdentifierContext.prototype.ALPHA = function() {
    return this.getToken(CadenceParser.ALPHA, 0);
};

IdentifierContext.prototype.ARCH = function() {
    return this.getToken(CadenceParser.ARCH, 0);
};

IdentifierContext.prototype.ARM = function() {
    return this.getToken(CadenceParser.ARM, 0);
};

IdentifierContext.prototype.ARM64 = function() {
    return this.getToken(CadenceParser.ARM64, 0);
};

IdentifierContext.prototype.ASSIGNMENT = function() {
    return this.getToken(CadenceParser.ASSIGNMENT, 0);
};

IdentifierContext.prototype.BLUE = function() {
    return this.getToken(CadenceParser.BLUE, 0);
};

IdentifierContext.prototype.CAN_IMPORT = function() {
    return this.getToken(CadenceParser.CAN_IMPORT, 0);
};

IdentifierContext.prototype.COMPILER = function() {
    return this.getToken(CadenceParser.COMPILER, 0);
};

IdentifierContext.prototype.FILE = function() {
    return this.getToken(CadenceParser.FILE, 0);
};

IdentifierContext.prototype.GREEN = function() {
    return this.getToken(CadenceParser.GREEN, 0);
};

IdentifierContext.prototype.HIGHER_THAN = function() {
    return this.getToken(CadenceParser.HIGHER_THAN, 0);
};

IdentifierContext.prototype.I386 = function() {
    return this.getToken(CadenceParser.I386, 0);
};

IdentifierContext.prototype.I_OS = function() {
    return this.getToken(CadenceParser.I_OS, 0);
};

IdentifierContext.prototype.OSX = function() {
    return this.getToken(CadenceParser.OSX, 0);
};

IdentifierContext.prototype.I_OS_APPLICATION_EXTENSION = function() {
    return this.getToken(CadenceParser.I_OS_APPLICATION_EXTENSION, 0);
};

IdentifierContext.prototype.LINE = function() {
    return this.getToken(CadenceParser.LINE, 0);
};

IdentifierContext.prototype.LOWER_THAN = function() {
    return this.getToken(CadenceParser.LOWER_THAN, 0);
};

IdentifierContext.prototype.MAC_CATALYST = function() {
    return this.getToken(CadenceParser.MAC_CATALYST, 0);
};

IdentifierContext.prototype.MAC_CATALYST_APPLICATION_EXTENSION = function() {
    return this.getToken(CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION, 0);
};

IdentifierContext.prototype.MAC_OS = function() {
    return this.getToken(CadenceParser.MAC_OS, 0);
};

IdentifierContext.prototype.MAC_OS_APPLICATION_EXTENSION = function() {
    return this.getToken(CadenceParser.MAC_OS_APPLICATION_EXTENSION, 0);
};

IdentifierContext.prototype.OS = function() {
    return this.getToken(CadenceParser.OS, 0);
};

IdentifierContext.prototype.PRECEDENCE_GROUP = function() {
    return this.getToken(CadenceParser.PRECEDENCE_GROUP, 0);
};

IdentifierContext.prototype.RED = function() {
    return this.getToken(CadenceParser.RED, 0);
};

IdentifierContext.prototype.RESOURCE_NAME = function() {
    return this.getToken(CadenceParser.RESOURCE_NAME, 0);
};

IdentifierContext.prototype.SAFE = function() {
    return this.getToken(CadenceParser.SAFE, 0);
};

IdentifierContext.prototype.SIMULATOR = function() {
    return this.getToken(CadenceParser.SIMULATOR, 0);
};

IdentifierContext.prototype.SOME = function() {
    return this.getToken(CadenceParser.SOME, 0);
};

IdentifierContext.prototype.SWIFT = function() {
    return this.getToken(CadenceParser.SWIFT, 0);
};

IdentifierContext.prototype.TARGET_ENVIRONMENT = function() {
    return this.getToken(CadenceParser.TARGET_ENVIRONMENT, 0);
};

IdentifierContext.prototype.TV_OS = function() {
    return this.getToken(CadenceParser.TV_OS, 0);
};

IdentifierContext.prototype.UNSAFE = function() {
    return this.getToken(CadenceParser.UNSAFE, 0);
};

IdentifierContext.prototype.WATCH_OS = function() {
    return this.getToken(CadenceParser.WATCH_OS, 0);
};

IdentifierContext.prototype.X86_64 = function() {
    return this.getToken(CadenceParser.X86_64, 0);
};

IdentifierContext.prototype.ASSOCIATIVITY = function() {
    return this.getToken(CadenceParser.ASSOCIATIVITY, 0);
};

IdentifierContext.prototype.CONVENIENCE = function() {
    return this.getToken(CadenceParser.CONVENIENCE, 0);
};

IdentifierContext.prototype.DYNAMIC = function() {
    return this.getToken(CadenceParser.DYNAMIC, 0);
};

IdentifierContext.prototype.DID_SET = function() {
    return this.getToken(CadenceParser.DID_SET, 0);
};

IdentifierContext.prototype.FINAL = function() {
    return this.getToken(CadenceParser.FINAL, 0);
};

IdentifierContext.prototype.GET = function() {
    return this.getToken(CadenceParser.GET, 0);
};

IdentifierContext.prototype.INFIX = function() {
    return this.getToken(CadenceParser.INFIX, 0);
};

IdentifierContext.prototype.INDIRECT = function() {
    return this.getToken(CadenceParser.INDIRECT, 0);
};

IdentifierContext.prototype.LAZY = function() {
    return this.getToken(CadenceParser.LAZY, 0);
};

IdentifierContext.prototype.LEFT = function() {
    return this.getToken(CadenceParser.LEFT, 0);
};

IdentifierContext.prototype.MUTATING = function() {
    return this.getToken(CadenceParser.MUTATING, 0);
};

IdentifierContext.prototype.NONE = function() {
    return this.getToken(CadenceParser.NONE, 0);
};

IdentifierContext.prototype.NONMUTATING = function() {
    return this.getToken(CadenceParser.NONMUTATING, 0);
};

IdentifierContext.prototype.OPTIONAL = function() {
    return this.getToken(CadenceParser.OPTIONAL, 0);
};

IdentifierContext.prototype.OVERRIDE = function() {
    return this.getToken(CadenceParser.OVERRIDE, 0);
};

IdentifierContext.prototype.POSTFIX = function() {
    return this.getToken(CadenceParser.POSTFIX, 0);
};

IdentifierContext.prototype.PRECEDENCE = function() {
    return this.getToken(CadenceParser.PRECEDENCE, 0);
};

IdentifierContext.prototype.PREFIX = function() {
    return this.getToken(CadenceParser.PREFIX, 0);
};

IdentifierContext.prototype.PROTOCOL = function() {
    return this.getToken(CadenceParser.PROTOCOL, 0);
};

IdentifierContext.prototype.REQUIRED = function() {
    return this.getToken(CadenceParser.REQUIRED, 0);
};

IdentifierContext.prototype.RIGHT = function() {
    return this.getToken(CadenceParser.RIGHT, 0);
};

IdentifierContext.prototype.SET = function() {
    return this.getToken(CadenceParser.SET, 0);
};

IdentifierContext.prototype.TYPE = function() {
    return this.getToken(CadenceParser.TYPE, 0);
};

IdentifierContext.prototype.UNOWNED = function() {
    return this.getToken(CadenceParser.UNOWNED, 0);
};

IdentifierContext.prototype.WEAK = function() {
    return this.getToken(CadenceParser.WEAK, 0);
};

IdentifierContext.prototype.WILL_SET = function() {
    return this.getToken(CadenceParser.WILL_SET, 0);
};

IdentifierContext.prototype.IN = function() {
    return this.getToken(CadenceParser.IN, 0);
};

IdentifierContext.prototype.FOR = function() {
    return this.getToken(CadenceParser.FOR, 0);
};

IdentifierContext.prototype.GUARD = function() {
    return this.getToken(CadenceParser.GUARD, 0);
};

IdentifierContext.prototype.WHERE = function() {
    return this.getToken(CadenceParser.WHERE, 0);
};

IdentifierContext.prototype.DEFAULT = function() {
    return this.getToken(CadenceParser.DEFAULT, 0);
};

IdentifierContext.prototype.INTERNAL = function() {
    return this.getToken(CadenceParser.INTERNAL, 0);
};

IdentifierContext.prototype.PRIVATE = function() {
    return this.getToken(CadenceParser.PRIVATE, 0);
};

IdentifierContext.prototype.PUBLIC = function() {
    return this.getToken(CadenceParser.PUBLIC, 0);
};

IdentifierContext.prototype.OPEN = function() {
    return this.getToken(CadenceParser.OPEN, 0);
};

IdentifierContext.prototype.AS = function() {
    return this.getToken(CadenceParser.AS, 0);
};

IdentifierContext.prototype.WHILE = function() {
    return this.getToken(CadenceParser.WHILE, 0);
};

IdentifierContext.prototype.SELF = function() {
    return this.getToken(CadenceParser.SELF, 0);
};

IdentifierContext.prototype.SELF_BIG = function() {
    return this.getToken(CadenceParser.SELF_BIG, 0);
};

IdentifierContext.prototype.CLASS = function() {
    return this.getToken(CadenceParser.CLASS, 0);
};

IdentifierContext.prototype.GETTER = function() {
    return this.getToken(CadenceParser.GETTER, 0);
};

IdentifierContext.prototype.SETTER = function() {
    return this.getToken(CadenceParser.SETTER, 0);
};

IdentifierContext.prototype.OPERATOR = function() {
    return this.getToken(CadenceParser.OPERATOR, 0);
};

IdentifierContext.prototype.DO = function() {
    return this.getToken(CadenceParser.DO, 0);
};

IdentifierContext.prototype.CATCH = function() {
    return this.getToken(CadenceParser.CATCH, 0);
};

IdentifierContext.prototype.Identifier = function() {
    return this.getToken(CadenceParser.Identifier, 0);
};

IdentifierContext.prototype.BACKTICK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.BACKTICK);
    } else {
        return this.getToken(CadenceParser.BACKTICK, i);
    }
};


IdentifierContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

IdentifierContext.prototype.DOLLAR = function() {
    return this.getToken(CadenceParser.DOLLAR, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitIdentifier(this);
	}
};




CadenceParser.IdentifierContext = IdentifierContext;

CadenceParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, CadenceParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.state = 2218;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.AS:
        case CadenceParser.ALPHA:
        case CadenceParser.CATCH:
        case CadenceParser.CLASS:
        case CadenceParser.DEFAULT:
        case CadenceParser.DO:
        case CadenceParser.GUARD:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.INTERNAL:
        case CadenceParser.FINAL:
        case CadenceParser.OPEN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHERE:
        case CadenceParser.WHILE:
        case CadenceParser.PROTOCOL:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.WILL_SET:
        case CadenceParser.DID_SET:
        case CadenceParser.INDIRECT:
        case CadenceParser.PREFIX:
        case CadenceParser.INFIX:
        case CadenceParser.LEFT:
        case CadenceParser.RIGHT:
        case CadenceParser.NONE:
        case CadenceParser.PRECEDENCE_GROUP:
        case CadenceParser.HIGHER_THAN:
        case CadenceParser.LOWER_THAN:
        case CadenceParser.ASSIGNMENT:
        case CadenceParser.ASSOCIATIVITY:
        case CadenceParser.POSTFIX:
        case CadenceParser.OPERATOR:
        case CadenceParser.OS:
        case CadenceParser.ARCH:
        case CadenceParser.SWIFT:
        case CadenceParser.COMPILER:
        case CadenceParser.CAN_IMPORT:
        case CadenceParser.TARGET_ENVIRONMENT:
        case CadenceParser.CONVENIENCE:
        case CadenceParser.DYNAMIC:
        case CadenceParser.LAZY:
        case CadenceParser.OPTIONAL:
        case CadenceParser.OVERRIDE:
        case CadenceParser.REQUIRED:
        case CadenceParser.WEAK:
        case CadenceParser.UNOWNED:
        case CadenceParser.SAFE:
        case CadenceParser.UNSAFE:
        case CadenceParser.MUTATING:
        case CadenceParser.NONMUTATING:
        case CadenceParser.RED:
        case CadenceParser.BLUE:
        case CadenceParser.GREEN:
        case CadenceParser.RESOURCE_NAME:
        case CadenceParser.SOME:
        case CadenceParser.TYPE:
        case CadenceParser.PRECEDENCE:
        case CadenceParser.SELF:
        case CadenceParser.SELF_BIG:
        case CadenceParser.MAC_OS:
        case CadenceParser.I_OS:
        case CadenceParser.OSX:
        case CadenceParser.WATCH_OS:
        case CadenceParser.TV_OS:
        case CadenceParser.LINUX:
        case CadenceParser.WINDOWS:
        case CadenceParser.I386:
        case CadenceParser.X86_64:
        case CadenceParser.ARM:
        case CadenceParser.ARM64:
        case CadenceParser.SIMULATOR:
        case CadenceParser.MAC_CATALYST:
        case CadenceParser.I_OS_APPLICATION_EXTENSION:
        case CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION:
        case CadenceParser.MAC_OS_APPLICATION_EXTENSION:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.GETTER:
        case CadenceParser.SETTER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2209;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.ALPHA) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.FINAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (CadenceParser.PROTOCOL - 34)) | (1 << (CadenceParser.GET - 34)) | (1 << (CadenceParser.SET - 34)) | (1 << (CadenceParser.WILL_SET - 34)) | (1 << (CadenceParser.DID_SET - 34)) | (1 << (CadenceParser.INDIRECT - 34)) | (1 << (CadenceParser.PREFIX - 34)) | (1 << (CadenceParser.INFIX - 34)) | (1 << (CadenceParser.LEFT - 34)) | (1 << (CadenceParser.RIGHT - 34)) | (1 << (CadenceParser.NONE - 34)) | (1 << (CadenceParser.PRECEDENCE_GROUP - 34)) | (1 << (CadenceParser.HIGHER_THAN - 34)) | (1 << (CadenceParser.LOWER_THAN - 34)) | (1 << (CadenceParser.ASSIGNMENT - 34)) | (1 << (CadenceParser.ASSOCIATIVITY - 34)) | (1 << (CadenceParser.POSTFIX - 34)) | (1 << (CadenceParser.OPERATOR - 34)) | (1 << (CadenceParser.OS - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (CadenceParser.ARCH - 66)) | (1 << (CadenceParser.SWIFT - 66)) | (1 << (CadenceParser.COMPILER - 66)) | (1 << (CadenceParser.CAN_IMPORT - 66)) | (1 << (CadenceParser.TARGET_ENVIRONMENT - 66)) | (1 << (CadenceParser.CONVENIENCE - 66)) | (1 << (CadenceParser.DYNAMIC - 66)) | (1 << (CadenceParser.LAZY - 66)) | (1 << (CadenceParser.OPTIONAL - 66)) | (1 << (CadenceParser.OVERRIDE - 66)) | (1 << (CadenceParser.REQUIRED - 66)) | (1 << (CadenceParser.WEAK - 66)) | (1 << (CadenceParser.UNOWNED - 66)) | (1 << (CadenceParser.SAFE - 66)) | (1 << (CadenceParser.UNSAFE - 66)) | (1 << (CadenceParser.MUTATING - 66)) | (1 << (CadenceParser.NONMUTATING - 66)) | (1 << (CadenceParser.RED - 66)) | (1 << (CadenceParser.BLUE - 66)) | (1 << (CadenceParser.GREEN - 66)) | (1 << (CadenceParser.RESOURCE_NAME - 66)) | (1 << (CadenceParser.SOME - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (CadenceParser.TYPE - 98)) | (1 << (CadenceParser.PRECEDENCE - 98)) | (1 << (CadenceParser.SELF - 98)) | (1 << (CadenceParser.SELF_BIG - 98)) | (1 << (CadenceParser.MAC_OS - 98)) | (1 << (CadenceParser.I_OS - 98)) | (1 << (CadenceParser.OSX - 98)) | (1 << (CadenceParser.WATCH_OS - 98)) | (1 << (CadenceParser.TV_OS - 98)) | (1 << (CadenceParser.LINUX - 98)) | (1 << (CadenceParser.WINDOWS - 98)) | (1 << (CadenceParser.I386 - 98)) | (1 << (CadenceParser.X86_64 - 98)) | (1 << (CadenceParser.ARM - 98)) | (1 << (CadenceParser.ARM64 - 98)) | (1 << (CadenceParser.SIMULATOR - 98)) | (1 << (CadenceParser.MAC_CATALYST - 98)) | (1 << (CadenceParser.I_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_CATALYST_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.MAC_OS_APPLICATION_EXTENSION - 98)) | (1 << (CadenceParser.FILE - 98)) | (1 << (CadenceParser.LINE - 98)))) !== 0) || _la===CadenceParser.GETTER || _la===CadenceParser.SETTER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case CadenceParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 2210;
            this.match(CadenceParser.Identifier);
            break;
        case CadenceParser.BACKTICK:
            this.enterOuterAlt(localctx, 3);
            this.state = 2211;
            this.match(CadenceParser.BACKTICK);
            this.state = 2215;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CadenceParser.AS:
            case CadenceParser.BREAK:
            case CadenceParser.CASE:
            case CadenceParser.CATCH:
            case CadenceParser.CLASS:
            case CadenceParser.CONTINUE:
            case CadenceParser.DEFAULT:
            case CadenceParser.DEFER:
            case CadenceParser.DO:
            case CadenceParser.GUARD:
            case CadenceParser.ELSE:
            case CadenceParser.ENUM:
            case CadenceParser.FOR:
            case CadenceParser.FALLTHROUGH:
            case CadenceParser.FUNC:
            case CadenceParser.IN:
            case CadenceParser.IF:
            case CadenceParser.IMPORT:
            case CadenceParser.INTERNAL:
            case CadenceParser.OPEN:
            case CadenceParser.PRIVATE:
            case CadenceParser.PUBLIC:
            case CadenceParser.WHERE:
            case CadenceParser.WHILE:
            case CadenceParser.LET:
            case CadenceParser.VAR:
            case CadenceParser.PROTOCOL:
            case CadenceParser.REPEAT:
            case CadenceParser.SWITCH:
            case CadenceParser.STRUCT:
            case CadenceParser.RETURN:
            case CadenceParser.THROW:
            case CadenceParser.THROWS:
            case CadenceParser.RETHROWS:
            case CadenceParser.INIT:
            case CadenceParser.DEINIT:
            case CadenceParser.ASSOCIATED_TYPE:
            case CadenceParser.EXTENSION:
            case CadenceParser.SUBSCRIPT:
            case CadenceParser.OPERATOR:
            case CadenceParser.TYPEALIAS:
            case CadenceParser.STATIC:
            case CadenceParser.FILE_PRIVATE:
            case CadenceParser.IS:
            case CadenceParser.TRY:
            case CadenceParser.SUPER:
            case CadenceParser.ANY:
            case CadenceParser.FALSE:
            case CadenceParser.TRUE:
            case CadenceParser.NIL:
            case CadenceParser.INOUT:
            case CadenceParser.SELF:
            case CadenceParser.SELF_BIG:
            case CadenceParser.SOURCE_LOCATION:
            case CadenceParser.ERROR:
            case CadenceParser.WARNING:
            case CadenceParser.AVAILABLE:
            case CadenceParser.HASH_IF:
            case CadenceParser.HASH_ELSEIF:
            case CadenceParser.HASH_ELSE:
            case CadenceParser.HASH_ENDIF:
            case CadenceParser.HASH_FILE:
            case CadenceParser.HASH_FILE_ID:
            case CadenceParser.HASH_FILE_PATH:
            case CadenceParser.HASH_LINE:
            case CadenceParser.HASH_COLUMN:
            case CadenceParser.HASH_FUNCTION:
            case CadenceParser.HASH_SELECTOR:
            case CadenceParser.HASH_COLOR_LITERAL:
            case CadenceParser.HASH_FILE_LITERAL:
            case CadenceParser.HASH_IMAGE_LITERAL:
            case CadenceParser.UNDERSCORE:
                this.state = 2212;
                this.keyword();
                break;
            case CadenceParser.Identifier:
                this.state = 2213;
                this.match(CadenceParser.Identifier);
                break;
            case CadenceParser.DOLLAR:
                this.state = 2214;
                this.match(CadenceParser.DOLLAR);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2217;
            this.match(CadenceParser.BACKTICK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Identifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_identifier_list;
    return this;
}

Identifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Identifier_listContext.prototype.constructor = Identifier_listContext;

Identifier_listContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Identifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Identifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterIdentifier_list(this);
	}
};

Identifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitIdentifier_list(this);
	}
};




CadenceParser.Identifier_listContext = Identifier_listContext;

CadenceParser.prototype.identifier_list = function() {

    var localctx = new Identifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, CadenceParser.RULE_identifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2220;
        this.identifier();
        this.state = 2225;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 2221;
            this.match(CadenceParser.COMMA);
            this.state = 2222;
            this.identifier();
            this.state = 2227;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.ASSOCIATED_TYPE = function() {
    return this.getToken(CadenceParser.ASSOCIATED_TYPE, 0);
};

KeywordContext.prototype.CLASS = function() {
    return this.getToken(CadenceParser.CLASS, 0);
};

KeywordContext.prototype.DEINIT = function() {
    return this.getToken(CadenceParser.DEINIT, 0);
};

KeywordContext.prototype.ENUM = function() {
    return this.getToken(CadenceParser.ENUM, 0);
};

KeywordContext.prototype.EXTENSION = function() {
    return this.getToken(CadenceParser.EXTENSION, 0);
};

KeywordContext.prototype.FILE_PRIVATE = function() {
    return this.getToken(CadenceParser.FILE_PRIVATE, 0);
};

KeywordContext.prototype.FUNC = function() {
    return this.getToken(CadenceParser.FUNC, 0);
};

KeywordContext.prototype.IMPORT = function() {
    return this.getToken(CadenceParser.IMPORT, 0);
};

KeywordContext.prototype.INIT = function() {
    return this.getToken(CadenceParser.INIT, 0);
};

KeywordContext.prototype.INOUT = function() {
    return this.getToken(CadenceParser.INOUT, 0);
};

KeywordContext.prototype.INTERNAL = function() {
    return this.getToken(CadenceParser.INTERNAL, 0);
};

KeywordContext.prototype.LET = function() {
    return this.getToken(CadenceParser.LET, 0);
};

KeywordContext.prototype.OPEN = function() {
    return this.getToken(CadenceParser.OPEN, 0);
};

KeywordContext.prototype.OPERATOR = function() {
    return this.getToken(CadenceParser.OPERATOR, 0);
};

KeywordContext.prototype.PRIVATE = function() {
    return this.getToken(CadenceParser.PRIVATE, 0);
};

KeywordContext.prototype.PROTOCOL = function() {
    return this.getToken(CadenceParser.PROTOCOL, 0);
};

KeywordContext.prototype.PUBLIC = function() {
    return this.getToken(CadenceParser.PUBLIC, 0);
};

KeywordContext.prototype.RETHROWS = function() {
    return this.getToken(CadenceParser.RETHROWS, 0);
};

KeywordContext.prototype.STATIC = function() {
    return this.getToken(CadenceParser.STATIC, 0);
};

KeywordContext.prototype.STRUCT = function() {
    return this.getToken(CadenceParser.STRUCT, 0);
};

KeywordContext.prototype.SUBSCRIPT = function() {
    return this.getToken(CadenceParser.SUBSCRIPT, 0);
};

KeywordContext.prototype.TYPEALIAS = function() {
    return this.getToken(CadenceParser.TYPEALIAS, 0);
};

KeywordContext.prototype.VAR = function() {
    return this.getToken(CadenceParser.VAR, 0);
};

KeywordContext.prototype.BREAK = function() {
    return this.getToken(CadenceParser.BREAK, 0);
};

KeywordContext.prototype.CASE = function() {
    return this.getToken(CadenceParser.CASE, 0);
};

KeywordContext.prototype.CONTINUE = function() {
    return this.getToken(CadenceParser.CONTINUE, 0);
};

KeywordContext.prototype.DEFAULT = function() {
    return this.getToken(CadenceParser.DEFAULT, 0);
};

KeywordContext.prototype.DEFER = function() {
    return this.getToken(CadenceParser.DEFER, 0);
};

KeywordContext.prototype.DO = function() {
    return this.getToken(CadenceParser.DO, 0);
};

KeywordContext.prototype.ELSE = function() {
    return this.getToken(CadenceParser.ELSE, 0);
};

KeywordContext.prototype.FALLTHROUGH = function() {
    return this.getToken(CadenceParser.FALLTHROUGH, 0);
};

KeywordContext.prototype.FOR = function() {
    return this.getToken(CadenceParser.FOR, 0);
};

KeywordContext.prototype.GUARD = function() {
    return this.getToken(CadenceParser.GUARD, 0);
};

KeywordContext.prototype.IF = function() {
    return this.getToken(CadenceParser.IF, 0);
};

KeywordContext.prototype.IN = function() {
    return this.getToken(CadenceParser.IN, 0);
};

KeywordContext.prototype.REPEAT = function() {
    return this.getToken(CadenceParser.REPEAT, 0);
};

KeywordContext.prototype.RETURN = function() {
    return this.getToken(CadenceParser.RETURN, 0);
};

KeywordContext.prototype.SWITCH = function() {
    return this.getToken(CadenceParser.SWITCH, 0);
};

KeywordContext.prototype.WHERE = function() {
    return this.getToken(CadenceParser.WHERE, 0);
};

KeywordContext.prototype.WHILE = function() {
    return this.getToken(CadenceParser.WHILE, 0);
};

KeywordContext.prototype.AS = function() {
    return this.getToken(CadenceParser.AS, 0);
};

KeywordContext.prototype.ANY = function() {
    return this.getToken(CadenceParser.ANY, 0);
};

KeywordContext.prototype.CATCH = function() {
    return this.getToken(CadenceParser.CATCH, 0);
};

KeywordContext.prototype.FALSE = function() {
    return this.getToken(CadenceParser.FALSE, 0);
};

KeywordContext.prototype.IS = function() {
    return this.getToken(CadenceParser.IS, 0);
};

KeywordContext.prototype.NIL = function() {
    return this.getToken(CadenceParser.NIL, 0);
};

KeywordContext.prototype.SUPER = function() {
    return this.getToken(CadenceParser.SUPER, 0);
};

KeywordContext.prototype.SELF = function() {
    return this.getToken(CadenceParser.SELF, 0);
};

KeywordContext.prototype.SELF_BIG = function() {
    return this.getToken(CadenceParser.SELF_BIG, 0);
};

KeywordContext.prototype.THROW = function() {
    return this.getToken(CadenceParser.THROW, 0);
};

KeywordContext.prototype.THROWS = function() {
    return this.getToken(CadenceParser.THROWS, 0);
};

KeywordContext.prototype.TRUE = function() {
    return this.getToken(CadenceParser.TRUE, 0);
};

KeywordContext.prototype.TRY = function() {
    return this.getToken(CadenceParser.TRY, 0);
};

KeywordContext.prototype.UNDERSCORE = function() {
    return this.getToken(CadenceParser.UNDERSCORE, 0);
};

KeywordContext.prototype.AVAILABLE = function() {
    return this.getToken(CadenceParser.AVAILABLE, 0);
};

KeywordContext.prototype.HASH_COLOR_LITERAL = function() {
    return this.getToken(CadenceParser.HASH_COLOR_LITERAL, 0);
};

KeywordContext.prototype.HASH_COLUMN = function() {
    return this.getToken(CadenceParser.HASH_COLUMN, 0);
};

KeywordContext.prototype.HASH_ELSE = function() {
    return this.getToken(CadenceParser.HASH_ELSE, 0);
};

KeywordContext.prototype.HASH_ELSEIF = function() {
    return this.getToken(CadenceParser.HASH_ELSEIF, 0);
};

KeywordContext.prototype.HASH_ENDIF = function() {
    return this.getToken(CadenceParser.HASH_ENDIF, 0);
};

KeywordContext.prototype.ERROR = function() {
    return this.getToken(CadenceParser.ERROR, 0);
};

KeywordContext.prototype.HASH_FILE = function() {
    return this.getToken(CadenceParser.HASH_FILE, 0);
};

KeywordContext.prototype.HASH_FILE_ID = function() {
    return this.getToken(CadenceParser.HASH_FILE_ID, 0);
};

KeywordContext.prototype.HASH_FILE_LITERAL = function() {
    return this.getToken(CadenceParser.HASH_FILE_LITERAL, 0);
};

KeywordContext.prototype.HASH_FILE_PATH = function() {
    return this.getToken(CadenceParser.HASH_FILE_PATH, 0);
};

KeywordContext.prototype.HASH_FUNCTION = function() {
    return this.getToken(CadenceParser.HASH_FUNCTION, 0);
};

KeywordContext.prototype.HASH_IF = function() {
    return this.getToken(CadenceParser.HASH_IF, 0);
};

KeywordContext.prototype.HASH_IMAGE_LITERAL = function() {
    return this.getToken(CadenceParser.HASH_IMAGE_LITERAL, 0);
};

KeywordContext.prototype.HASH_LINE = function() {
    return this.getToken(CadenceParser.HASH_LINE, 0);
};

KeywordContext.prototype.HASH_SELECTOR = function() {
    return this.getToken(CadenceParser.HASH_SELECTOR, 0);
};

KeywordContext.prototype.SOURCE_LOCATION = function() {
    return this.getToken(CadenceParser.SOURCE_LOCATION, 0);
};

KeywordContext.prototype.WARNING = function() {
    return this.getToken(CadenceParser.WARNING, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitKeyword(this);
	}
};




CadenceParser.KeywordContext = KeywordContext;

CadenceParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, CadenceParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2228;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CASE) | (1 << CadenceParser.CATCH) | (1 << CadenceParser.CLASS) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.DEFER) | (1 << CadenceParser.DO) | (1 << CadenceParser.GUARD) | (1 << CadenceParser.ELSE) | (1 << CadenceParser.ENUM) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FALLTHROUGH) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN) | (1 << CadenceParser.IF) | (1 << CadenceParser.IMPORT) | (1 << CadenceParser.INTERNAL) | (1 << CadenceParser.OPEN) | (1 << CadenceParser.PRIVATE) | (1 << CadenceParser.PUBLIC) | (1 << CadenceParser.WHERE) | (1 << CadenceParser.WHILE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CadenceParser.LET - 32)) | (1 << (CadenceParser.VAR - 32)) | (1 << (CadenceParser.PROTOCOL - 32)) | (1 << (CadenceParser.REPEAT - 32)) | (1 << (CadenceParser.SWITCH - 32)) | (1 << (CadenceParser.STRUCT - 32)) | (1 << (CadenceParser.RETURN - 32)) | (1 << (CadenceParser.THROW - 32)) | (1 << (CadenceParser.THROWS - 32)) | (1 << (CadenceParser.RETHROWS - 32)) | (1 << (CadenceParser.INIT - 32)) | (1 << (CadenceParser.DEINIT - 32)) | (1 << (CadenceParser.ASSOCIATED_TYPE - 32)) | (1 << (CadenceParser.EXTENSION - 32)) | (1 << (CadenceParser.SUBSCRIPT - 32)) | (1 << (CadenceParser.OPERATOR - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CadenceParser.TYPEALIAS - 64)) | (1 << (CadenceParser.STATIC - 64)) | (1 << (CadenceParser.FILE_PRIVATE - 64)) | (1 << (CadenceParser.IS - 64)) | (1 << (CadenceParser.TRY - 64)) | (1 << (CadenceParser.SUPER - 64)) | (1 << (CadenceParser.ANY - 64)) | (1 << (CadenceParser.FALSE - 64)) | (1 << (CadenceParser.TRUE - 64)) | (1 << (CadenceParser.NIL - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CadenceParser.INOUT - 96)) | (1 << (CadenceParser.SELF - 96)) | (1 << (CadenceParser.SELF_BIG - 96)) | (1 << (CadenceParser.SOURCE_LOCATION - 96)) | (1 << (CadenceParser.ERROR - 96)) | (1 << (CadenceParser.WARNING - 96)) | (1 << (CadenceParser.AVAILABLE - 96)) | (1 << (CadenceParser.HASH_IF - 96)) | (1 << (CadenceParser.HASH_ELSEIF - 96)) | (1 << (CadenceParser.HASH_ELSE - 96)) | (1 << (CadenceParser.HASH_ENDIF - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (CadenceParser.HASH_FILE - 128)) | (1 << (CadenceParser.HASH_FILE_ID - 128)) | (1 << (CadenceParser.HASH_FILE_PATH - 128)) | (1 << (CadenceParser.HASH_LINE - 128)) | (1 << (CadenceParser.HASH_COLUMN - 128)) | (1 << (CadenceParser.HASH_FUNCTION - 128)) | (1 << (CadenceParser.HASH_SELECTOR - 128)) | (1 << (CadenceParser.HASH_COLOR_LITERAL - 128)) | (1 << (CadenceParser.HASH_FILE_LITERAL - 128)) | (1 << (CadenceParser.HASH_IMAGE_LITERAL - 128)) | (1 << (CadenceParser.UNDERSCORE - 128)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Negate_prefix_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_negate_prefix_operator;
    return this;
}

Negate_prefix_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Negate_prefix_operatorContext.prototype.constructor = Negate_prefix_operatorContext;

Negate_prefix_operatorContext.prototype.SUB = function() {
    return this.getToken(CadenceParser.SUB, 0);
};

Negate_prefix_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterNegate_prefix_operator(this);
	}
};

Negate_prefix_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitNegate_prefix_operator(this);
	}
};




CadenceParser.Negate_prefix_operatorContext = Negate_prefix_operatorContext;

CadenceParser.prototype.negate_prefix_operator = function() {

    var localctx = new Negate_prefix_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, CadenceParser.RULE_negate_prefix_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2230;
        this.match(CadenceParser.SUB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_ANDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_AND;
    return this;
}

Compilation_condition_ANDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_ANDContext.prototype.constructor = Compilation_condition_ANDContext;

Compilation_condition_ANDContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.AND);
    } else {
        return this.getToken(CadenceParser.AND, i);
    }
};


Compilation_condition_ANDContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_AND(this);
	}
};

Compilation_condition_ANDContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_AND(this);
	}
};




CadenceParser.Compilation_condition_ANDContext = Compilation_condition_ANDContext;

CadenceParser.prototype.compilation_condition_AND = function() {

    var localctx = new Compilation_condition_ANDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, CadenceParser.RULE_compilation_condition_AND);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2232;
        this.match(CadenceParser.AND);
        this.state = 2233;
        this.match(CadenceParser.AND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_ORContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_OR;
    return this;
}

Compilation_condition_ORContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_ORContext.prototype.constructor = Compilation_condition_ORContext;

Compilation_condition_ORContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.OR);
    } else {
        return this.getToken(CadenceParser.OR, i);
    }
};


Compilation_condition_ORContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_OR(this);
	}
};

Compilation_condition_ORContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_OR(this);
	}
};




CadenceParser.Compilation_condition_ORContext = Compilation_condition_ORContext;

CadenceParser.prototype.compilation_condition_OR = function() {

    var localctx = new Compilation_condition_ORContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, CadenceParser.RULE_compilation_condition_OR);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2235;
        this.match(CadenceParser.OR);
        this.state = 2236;
        this.match(CadenceParser.OR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_GEContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_GE;
    return this;
}

Compilation_condition_GEContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_GEContext.prototype.constructor = Compilation_condition_GEContext;

Compilation_condition_GEContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Compilation_condition_GEContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Compilation_condition_GEContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_GE(this);
	}
};

Compilation_condition_GEContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_GE(this);
	}
};




CadenceParser.Compilation_condition_GEContext = Compilation_condition_GEContext;

CadenceParser.prototype.compilation_condition_GE = function() {

    var localctx = new Compilation_condition_GEContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, CadenceParser.RULE_compilation_condition_GE);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2238;
        this.match(CadenceParser.GT);
        this.state = 2239;
        this.match(CadenceParser.EQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_LContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_L;
    return this;
}

Compilation_condition_LContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_LContext.prototype.constructor = Compilation_condition_LContext;

Compilation_condition_LContext.prototype.LT = function() {
    return this.getToken(CadenceParser.LT, 0);
};

Compilation_condition_LContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_L(this);
	}
};

Compilation_condition_LContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_L(this);
	}
};




CadenceParser.Compilation_condition_LContext = Compilation_condition_LContext;

CadenceParser.prototype.compilation_condition_L = function() {

    var localctx = new Compilation_condition_LContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, CadenceParser.RULE_compilation_condition_L);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2241;
        this.match(CadenceParser.LT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Arrow_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_arrow_operator;
    return this;
}

Arrow_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arrow_operatorContext.prototype.constructor = Arrow_operatorContext;

Arrow_operatorContext.prototype.SUB = function() {
    return this.getToken(CadenceParser.SUB, 0);
};

Arrow_operatorContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Arrow_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArrow_operator(this);
	}
};

Arrow_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArrow_operator(this);
	}
};




CadenceParser.Arrow_operatorContext = Arrow_operatorContext;

CadenceParser.prototype.arrow_operator = function() {

    var localctx = new Arrow_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, CadenceParser.RULE_arrow_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2243;
        this.match(CadenceParser.SUB);
        this.state = 2244;
        this.match(CadenceParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Range_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_range_operator;
    return this;
}

Range_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_operatorContext.prototype.constructor = Range_operatorContext;

Range_operatorContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.DOT);
    } else {
        return this.getToken(CadenceParser.DOT, i);
    }
};


Range_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRange_operator(this);
	}
};

Range_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRange_operator(this);
	}
};




CadenceParser.Range_operatorContext = Range_operatorContext;

CadenceParser.prototype.range_operator = function() {

    var localctx = new Range_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, CadenceParser.RULE_range_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2246;
        this.match(CadenceParser.DOT);
        this.state = 2247;
        this.match(CadenceParser.DOT);
        this.state = 2248;
        this.match(CadenceParser.DOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Same_type_equalsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_same_type_equals;
    return this;
}

Same_type_equalsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Same_type_equalsContext.prototype.constructor = Same_type_equalsContext;

Same_type_equalsContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.EQUAL);
    } else {
        return this.getToken(CadenceParser.EQUAL, i);
    }
};


Same_type_equalsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSame_type_equals(this);
	}
};

Same_type_equalsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSame_type_equals(this);
	}
};




CadenceParser.Same_type_equalsContext = Same_type_equalsContext;

CadenceParser.prototype.same_type_equals = function() {

    var localctx = new Same_type_equalsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, CadenceParser.RULE_same_type_equals);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2250;
        this.match(CadenceParser.EQUAL);
        this.state = 2251;
        this.match(CadenceParser.EQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Binary_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_binary_operator;
    return this;
}

Binary_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_operatorContext.prototype.constructor = Binary_operatorContext;

Binary_operatorContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Binary_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBinary_operator(this);
	}
};

Binary_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBinary_operator(this);
	}
};




CadenceParser.Binary_operatorContext = Binary_operatorContext;

CadenceParser.prototype.binary_operator = function() {

    var localctx = new Binary_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, CadenceParser.RULE_binary_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2253;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Prefix_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_prefix_operator;
    return this;
}

Prefix_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Prefix_operatorContext.prototype.constructor = Prefix_operatorContext;

Prefix_operatorContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Prefix_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrefix_operator(this);
	}
};

Prefix_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrefix_operator(this);
	}
};




CadenceParser.Prefix_operatorContext = Prefix_operatorContext;

CadenceParser.prototype.prefix_operator = function() {

    var localctx = new Prefix_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, CadenceParser.RULE_prefix_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2255;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Postfix_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_postfix_operator;
    return this;
}

Postfix_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Postfix_operatorContext.prototype.constructor = Postfix_operatorContext;

Postfix_operatorContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Postfix_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPostfix_operator(this);
	}
};

Postfix_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPostfix_operator(this);
	}
};




CadenceParser.Postfix_operatorContext = Postfix_operatorContext;

CadenceParser.prototype.postfix_operator = function() {

    var localctx = new Postfix_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, CadenceParser.RULE_postfix_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2257;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;

OperatorContext.prototype.operator_head = function() {
    return this.getTypedRuleContext(Operator_headContext,0);
};

OperatorContext.prototype.operator_characters = function() {
    return this.getTypedRuleContext(Operator_charactersContext,0);
};

OperatorContext.prototype.dot_operator_head = function() {
    return this.getTypedRuleContext(Dot_operator_headContext,0);
};

OperatorContext.prototype.dot_operator_characters = function() {
    return this.getTypedRuleContext(Dot_operator_charactersContext,0);
};

OperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOperator(this);
	}
};

OperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOperator(this);
	}
};




CadenceParser.OperatorContext = OperatorContext;

CadenceParser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, CadenceParser.RULE_operator);
    try {
        this.state = 2266;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
            this.enterOuterAlt(localctx, 1);
            this.state = 2259;
            this.operator_head();
            this.state = 2261;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
            if(la_===1) {
                this.state = 2260;
                this.operator_characters();

            }
            break;
        case CadenceParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2263;
            this.dot_operator_head();
            this.state = 2264;
            this.dot_operator_characters();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operator_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_operator_head;
    return this;
}

Operator_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_headContext.prototype.constructor = Operator_headContext;

Operator_headContext.prototype.DIV = function() {
    return this.getToken(CadenceParser.DIV, 0);
};

Operator_headContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Operator_headContext.prototype.SUB = function() {
    return this.getToken(CadenceParser.SUB, 0);
};

Operator_headContext.prototype.ADD = function() {
    return this.getToken(CadenceParser.ADD, 0);
};

Operator_headContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

Operator_headContext.prototype.MUL = function() {
    return this.getToken(CadenceParser.MUL, 0);
};

Operator_headContext.prototype.MOD = function() {
    return this.getToken(CadenceParser.MOD, 0);
};

Operator_headContext.prototype.AND = function() {
    return this.getToken(CadenceParser.AND, 0);
};

Operator_headContext.prototype.OR = function() {
    return this.getToken(CadenceParser.OR, 0);
};

Operator_headContext.prototype.LT = function() {
    return this.getToken(CadenceParser.LT, 0);
};

Operator_headContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Operator_headContext.prototype.CARET = function() {
    return this.getToken(CadenceParser.CARET, 0);
};

Operator_headContext.prototype.TILDE = function() {
    return this.getToken(CadenceParser.TILDE, 0);
};

Operator_headContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Operator_headContext.prototype.Operator_head_other = function() {
    return this.getToken(CadenceParser.Operator_head_other, 0);
};

Operator_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOperator_head(this);
	}
};

Operator_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOperator_head(this);
	}
};




CadenceParser.Operator_headContext = Operator_headContext;

CadenceParser.prototype.operator_head = function() {

    var localctx = new Operator_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, CadenceParser.RULE_operator_head);
    var _la = 0; // Token type
    try {
        this.state = 2270;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
            this.enterOuterAlt(localctx, 1);
            this.state = 2268;
            _la = this._input.LA(1);
            if(!(((((_la - 153)) & ~0x1f) == 0 && ((1 << (_la - 153)) & ((1 << (CadenceParser.LT - 153)) | (1 << (CadenceParser.GT - 153)) | (1 << (CadenceParser.BANG - 153)) | (1 << (CadenceParser.QUESTION - 153)) | (1 << (CadenceParser.AND - 153)) | (1 << (CadenceParser.SUB - 153)) | (1 << (CadenceParser.EQUAL - 153)) | (1 << (CadenceParser.OR - 153)) | (1 << (CadenceParser.DIV - 153)) | (1 << (CadenceParser.ADD - 153)) | (1 << (CadenceParser.MUL - 153)) | (1 << (CadenceParser.MOD - 153)) | (1 << (CadenceParser.CARET - 153)) | (1 << (CadenceParser.TILDE - 153)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case CadenceParser.Operator_head_other:
            this.enterOuterAlt(localctx, 2);
            this.state = 2269;
            this.match(CadenceParser.Operator_head_other);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operator_characterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_operator_character;
    return this;
}

Operator_characterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_characterContext.prototype.constructor = Operator_characterContext;

Operator_characterContext.prototype.operator_head = function() {
    return this.getTypedRuleContext(Operator_headContext,0);
};

Operator_characterContext.prototype.Operator_following_character = function() {
    return this.getToken(CadenceParser.Operator_following_character, 0);
};

Operator_characterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOperator_character(this);
	}
};

Operator_characterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOperator_character(this);
	}
};




CadenceParser.Operator_characterContext = Operator_characterContext;

CadenceParser.prototype.operator_character = function() {

    var localctx = new Operator_characterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, CadenceParser.RULE_operator_character);
    try {
        this.state = 2274;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
            this.enterOuterAlt(localctx, 1);
            this.state = 2272;
            this.operator_head();
            break;
        case CadenceParser.Operator_following_character:
            this.enterOuterAlt(localctx, 2);
            this.state = 2273;
            this.match(CadenceParser.Operator_following_character);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operator_charactersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_operator_characters;
    return this;
}

Operator_charactersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_charactersContext.prototype.constructor = Operator_charactersContext;

Operator_charactersContext.prototype.operator_character = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Operator_characterContext);
    } else {
        return this.getTypedRuleContext(Operator_characterContext,i);
    }
};

Operator_charactersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOperator_characters(this);
	}
};

Operator_charactersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOperator_characters(this);
	}
};




CadenceParser.Operator_charactersContext = Operator_charactersContext;

CadenceParser.prototype.operator_characters = function() {

    var localctx = new Operator_charactersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, CadenceParser.RULE_operator_characters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2278; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2276;
        		if (!( _input.get(_input.index()-1).getType()!=WS)) {
        		    throw new antlr4.error.FailedPredicateException(this, "_input.get(_input.index()-1).getType()!=WS");
        		}
        		this.state = 2277;
        		this.operator_character();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2280; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,249, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dot_operator_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dot_operator_head;
    return this;
}

Dot_operator_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dot_operator_headContext.prototype.constructor = Dot_operator_headContext;

Dot_operator_headContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Dot_operator_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDot_operator_head(this);
	}
};

Dot_operator_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDot_operator_head(this);
	}
};




CadenceParser.Dot_operator_headContext = Dot_operator_headContext;

CadenceParser.prototype.dot_operator_head = function() {

    var localctx = new Dot_operator_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, CadenceParser.RULE_dot_operator_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2282;
        this.match(CadenceParser.DOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dot_operator_characterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dot_operator_character;
    return this;
}

Dot_operator_characterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dot_operator_characterContext.prototype.constructor = Dot_operator_characterContext;

Dot_operator_characterContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Dot_operator_characterContext.prototype.operator_character = function() {
    return this.getTypedRuleContext(Operator_characterContext,0);
};

Dot_operator_characterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDot_operator_character(this);
	}
};

Dot_operator_characterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDot_operator_character(this);
	}
};




CadenceParser.Dot_operator_characterContext = Dot_operator_characterContext;

CadenceParser.prototype.dot_operator_character = function() {

    var localctx = new Dot_operator_characterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, CadenceParser.RULE_dot_operator_character);
    try {
        this.state = 2286;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.DOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2284;
            this.match(CadenceParser.DOT);
            break;
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
        case CadenceParser.Operator_following_character:
            this.enterOuterAlt(localctx, 2);
            this.state = 2285;
            this.operator_character();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dot_operator_charactersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dot_operator_characters;
    return this;
}

Dot_operator_charactersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dot_operator_charactersContext.prototype.constructor = Dot_operator_charactersContext;

Dot_operator_charactersContext.prototype.dot_operator_character = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dot_operator_characterContext);
    } else {
        return this.getTypedRuleContext(Dot_operator_characterContext,i);
    }
};

Dot_operator_charactersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDot_operator_characters(this);
	}
};

Dot_operator_charactersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDot_operator_characters(this);
	}
};




CadenceParser.Dot_operator_charactersContext = Dot_operator_charactersContext;

CadenceParser.prototype.dot_operator_characters = function() {

    var localctx = new Dot_operator_charactersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, CadenceParser.RULE_dot_operator_characters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2290; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2288;
        		if (!( _input.get(_input.index()-1).getType()!=WS)) {
        		    throw new antlr4.error.FailedPredicateException(this, "_input.get(_input.index()-1).getType()!=WS");
        		}
        		this.state = 2289;
        		this.dot_operator_character();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2292; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,251, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.numeric_literal = function() {
    return this.getTypedRuleContext(Numeric_literalContext,0);
};

LiteralContext.prototype.string_literal = function() {
    return this.getTypedRuleContext(String_literalContext,0);
};

LiteralContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

LiteralContext.prototype.nil_literal = function() {
    return this.getTypedRuleContext(Nil_literalContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLiteral(this);
	}
};




CadenceParser.LiteralContext = LiteralContext;

CadenceParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, CadenceParser.RULE_literal);
    try {
        this.state = 2298;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.SUB:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
            this.enterOuterAlt(localctx, 1);
            this.state = 2294;
            this.numeric_literal();
            break;
        case CadenceParser.Multi_line_extended_string_open:
        case CadenceParser.Single_line_extended_string_open:
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.enterOuterAlt(localctx, 2);
            this.state = 2295;
            this.string_literal();
            break;
        case CadenceParser.FALSE:
        case CadenceParser.TRUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2296;
            this.boolean_literal();
            break;
        case CadenceParser.NIL:
            this.enterOuterAlt(localctx, 4);
            this.state = 2297;
            this.nil_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Numeric_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_numeric_literal;
    return this;
}

Numeric_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_literalContext.prototype.constructor = Numeric_literalContext;

Numeric_literalContext.prototype.integer_literal = function() {
    return this.getTypedRuleContext(Integer_literalContext,0);
};

Numeric_literalContext.prototype.negate_prefix_operator = function() {
    return this.getTypedRuleContext(Negate_prefix_operatorContext,0);
};

Numeric_literalContext.prototype.Floating_point_literal = function() {
    return this.getToken(CadenceParser.Floating_point_literal, 0);
};

Numeric_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterNumeric_literal(this);
	}
};

Numeric_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitNumeric_literal(this);
	}
};




CadenceParser.Numeric_literalContext = Numeric_literalContext;

CadenceParser.prototype.numeric_literal = function() {

    var localctx = new Numeric_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, CadenceParser.RULE_numeric_literal);
    var _la = 0; // Token type
    try {
        this.state = 2308;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.SUB) {
                this.state = 2300;
                this.negate_prefix_operator();
            }

            this.state = 2303;
            this.integer_literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.SUB) {
                this.state = 2304;
                this.negate_prefix_operator();
            }

            this.state = 2307;
            this.match(CadenceParser.Floating_point_literal);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Boolean_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_boolean_literal;
    return this;
}

Boolean_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_literalContext.prototype.constructor = Boolean_literalContext;

Boolean_literalContext.prototype.TRUE = function() {
    return this.getToken(CadenceParser.TRUE, 0);
};

Boolean_literalContext.prototype.FALSE = function() {
    return this.getToken(CadenceParser.FALSE, 0);
};

Boolean_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBoolean_literal(this);
	}
};




CadenceParser.Boolean_literalContext = Boolean_literalContext;

CadenceParser.prototype.boolean_literal = function() {

    var localctx = new Boolean_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, CadenceParser.RULE_boolean_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2310;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.FALSE || _la===CadenceParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Nil_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_nil_literal;
    return this;
}

Nil_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nil_literalContext.prototype.constructor = Nil_literalContext;

Nil_literalContext.prototype.NIL = function() {
    return this.getToken(CadenceParser.NIL, 0);
};

Nil_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterNil_literal(this);
	}
};

Nil_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitNil_literal(this);
	}
};




CadenceParser.Nil_literalContext = Nil_literalContext;

CadenceParser.prototype.nil_literal = function() {

    var localctx = new Nil_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, CadenceParser.RULE_nil_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2312;
        this.match(CadenceParser.NIL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Integer_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_integer_literal;
    return this;
}

Integer_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Integer_literalContext.prototype.constructor = Integer_literalContext;

Integer_literalContext.prototype.Decimal_digits = function() {
    return this.getToken(CadenceParser.Decimal_digits, 0);
};

Integer_literalContext.prototype.Decimal_literal = function() {
    return this.getToken(CadenceParser.Decimal_literal, 0);
};

Integer_literalContext.prototype.Binary_literal = function() {
    return this.getToken(CadenceParser.Binary_literal, 0);
};

Integer_literalContext.prototype.Octal_literal = function() {
    return this.getToken(CadenceParser.Octal_literal, 0);
};

Integer_literalContext.prototype.Hexadecimal_literal = function() {
    return this.getToken(CadenceParser.Hexadecimal_literal, 0);
};

Integer_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInteger_literal(this);
	}
};

Integer_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInteger_literal(this);
	}
};




CadenceParser.Integer_literalContext = Integer_literalContext;

CadenceParser.prototype.integer_literal = function() {

    var localctx = new Integer_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, CadenceParser.RULE_integer_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2314;
        _la = this._input.LA(1);
        if(!(((((_la - 178)) & ~0x1f) == 0 && ((1 << (_la - 178)) & ((1 << (CadenceParser.Binary_literal - 178)) | (1 << (CadenceParser.Octal_literal - 178)) | (1 << (CadenceParser.Decimal_digits - 178)) | (1 << (CadenceParser.Decimal_literal - 178)) | (1 << (CadenceParser.Hexadecimal_literal - 178)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function String_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_string_literal;
    return this;
}

String_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_literalContext.prototype.constructor = String_literalContext;

String_literalContext.prototype.extended_string_literal = function() {
    return this.getTypedRuleContext(Extended_string_literalContext,0);
};

String_literalContext.prototype.interpolated_string_literal = function() {
    return this.getTypedRuleContext(Interpolated_string_literalContext,0);
};

String_literalContext.prototype.static_string_literal = function() {
    return this.getTypedRuleContext(Static_string_literalContext,0);
};

String_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterString_literal(this);
	}
};

String_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitString_literal(this);
	}
};




CadenceParser.String_literalContext = String_literalContext;

CadenceParser.prototype.string_literal = function() {

    var localctx = new String_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, CadenceParser.RULE_string_literal);
    try {
        this.state = 2319;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2316;
            this.extended_string_literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2317;
            this.interpolated_string_literal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 2318;
            this.static_string_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Extended_string_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_extended_string_literal;
    return this;
}

Extended_string_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extended_string_literalContext.prototype.constructor = Extended_string_literalContext;

Extended_string_literalContext.prototype.Multi_line_extended_string_open = function() {
    return this.getToken(CadenceParser.Multi_line_extended_string_open, 0);
};

Extended_string_literalContext.prototype.Multi_line_extended_string_close = function() {
    return this.getToken(CadenceParser.Multi_line_extended_string_close, 0);
};

Extended_string_literalContext.prototype.Quoted_multi_line_extended_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_multi_line_extended_text);
    } else {
        return this.getToken(CadenceParser.Quoted_multi_line_extended_text, i);
    }
};


Extended_string_literalContext.prototype.Single_line_extended_string_open = function() {
    return this.getToken(CadenceParser.Single_line_extended_string_open, 0);
};

Extended_string_literalContext.prototype.Single_line_extended_string_close = function() {
    return this.getToken(CadenceParser.Single_line_extended_string_close, 0);
};

Extended_string_literalContext.prototype.Quoted_single_line_extended_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_single_line_extended_text);
    } else {
        return this.getToken(CadenceParser.Quoted_single_line_extended_text, i);
    }
};


Extended_string_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExtended_string_literal(this);
	}
};

Extended_string_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExtended_string_literal(this);
	}
};




CadenceParser.Extended_string_literalContext = Extended_string_literalContext;

CadenceParser.prototype.extended_string_literal = function() {

    var localctx = new Extended_string_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, CadenceParser.RULE_extended_string_literal);
    var _la = 0; // Token type
    try {
        this.state = 2335;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.Multi_line_extended_string_open:
            this.enterOuterAlt(localctx, 1);
            this.state = 2321;
            this.match(CadenceParser.Multi_line_extended_string_open);
            this.state = 2323; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2322;
                this.match(CadenceParser.Quoted_multi_line_extended_text);
                this.state = 2325; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===CadenceParser.Quoted_multi_line_extended_text);
            this.state = 2327;
            this.match(CadenceParser.Multi_line_extended_string_close);
            break;
        case CadenceParser.Single_line_extended_string_open:
            this.enterOuterAlt(localctx, 2);
            this.state = 2328;
            this.match(CadenceParser.Single_line_extended_string_open);
            this.state = 2330; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2329;
                this.match(CadenceParser.Quoted_single_line_extended_text);
                this.state = 2332; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===CadenceParser.Quoted_single_line_extended_text);
            this.state = 2334;
            this.match(CadenceParser.Single_line_extended_string_close);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Static_string_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_static_string_literal;
    return this;
}

Static_string_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Static_string_literalContext.prototype.constructor = Static_string_literalContext;

Static_string_literalContext.prototype.Single_line_string_open = function() {
    return this.getToken(CadenceParser.Single_line_string_open, 0);
};

Static_string_literalContext.prototype.Single_line_string_close = function() {
    return this.getToken(CadenceParser.Single_line_string_close, 0);
};

Static_string_literalContext.prototype.Quoted_single_line_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_single_line_text);
    } else {
        return this.getToken(CadenceParser.Quoted_single_line_text, i);
    }
};


Static_string_literalContext.prototype.Multi_line_string_open = function() {
    return this.getToken(CadenceParser.Multi_line_string_open, 0);
};

Static_string_literalContext.prototype.Multi_line_string_close = function() {
    return this.getToken(CadenceParser.Multi_line_string_close, 0);
};

Static_string_literalContext.prototype.Quoted_multi_line_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_multi_line_text);
    } else {
        return this.getToken(CadenceParser.Quoted_multi_line_text, i);
    }
};


Static_string_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStatic_string_literal(this);
	}
};

Static_string_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStatic_string_literal(this);
	}
};




CadenceParser.Static_string_literalContext = Static_string_literalContext;

CadenceParser.prototype.static_string_literal = function() {

    var localctx = new Static_string_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, CadenceParser.RULE_static_string_literal);
    var _la = 0; // Token type
    try {
        this.state = 2353;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.Single_line_string_open:
            this.enterOuterAlt(localctx, 1);
            this.state = 2337;
            this.match(CadenceParser.Single_line_string_open);
            this.state = 2341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CadenceParser.Quoted_single_line_text) {
                this.state = 2338;
                this.match(CadenceParser.Quoted_single_line_text);
                this.state = 2343;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2344;
            this.match(CadenceParser.Single_line_string_close);
            break;
        case CadenceParser.Multi_line_string_open:
            this.enterOuterAlt(localctx, 2);
            this.state = 2345;
            this.match(CadenceParser.Multi_line_string_open);
            this.state = 2349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CadenceParser.Quoted_multi_line_text) {
                this.state = 2346;
                this.match(CadenceParser.Quoted_multi_line_text);
                this.state = 2351;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2352;
            this.match(CadenceParser.Multi_line_string_close);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interpolated_string_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_interpolated_string_literal;
    return this;
}

Interpolated_string_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_string_literalContext.prototype.constructor = Interpolated_string_literalContext;

Interpolated_string_literalContext.prototype.Single_line_string_open = function() {
    return this.getToken(CadenceParser.Single_line_string_open, 0);
};

Interpolated_string_literalContext.prototype.Single_line_string_close = function() {
    return this.getToken(CadenceParser.Single_line_string_close, 0);
};

Interpolated_string_literalContext.prototype.Quoted_single_line_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_single_line_text);
    } else {
        return this.getToken(CadenceParser.Quoted_single_line_text, i);
    }
};


Interpolated_string_literalContext.prototype.Interpolataion_single_line = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Interpolataion_single_line);
    } else {
        return this.getToken(CadenceParser.Interpolataion_single_line, i);
    }
};


Interpolated_string_literalContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.RPAREN);
    } else {
        return this.getToken(CadenceParser.RPAREN, i);
    }
};


Interpolated_string_literalContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Interpolated_string_literalContext.prototype.tuple_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tuple_elementContext);
    } else {
        return this.getTypedRuleContext(Tuple_elementContext,i);
    }
};

Interpolated_string_literalContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Interpolated_string_literalContext.prototype.tuple_element_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tuple_element_listContext);
    } else {
        return this.getTypedRuleContext(Tuple_element_listContext,i);
    }
};

Interpolated_string_literalContext.prototype.Multi_line_string_open = function() {
    return this.getToken(CadenceParser.Multi_line_string_open, 0);
};

Interpolated_string_literalContext.prototype.Multi_line_string_close = function() {
    return this.getToken(CadenceParser.Multi_line_string_close, 0);
};

Interpolated_string_literalContext.prototype.Quoted_multi_line_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_multi_line_text);
    } else {
        return this.getToken(CadenceParser.Quoted_multi_line_text, i);
    }
};


Interpolated_string_literalContext.prototype.Interpolataion_multi_line = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Interpolataion_multi_line);
    } else {
        return this.getToken(CadenceParser.Interpolataion_multi_line, i);
    }
};


Interpolated_string_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInterpolated_string_literal(this);
	}
};

Interpolated_string_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInterpolated_string_literal(this);
	}
};




CadenceParser.Interpolated_string_literalContext = Interpolated_string_literalContext;

CadenceParser.prototype.interpolated_string_literal = function() {

    var localctx = new Interpolated_string_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, CadenceParser.RULE_interpolated_string_literal);
    var _la = 0; // Token type
    try {
        this.state = 2391;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.Single_line_string_open:
            this.enterOuterAlt(localctx, 1);
            this.state = 2355;
            this.match(CadenceParser.Single_line_string_open);
            this.state = 2369;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CadenceParser.Interpolataion_single_line || _la===CadenceParser.Quoted_single_line_text) {
                this.state = 2367;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CadenceParser.Quoted_single_line_text:
                    this.state = 2356;
                    this.match(CadenceParser.Quoted_single_line_text);
                    break;
                case CadenceParser.Interpolataion_single_line:
                    this.state = 2357;
                    this.match(CadenceParser.Interpolataion_single_line);
                    this.state = 2363;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 2358;
                        this.expression();
                        break;

                    case 2:
                        this.state = 2359;
                        this.tuple_element();
                        this.state = 2360;
                        this.match(CadenceParser.COMMA);
                        this.state = 2361;
                        this.tuple_element_list();
                        break;

                    }
                    this.state = 2365;
                    this.match(CadenceParser.RPAREN);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2371;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2372;
            this.match(CadenceParser.Single_line_string_close);
            break;
        case CadenceParser.Multi_line_string_open:
            this.enterOuterAlt(localctx, 2);
            this.state = 2373;
            this.match(CadenceParser.Multi_line_string_open);
            this.state = 2387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CadenceParser.Interpolataion_multi_line || _la===CadenceParser.Quoted_multi_line_text) {
                this.state = 2385;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CadenceParser.Quoted_multi_line_text:
                    this.state = 2374;
                    this.match(CadenceParser.Quoted_multi_line_text);
                    break;
                case CadenceParser.Interpolataion_multi_line:
                    this.state = 2375;
                    this.match(CadenceParser.Interpolataion_multi_line);
                    this.state = 2381;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 2376;
                        this.expression();
                        break;

                    case 2:
                        this.state = 2377;
                        this.tuple_element();
                        this.state = 2378;
                        this.match(CadenceParser.COMMA);
                        this.state = 2379;
                        this.tuple_element_list();
                        break;

                    }
                    this.state = 2383;
                    this.match(CadenceParser.RPAREN);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2389;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2390;
            this.match(CadenceParser.Multi_line_string_close);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CadenceParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 171:
			return this.pattern_sempred(localctx, predIndex);
	case 224:
			return this.forced_value_suffix_sempred(localctx, predIndex);
	case 225:
			return this.optional_chaining_suffix_sempred(localctx, predIndex);
	case 234:
			return this.type_sempred(localctx, predIndex);
	case 250:
			return this.trailing_composition_and_sempred(localctx, predIndex);
	case 273:
			return this.operator_characters_sempred(localctx, predIndex);
	case 276:
			return this.dot_operator_characters_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CadenceParser.prototype.pattern_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CadenceParser.prototype.forced_value_suffix_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return !SwiftSupport.isBinaryOp(_input);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CadenceParser.prototype.optional_chaining_suffix_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return !SwiftSupport.isBinaryOp(_input);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CadenceParser.prototype.type_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 4);
		case 4:
			return !SwiftSupport.isBinaryOp(_input);
		case 5:
			return !SwiftSupport.isBinaryOp(_input);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CadenceParser.prototype.trailing_composition_and_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return !SwiftSupport.isBinaryOp(_input);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CadenceParser.prototype.operator_characters_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return _input.get(_input.index()-1).getType()!=WS;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CadenceParser.prototype.dot_operator_characters_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return _input.get(_input.index()-1).getType()!=WS;
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CadenceParser = CadenceParser;
