// Generated from CadenceParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CadenceParserListener = require('./CadenceParserListener').CadenceParserListener;
var grammarFileName = "CadenceParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003t\u03f5\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004",
    "y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004\u007f\t",
    "\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t\u0082\u0004",
    "\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004\u0086\t",
    "\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0003\u0002\u0005\u0002",
    "\u0112\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u011d",
    "\n\u0004\f\u0004\u000e\u0004\u0120\u000b\u0004\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0124\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u012d\n\u0007",
    "\f\u0007\u000e\u0007\u0130\u000b\u0007\u0003\b\u0003\b\u0003\t\u0003",
    "\t\u0005\t\u0136\n\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0007\n",
    "\u013d\n\n\f\n\u000e\n\u0140\u000b\n\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u0144\n\u000b\u0003\f\u0005\f\u0147\n\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0151",
    "\n\u000e\u0003\u000f\u0005\u000f\u0154\n\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u0158\n\u000f\u0003\u000f\u0005\u000f\u015b\n\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0166\n\u0013\u0003\u0014",
    "\u0003\u0014\u0006\u0014\u016a\n\u0014\r\u0014\u000e\u0014\u016b\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0006\u0014\u0171\n\u0014\r\u0014\u000e",
    "\u0014\u0172\u0003\u0014\u0005\u0014\u0176\n\u0014\u0003\u0015\u0003",
    "\u0015\u0007\u0015\u017a\n\u0015\f\u0015\u000e\u0015\u017d\u000b\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0182\n\u0015\f\u0015",
    "\u000e\u0015\u0185\u000b\u0015\u0003\u0015\u0005\u0015\u0188\n\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0007\u0016\u0190\n\u0016\f\u0016\u000e\u0016\u0193\u000b\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0007\u0016\u019c\n\u0016\f\u0016\u000e\u0016\u019f\u000b\u0016",
    "\u0003\u0016\u0005\u0016\u01a2\n\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u01a9\n\u0018\f\u0018\u000e",
    "\u0018\u01ac\u000b\u0018\u0003\u0019\u0005\u0019\u01af\n\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u01b9\n\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d",
    "\u01c2\n\u001d\f\u001d\u000e\u001d\u01c5\u000b\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01cb\n\u001d\f\u001d\u000e",
    "\u001d\u01ce\u000b\u001d\u0007\u001d\u01d0\n\u001d\f\u001d\u000e\u001d",
    "\u01d3\u000b\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01d8",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0005\u001f\u01df\n\u001f\u0003 \u0003 \u0005 \u01e3\n \u0003 \u0003",
    " \u0003!\u0003!\u0003!\u0007!\u01ea\n!\f!\u000e!\u01ed\u000b!\u0003",
    "!\u0005!\u01f0\n!\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0005#\u01f7",
    "\n#\u0003#\u0003#\u0003$\u0003$\u0003$\u0007$\u01fe\n$\f$\u000e$\u0201",
    "\u000b$\u0003$\u0005$\u0204\n$\u0003%\u0003%\u0003%\u0003%\u0003&\u0003",
    "&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005",
    "\'\u0214\n\'\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003*\u0003",
    "*\u0003*\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003-\u0003-\u0003",
    "-\u0003.\u0003.\u0003/\u0003/\u00030\u00030\u00030\u00031\u00031\u0003",
    "1\u00031\u00032\u00032\u00032\u00033\u00033\u00034\u00034\u00035\u0003",
    "5\u00036\u00036\u00056\u023e\n6\u00036\u00036\u00036\u00056\u0243\n",
    "6\u00037\u00037\u00057\u0247\n7\u00038\u00038\u00058\u024b\n8\u0003",
    "9\u00039\u00069\u024f\n9\r9\u000e9\u0250\u0003:\u0003:\u0003;\u0003",
    ";\u0005;\u0257\n;\u0003<\u0003<\u0006<\u025b\n<\r<\u000e<\u025c\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0005=\u026a\n=\u0003>\u0003>\u0003>\u0005>\u026f\n>\u0003>\u0003",
    ">\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003D\u0005D\u028f",
    "\nD\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0005E\u0297\nE\u0003",
    "E\u0003E\u0005E\u029b\nE\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u02a2",
    "\nF\u0003F\u0005F\u02a5\nF\u0003G\u0003G\u0003H\u0003H\u0003I\u0003",
    "I\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003",
    "M\u0003M\u0003M\u0003N\u0003N\u0005N\u02bb\nN\u0003O\u0003O\u0003O\u0003",
    "P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0006S\u02c9",
    "\nS\rS\u000eS\u02ca\u0003T\u0006T\u02ce\nT\rT\u000eT\u02cf\u0003U\u0003",
    "U\u0005U\u02d4\nU\u0003U\u0003U\u0003V\u0005V\u02d9\nV\u0003V\u0003",
    "V\u0003W\u0003W\u0005W\u02df\nW\u0003X\u0003X\u0005X\u02e3\nX\u0003",
    "Y\u0003Y\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0005[\u02ec\n[\u0005[\u02ee",
    "\n[\u0003[\u0003[\u0003\\\u0003\\\u0003\\\u0007\\\u02f5\n\\\f\\\u000e",
    "\\\u02f8\u000b\\\u0003]\u0003]\u0003]\u0003]\u0005]\u02fe\n]\u0003^",
    "\u0006^\u0301\n^\r^\u000e^\u0302\u0003_\u0003_\u0003_\u0003_\u0005_",
    "\u0309\n_\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u0310\n`\u0003`",
    "\u0005`\u0313\n`\u0003a\u0006a\u0316\na\ra\u000ea\u0317\u0003b\u0003",
    "b\u0005b\u031c\nb\u0003b\u0003b\u0003b\u0005b\u0321\nb\u0003c\u0003",
    "c\u0005c\u0325\nc\u0003d\u0003d\u0005d\u0329\nd\u0003d\u0003d\u0003",
    "d\u0005d\u032e\nd\u0007d\u0330\nd\fd\u000ed\u0333\u000bd\u0003e\u0003",
    "e\u0003e\u0003f\u0003f\u0003f\u0005f\u033b\nf\u0003g\u0003g\u0005g\u033f",
    "\ng\u0003h\u0003h\u0005h\u0343\nh\u0003i\u0003i\u0003j\u0003j\u0005",
    "j\u0349\nj\u0003j\u0005j\u034c\nj\u0003k\u0003k\u0005k\u0350\nk\u0003",
    "l\u0003l\u0003l\u0005l\u0355\nl\u0003l\u0005l\u0358\nl\u0003m\u0003",
    "m\u0003n\u0003n\u0003o\u0003o\u0005o\u0360\no\u0003o\u0003o\u0003p\u0003",
    "p\u0003p\u0007p\u0367\np\fp\u000ep\u036a\u000bp\u0003q\u0003q\u0003",
    "q\u0005q\u036f\nq\u0003q\u0003q\u0003r\u0003r\u0003r\u0007r\u0376\n",
    "r\fr\u000er\u0379\u000br\u0003s\u0003s\u0005s\u037d\ns\u0003t\u0003",
    "t\u0003t\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0005u\u038b\nu\u0003v\u0003v\u0003v\u0003v\u0003w\u0003w\u0003w\u0003",
    "w\u0003x\u0005x\u0396\nx\u0003x\u0003x\u0003x\u0003x\u0003x\u0003x\u0003",
    "x\u0007x\u039f\nx\fx\u000ex\u03a2\u000bx\u0003x\u0003x\u0003y\u0003",
    "y\u0003y\u0003z\u0005z\u03aa\nz\u0003z\u0003z\u0005z\u03ae\nz\u0003",
    "z\u0005z\u03b1\nz\u0003z\u0003z\u0005z\u03b5\nz\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0005{\u03bd\n{\u0003|\u0003|\u0003}\u0003}\u0003",
    "}\u0003}\u0007}\u03c5\n}\f}\u000e}\u03c8\u000b}\u0003~\u0003~\u0003",
    "\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0005\u0080\u03d0\n\u0080",
    "\u0003\u0081\u0003\u0081\u0005\u0081\u03d4\n\u0081\u0003\u0082\u0003",
    "\u0082\u0005\u0082\u03d8\n\u0082\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0003\u0084\u0003\u0084\u0005\u0084\u03df\n\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0086\u0003\u0086\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0007\u0087\u03eb\n\u0087\f\u0087\u000e",
    "\u0087\u03ee\u000b\u0087\u0003\u0087\u0005\u0087\u03f1\n\u0087\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0002\u0002\u0089\u0002\u0004\u0006\b",
    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.",
    "02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0002\u000b\u0003\u00024",
    "5\u0003\u0002^b\u0003\u0002MP\u0007\u0002\u000e\u000e\u0010\u0010HI",
    "KMQW\u0003\u0002&\'\u0004\u0002\u0003\u0003#$\u0004\u0002\u000e\u000e",
    "KK\t\u0002\u0017\u0017\u001b\u001b\u001e\u001e  #%()79\u0003\u0002\u000f",
    "\u0010\u0002\u03fb\u0002\u0111\u0003\u0002\u0002\u0002\u0004\u0115\u0003",
    "\u0002\u0002\u0002\u0006\u0119\u0003\u0002\u0002\u0002\b\u0121\u0003",
    "\u0002\u0002\u0002\n\u0125\u0003\u0002\u0002\u0002\f\u0129\u0003\u0002",
    "\u0002\u0002\u000e\u0131\u0003\u0002\u0002\u0002\u0010\u0133\u0003\u0002",
    "\u0002\u0002\u0012\u0139\u0003\u0002\u0002\u0002\u0014\u0141\u0003\u0002",
    "\u0002\u0002\u0016\u0146\u0003\u0002\u0002\u0002\u0018\u014a\u0003\u0002",
    "\u0002\u0002\u001a\u0150\u0003\u0002\u0002\u0002\u001c\u015a\u0003\u0002",
    "\u0002\u0002\u001e\u015c\u0003\u0002\u0002\u0002 \u015e\u0003\u0002",
    "\u0002\u0002\"\u0160\u0003\u0002\u0002\u0002$\u0165\u0003\u0002\u0002",
    "\u0002&\u0175\u0003\u0002\u0002\u0002(\u0187\u0003\u0002\u0002\u0002",
    "*\u01a1\u0003\u0002\u0002\u0002,\u01a3\u0003\u0002\u0002\u0002.\u01a5",
    "\u0003\u0002\u0002\u00020\u01ae\u0003\u0002\u0002\u00022\u01b2\u0003",
    "\u0002\u0002\u00024\u01b8\u0003\u0002\u0002\u00026\u01ba\u0003\u0002",
    "\u0002\u00028\u01be\u0003\u0002\u0002\u0002:\u01d4\u0003\u0002\u0002",
    "\u0002<\u01de\u0003\u0002\u0002\u0002>\u01e0\u0003\u0002\u0002\u0002",
    "@\u01e6\u0003\u0002\u0002\u0002B\u01f1\u0003\u0002\u0002\u0002D\u01f3",
    "\u0003\u0002\u0002\u0002F\u01fa\u0003\u0002\u0002\u0002H\u0205\u0003",
    "\u0002\u0002\u0002J\u0209\u0003\u0002\u0002\u0002L\u0213\u0003\u0002",
    "\u0002\u0002N\u0215\u0003\u0002\u0002\u0002P\u0218\u0003\u0002\u0002",
    "\u0002R\u021b\u0003\u0002\u0002\u0002T\u021e\u0003\u0002\u0002\u0002",
    "V\u0221\u0003\u0002\u0002\u0002X\u0224\u0003\u0002\u0002\u0002Z\u0227",
    "\u0003\u0002\u0002\u0002\\\u0229\u0003\u0002\u0002\u0002^\u022b\u0003",
    "\u0002\u0002\u0002`\u022e\u0003\u0002\u0002\u0002b\u0232\u0003\u0002",
    "\u0002\u0002d\u0235\u0003\u0002\u0002\u0002f\u0237\u0003\u0002\u0002",
    "\u0002h\u0239\u0003\u0002\u0002\u0002j\u0242\u0003\u0002\u0002\u0002",
    "l\u0246\u0003\u0002\u0002\u0002n\u024a\u0003\u0002\u0002\u0002p\u024e",
    "\u0003\u0002\u0002\u0002r\u0252\u0003\u0002\u0002\u0002t\u0256\u0003",
    "\u0002\u0002\u0002v\u025a\u0003\u0002\u0002\u0002x\u0269\u0003\u0002",
    "\u0002\u0002z\u026b\u0003\u0002\u0002\u0002|\u0273\u0003\u0002\u0002",
    "\u0002~\u0279\u0003\u0002\u0002\u0002\u0080\u027e\u0003\u0002\u0002",
    "\u0002\u0082\u0281\u0003\u0002\u0002\u0002\u0084\u0287\u0003\u0002\u0002",
    "\u0002\u0086\u028e\u0003\u0002\u0002\u0002\u0088\u0293\u0003\u0002\u0002",
    "\u0002\u008a\u02a1\u0003\u0002\u0002\u0002\u008c\u02a6\u0003\u0002\u0002",
    "\u0002\u008e\u02a8\u0003\u0002\u0002\u0002\u0090\u02aa\u0003\u0002\u0002",
    "\u0002\u0092\u02ac\u0003\u0002\u0002\u0002\u0094\u02af\u0003\u0002\u0002",
    "\u0002\u0096\u02b2\u0003\u0002\u0002\u0002\u0098\u02b5\u0003\u0002\u0002",
    "\u0002\u009a\u02b8\u0003\u0002\u0002\u0002\u009c\u02bc\u0003\u0002\u0002",
    "\u0002\u009e\u02bf\u0003\u0002\u0002\u0002\u00a0\u02c2\u0003\u0002\u0002",
    "\u0002\u00a2\u02c5\u0003\u0002\u0002\u0002\u00a4\u02c8\u0003\u0002\u0002",
    "\u0002\u00a6\u02cd\u0003\u0002\u0002\u0002\u00a8\u02d1\u0003\u0002\u0002",
    "\u0002\u00aa\u02d8\u0003\u0002\u0002\u0002\u00ac\u02de\u0003\u0002\u0002",
    "\u0002\u00ae\u02e0\u0003\u0002\u0002\u0002\u00b0\u02e4\u0003\u0002\u0002",
    "\u0002\u00b2\u02e6\u0003\u0002\u0002\u0002\u00b4\u02e8\u0003\u0002\u0002",
    "\u0002\u00b6\u02f1\u0003\u0002\u0002\u0002\u00b8\u02fd\u0003\u0002\u0002",
    "\u0002\u00ba\u0300\u0003\u0002\u0002\u0002\u00bc\u0304\u0003\u0002\u0002",
    "\u0002\u00be\u030f\u0003\u0002\u0002\u0002\u00c0\u0315\u0003\u0002\u0002",
    "\u0002\u00c2\u031b\u0003\u0002\u0002\u0002\u00c4\u0322\u0003\u0002\u0002",
    "\u0002\u00c6\u0328\u0003\u0002\u0002\u0002\u00c8\u0334\u0003\u0002\u0002",
    "\u0002\u00ca\u033a\u0003\u0002\u0002\u0002\u00cc\u033e\u0003\u0002\u0002",
    "\u0002\u00ce\u0342\u0003\u0002\u0002\u0002\u00d0\u0344\u0003\u0002\u0002",
    "\u0002\u00d2\u0348\u0003\u0002\u0002\u0002\u00d4\u034f\u0003\u0002\u0002",
    "\u0002\u00d6\u0354\u0003\u0002\u0002\u0002\u00d8\u0359\u0003\u0002\u0002",
    "\u0002\u00da\u035b\u0003\u0002\u0002\u0002\u00dc\u035d\u0003\u0002\u0002",
    "\u0002\u00de\u0363\u0003\u0002\u0002\u0002\u00e0\u036e\u0003\u0002\u0002",
    "\u0002\u00e2\u0372\u0003\u0002\u0002\u0002\u00e4\u037a\u0003\u0002\u0002",
    "\u0002\u00e6\u037e\u0003\u0002\u0002\u0002\u00e8\u038a\u0003\u0002\u0002",
    "\u0002\u00ea\u038c\u0003\u0002\u0002\u0002\u00ec\u0390\u0003\u0002\u0002",
    "\u0002\u00ee\u0395\u0003\u0002\u0002\u0002\u00f0\u03a5\u0003\u0002\u0002",
    "\u0002\u00f2\u03a9\u0003\u0002\u0002\u0002\u00f4\u03bc\u0003\u0002\u0002",
    "\u0002\u00f6\u03be\u0003\u0002\u0002\u0002\u00f8\u03c0\u0003\u0002\u0002",
    "\u0002\u00fa\u03c9\u0003\u0002\u0002\u0002\u00fc\u03cb\u0003\u0002\u0002",
    "\u0002\u00fe\u03cd\u0003\u0002\u0002\u0002\u0100\u03d1\u0003\u0002\u0002",
    "\u0002\u0102\u03d5\u0003\u0002\u0002\u0002\u0104\u03d9\u0003\u0002\u0002",
    "\u0002\u0106\u03dc\u0003\u0002\u0002\u0002\u0108\u03e3\u0003\u0002\u0002",
    "\u0002\u010a\u03e5\u0003\u0002\u0002\u0002\u010c\u03e7\u0003\u0002\u0002",
    "\u0002\u010e\u03f2\u0003\u0002\u0002\u0002\u0110\u0112\u0005\u00c0a",
    "\u0002\u0111\u0110\u0003\u0002\u0002\u0002\u0111\u0112\u0003\u0002\u0002",
    "\u0002\u0112\u0113\u0003\u0002\u0002\u0002\u0113\u0114\u0007\u0002\u0002",
    "\u0003\u0114\u0003\u0003\u0002\u0002\u0002\u0115\u0116\u0007H\u0002",
    "\u0002\u0116\u0117\u0005\u0006\u0004\u0002\u0117\u0118\u0007I\u0002",
    "\u0002\u0118\u0005\u0003\u0002\u0002\u0002\u0119\u011e\u0005\b\u0005",
    "\u0002\u011a\u011b\u0007E\u0002\u0002\u011b\u011d\u0005\b\u0005\u0002",
    "\u011c\u011a\u0003\u0002\u0002\u0002\u011d\u0120\u0003\u0002\u0002\u0002",
    "\u011e\u011c\u0003\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002\u0002",
    "\u011f\u0007\u0003\u0002\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002",
    "\u0121\u0123\u0005\u00f4{\u0002\u0122\u0124\u0005\u00f0y\u0002\u0123",
    "\u0122\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124",
    "\t\u0003\u0002\u0002\u0002\u0125\u0126\u0007H\u0002\u0002\u0126\u0127",
    "\u0005\f\u0007\u0002\u0127\u0128\u0007I\u0002\u0002\u0128\u000b\u0003",
    "\u0002\u0002\u0002\u0129\u012e\u0005\u000e\b\u0002\u012a\u012b\u0007",
    "E\u0002\u0002\u012b\u012d\u0005\u000e\b\u0002\u012c\u012a\u0003\u0002",
    "\u0002\u0002\u012d\u0130\u0003\u0002\u0002\u0002\u012e\u012c\u0003\u0002",
    "\u0002\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f\r\u0003\u0002",
    "\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0131\u0132\u0005\u00e8",
    "u\u0002\u0132\u000f\u0003\u0002\u0002\u0002\u0133\u0135\u0007@\u0002",
    "\u0002\u0134\u0136\u0005\u0012\n\u0002\u0135\u0134\u0003\u0002\u0002",
    "\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002",
    "\u0002\u0137\u0138\u0007C\u0002\u0002\u0138\u0011\u0003\u0002\u0002",
    "\u0002\u0139\u013e\u0005\u0014\u000b\u0002\u013a\u013b\u0007E\u0002",
    "\u0002\u013b\u013d\u0005\u0014\u000b\u0002\u013c\u013a\u0003\u0002\u0002",
    "\u0002\u013d\u0140\u0003\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002",
    "\u0002\u013e\u013f\u0003\u0002\u0002\u0002\u013f\u0013\u0003\u0002\u0002",
    "\u0002\u0140\u013e\u0003\u0002\u0002\u0002\u0141\u0143\u0005\u0016\f",
    "\u0002\u0142\u0144\u0005\u00f0y\u0002\u0143\u0142\u0003\u0002\u0002",
    "\u0002\u0143\u0144\u0003\u0002\u0002\u0002\u0144\u0015\u0003\u0002\u0002",
    "\u0002\u0145\u0147\u0005\u00f6|\u0002\u0146\u0145\u0003\u0002\u0002",
    "\u0002\u0146\u0147\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002",
    "\u0002\u0148\u0149\u0005\u00f4{\u0002\u0149\u0017\u0003\u0002\u0002",
    "\u0002\u014a\u014b\u0007L\u0002\u0002\u014b\u0019\u0003\u0002\u0002",
    "\u0002\u014c\u0151\u0005\u001c\u000f\u0002\u014d\u0151\u0005$\u0013",
    "\u0002\u014e\u0151\u0005\u001e\u0010\u0002\u014f\u0151\u0005 \u0011",
    "\u0002\u0150\u014c\u0003\u0002\u0002\u0002\u0150\u014d\u0003\u0002\u0002",
    "\u0002\u0150\u014e\u0003\u0002\u0002\u0002\u0150\u014f\u0003\u0002\u0002",
    "\u0002\u0151\u001b\u0003\u0002\u0002\u0002\u0152\u0154\u0005\u0018\r",
    "\u0002\u0153\u0152\u0003\u0002\u0002\u0002\u0153\u0154\u0003\u0002\u0002",
    "\u0002\u0154\u0155\u0003\u0002\u0002\u0002\u0155\u015b\u0005\"\u0012",
    "\u0002\u0156\u0158\u0005\u0018\r\u0002\u0157\u0156\u0003\u0002\u0002",
    "\u0002\u0157\u0158\u0003\u0002\u0002\u0002\u0158\u0159\u0003\u0002\u0002",
    "\u0002\u0159\u015b\u0007c\u0002\u0002\u015a\u0153\u0003\u0002\u0002",
    "\u0002\u015a\u0157\u0003\u0002\u0002\u0002\u015b\u001d\u0003\u0002\u0002",
    "\u0002\u015c\u015d\t\u0002\u0002\u0002\u015d\u001f\u0003\u0002\u0002",
    "\u0002\u015e\u015f\u00076\u0002\u0002\u015f!\u0003\u0002\u0002\u0002",
    "\u0160\u0161\t\u0003\u0002\u0002\u0161#\u0003\u0002\u0002\u0002\u0162",
    "\u0166\u0005&\u0014\u0002\u0163\u0166\u0005*\u0016\u0002\u0164\u0166",
    "\u0005(\u0015\u0002\u0165\u0162\u0003\u0002\u0002\u0002\u0165\u0163",
    "\u0003\u0002\u0002\u0002\u0165\u0164\u0003\u0002\u0002\u0002\u0166%",
    "\u0003\u0002\u0002\u0002\u0167\u0169\u0007g\u0002\u0002\u0168\u016a",
    "\u0007t\u0002\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u016a\u016b",
    "\u0003\u0002\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016c",
    "\u0003\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u0176",
    "\u0007s\u0002\u0002\u016e\u0170\u0007h\u0002\u0002\u016f\u0171\u0007",
    "r\u0002\u0002\u0170\u016f\u0003\u0002\u0002\u0002\u0171\u0172\u0003",
    "\u0002\u0002\u0002\u0172\u0170\u0003\u0002\u0002\u0002\u0172\u0173\u0003",
    "\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u0176\u0007",
    "q\u0002\u0002\u0175\u0167\u0003\u0002\u0002\u0002\u0175\u016e\u0003",
    "\u0002\u0002\u0002\u0176\'\u0003\u0002\u0002\u0002\u0177\u017b\u0007",
    "j\u0002\u0002\u0178\u017a\u0007m\u0002\u0002\u0179\u0178\u0003\u0002",
    "\u0002\u0002\u017a\u017d\u0003\u0002\u0002\u0002\u017b\u0179\u0003\u0002",
    "\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u017e\u0003\u0002",
    "\u0002\u0002\u017d\u017b\u0003\u0002\u0002\u0002\u017e\u0188\u0007l",
    "\u0002\u0002\u017f\u0183\u0007i\u0002\u0002\u0180\u0182\u0007p\u0002",
    "\u0002\u0181\u0180\u0003\u0002\u0002\u0002\u0182\u0185\u0003\u0002\u0002",
    "\u0002\u0183\u0181\u0003\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002",
    "\u0002\u0184\u0186\u0003\u0002\u0002\u0002\u0185\u0183\u0003\u0002\u0002",
    "\u0002\u0186\u0188\u0007o\u0002\u0002\u0187\u0177\u0003\u0002\u0002",
    "\u0002\u0187\u017f\u0003\u0002\u0002\u0002\u0188)\u0003\u0002\u0002",
    "\u0002\u0189\u0191\u0007j\u0002\u0002\u018a\u0190\u0007m\u0002\u0002",
    "\u018b\u018c\u0007k\u0002\u0002\u018c\u018d\u0005,\u0017\u0002\u018d",
    "\u018e\u0007C\u0002\u0002\u018e\u0190\u0003\u0002\u0002\u0002\u018f",
    "\u018a\u0003\u0002\u0002\u0002\u018f\u018b\u0003\u0002\u0002\u0002\u0190",
    "\u0193\u0003\u0002\u0002\u0002\u0191\u018f\u0003\u0002\u0002\u0002\u0191",
    "\u0192\u0003\u0002\u0002\u0002\u0192\u0194\u0003\u0002\u0002\u0002\u0193",
    "\u0191\u0003\u0002\u0002\u0002\u0194\u01a2\u0007l\u0002\u0002\u0195",
    "\u019d\u0007i\u0002\u0002\u0196\u019c\u0007p\u0002\u0002\u0197\u0198",
    "\u0007n\u0002\u0002\u0198\u0199\u0005,\u0017\u0002\u0199\u019a\u0007",
    "C\u0002\u0002\u019a\u019c\u0003\u0002\u0002\u0002\u019b\u0196\u0003",
    "\u0002\u0002\u0002\u019b\u0197\u0003\u0002\u0002\u0002\u019c\u019f\u0003",
    "\u0002\u0002\u0002\u019d\u019b\u0003\u0002\u0002\u0002\u019d\u019e\u0003",
    "\u0002\u0002\u0002\u019e\u01a0\u0003\u0002\u0002\u0002\u019f\u019d\u0003",
    "\u0002\u0002\u0002\u01a0\u01a2\u0007o\u0002\u0002\u01a1\u0189\u0003",
    "\u0002\u0002\u0002\u01a1\u0195\u0003\u0002\u0002\u0002\u01a2+\u0003",
    "\u0002\u0002\u0002\u01a3\u01a4\u00050\u0019\u0002\u01a4-\u0003\u0002",
    "\u0002\u0002\u01a5\u01aa\u0005,\u0017\u0002\u01a6\u01a7\u0007E\u0002",
    "\u0002\u01a7\u01a9\u0005,\u0017\u0002\u01a8\u01a6\u0003\u0002\u0002",
    "\u0002\u01a9\u01ac\u0003\u0002\u0002\u0002\u01aa\u01a8\u0003\u0002\u0002",
    "\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab/\u0003\u0002\u0002",
    "\u0002\u01ac\u01aa\u0003\u0002\u0002\u0002\u01ad\u01af\u0005f4\u0002",
    "\u01ae\u01ad\u0003\u0002\u0002\u0002\u01ae\u01af\u0003\u0002\u0002\u0002",
    "\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b1\u00052\u001a\u0002",
    "\u01b11\u0003\u0002\u0002\u0002\u01b2\u01b3\u00054\u001b\u0002\u01b3",
    "3\u0003\u0002\u0002\u0002\u01b4\u01b9\u0005\u00ecw\u0002\u01b5\u01b9",
    "\u0005\u00eex\u0002\u01b6\u01b9\u0005<\u001f\u0002\u01b7\u01b9\u0005",
    "6\u001c\u0002\u01b8\u01b4\u0003\u0002\u0002\u0002\u01b8\u01b5\u0003",
    "\u0002\u0002\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b8\u01b7\u0003",
    "\u0002\u0002\u0002\u01b95\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007",
    "7\u0002\u0002\u01bb\u01bc\u0007>\u0002\u0002\u01bc\u01bd\u00058\u001d",
    "\u0002\u01bd7\u0003\u0002\u0002\u0002\u01be\u01c3\u0005\u00d2j\u0002",
    "\u01bf\u01c2\u0005\u0010\t\u0002\u01c0\u01c2\u0005:\u001e\u0002\u01c1",
    "\u01bf\u0003\u0002\u0002\u0002\u01c1\u01c0\u0003\u0002\u0002\u0002\u01c2",
    "\u01c5\u0003\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002\u01c3",
    "\u01c4\u0003\u0002\u0002\u0002\u01c4\u01d1\u0003\u0002\u0002\u0002\u01c5",
    "\u01c3\u0003\u0002\u0002\u0002\u01c6\u01c7\u0007>\u0002\u0002\u01c7",
    "\u01cc\u0005\u00d2j\u0002\u01c8\u01cb\u0005\u0010\t\u0002\u01c9\u01cb",
    "\u0005:\u001e\u0002\u01ca\u01c8\u0003\u0002\u0002\u0002\u01ca\u01c9",
    "\u0003\u0002\u0002\u0002\u01cb\u01ce\u0003\u0002\u0002\u0002\u01cc\u01ca",
    "\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002\u0002\u01cd\u01d0",
    "\u0003\u0002\u0002\u0002\u01ce\u01cc\u0003\u0002\u0002\u0002\u01cf\u01c6",
    "\u0003\u0002\u0002\u0002\u01d0\u01d3\u0003\u0002\u0002\u0002\u01d1\u01cf",
    "\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d29",
    "\u0003\u0002\u0002\u0002\u01d3\u01d1\u0003\u0002\u0002\u0002\u01d4\u01d7",
    "\u0007A\u0002\u0002\u01d5\u01d8\u0005\u00d4k\u0002\u01d6\u01d8\u0005",
    "<\u001f\u0002\u01d7\u01d5\u0003\u0002\u0002\u0002\u01d7\u01d6\u0003",
    "\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9\u01da\u0007",
    "D\u0002\u0002\u01da;\u0003\u0002\u0002\u0002\u01db\u01df\u0005\u001a",
    "\u000e\u0002\u01dc\u01df\u0005> \u0002\u01dd\u01df\u0005D#\u0002\u01de",
    "\u01db\u0003\u0002\u0002\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01de",
    "\u01dd\u0003\u0002\u0002\u0002\u01df=\u0003\u0002\u0002\u0002\u01e0",
    "\u01e2\u0007A\u0002\u0002\u01e1\u01e3\u0005@!\u0002\u01e2\u01e1\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003",
    "\u0002\u0002\u0002\u01e4\u01e5\u0007D\u0002\u0002\u01e5?\u0003\u0002",
    "\u0002\u0002\u01e6\u01eb\u0005B\"\u0002\u01e7\u01e8\u0007E\u0002\u0002",
    "\u01e8\u01ea\u0005B\"\u0002\u01e9\u01e7\u0003\u0002\u0002\u0002\u01ea",
    "\u01ed\u0003\u0002\u0002\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002\u01eb",
    "\u01ec\u0003\u0002\u0002\u0002\u01ec\u01ef\u0003\u0002\u0002\u0002\u01ed",
    "\u01eb\u0003\u0002\u0002\u0002\u01ee\u01f0\u0007E\u0002\u0002\u01ef",
    "\u01ee\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003\u0002\u0002\u0002\u01f0",
    "A\u0003\u0002\u0002\u0002\u01f1\u01f2\u0005,\u0017\u0002\u01f2C\u0003",
    "\u0002\u0002\u0002\u01f3\u01f6\u0007A\u0002\u0002\u01f4\u01f7\u0005",
    "F$\u0002\u01f5\u01f7\u0007F\u0002\u0002\u01f6\u01f4\u0003\u0002\u0002",
    "\u0002\u01f6\u01f5\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002",
    "\u0002\u01f8\u01f9\u0007D\u0002\u0002\u01f9E\u0003\u0002\u0002\u0002",
    "\u01fa\u01ff\u0005H%\u0002\u01fb\u01fc\u0007E\u0002\u0002\u01fc\u01fe",
    "\u0005H%\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002\u01fe\u0201\u0003",
    "\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u01ff\u0200\u0003",
    "\u0002\u0002\u0002\u0200\u0203\u0003\u0002\u0002\u0002\u0201\u01ff\u0003",
    "\u0002\u0002\u0002\u0202\u0204\u0007E\u0002\u0002\u0203\u0202\u0003",
    "\u0002\u0002\u0002\u0203\u0204\u0003\u0002\u0002\u0002\u0204G\u0003",
    "\u0002\u0002\u0002\u0205\u0206\u0005,\u0017\u0002\u0206\u0207\u0007",
    "F\u0002\u0002\u0207\u0208\u0005,\u0017\u0002\u0208I\u0003\u0002\u0002",
    "\u0002\u0209\u020a\t\u0004\u0002\u0002\u020aK\u0003\u0002\u0002\u0002",
    "\u020b\u0214\u0005N(\u0002\u020c\u0214\u0005P)\u0002\u020d\u0214\u0005",
    "R*\u0002\u020e\u0214\u0005T+\u0002\u020f\u0214\u0005V,\u0002\u0210\u0214",
    "\u0005X-\u0002\u0211\u0214\u0005Z.\u0002\u0212\u0214\u0005\\/\u0002",
    "\u0213\u020b\u0003\u0002\u0002\u0002\u0213\u020c\u0003\u0002\u0002\u0002",
    "\u0213\u020d\u0003\u0002\u0002\u0002\u0213\u020e\u0003\u0002\u0002\u0002",
    "\u0213\u020f\u0003\u0002\u0002\u0002\u0213\u0210\u0003\u0002\u0002\u0002",
    "\u0213\u0211\u0003\u0002\u0002\u0002\u0213\u0212\u0003\u0002\u0002\u0002",
    "\u0214M\u0003\u0002\u0002\u0002\u0215\u0216\u0007\u0010\u0002\u0002",
    "\u0216\u0217\u0007\u0010\u0002\u0002\u0217O\u0003\u0002\u0002\u0002",
    "\u0218\u0219\u0007Q\u0002\u0002\u0219\u021a\u0007Q\u0002\u0002\u021a",
    "Q\u0003\u0002\u0002\u0002\u021b\u021c\u0007K\u0002\u0002\u021c\u021d",
    "\u0007M\u0002\u0002\u021dS\u0003\u0002\u0002\u0002\u021e\u021f\u0007",
    "M\u0002\u0002\u021f\u0220\u0007M\u0002\u0002\u0220U\u0003\u0002\u0002",
    "\u0002\u0221\u0222\u0007I\u0002\u0002\u0222\u0223\u0007M\u0002\u0002",
    "\u0223W\u0003\u0002\u0002\u0002\u0224\u0225\u0007H\u0002\u0002\u0225",
    "\u0226\u0007M\u0002\u0002\u0226Y\u0003\u0002\u0002\u0002\u0227\u0228",
    "\u0007I\u0002\u0002\u0228[\u0003\u0002\u0002\u0002\u0229\u022a\u0007",
    "H\u0002\u0002\u022a]\u0003\u0002\u0002\u0002\u022b\u022c\u0007L\u0002",
    "\u0002\u022c\u022d\u0007I\u0002\u0002\u022d_\u0003\u0002\u0002\u0002",
    "\u022e\u022f\u0007>\u0002\u0002\u022f\u0230\u0007>\u0002\u0002\u0230",
    "\u0231\u0007>\u0002\u0002\u0231a\u0003\u0002\u0002\u0002\u0232\u0233",
    "\u0007M\u0002\u0002\u0233\u0234\u0007M\u0002\u0002\u0234c\u0003\u0002",
    "\u0002\u0002\u0235\u0236\u0005j6\u0002\u0236e\u0003\u0002\u0002\u0002",
    "\u0237\u0238\u0005j6\u0002\u0238g\u0003\u0002\u0002\u0002\u0239\u023a",
    "\u0005j6\u0002\u023ai\u0003\u0002\u0002\u0002\u023b\u023d\u0005l7\u0002",
    "\u023c\u023e\u0005p9\u0002\u023d\u023c\u0003\u0002\u0002\u0002\u023d",
    "\u023e\u0003\u0002\u0002\u0002\u023e\u0243\u0003\u0002\u0002\u0002\u023f",
    "\u0240\u0005r:\u0002\u0240\u0241\u0005v<\u0002\u0241\u0243\u0003\u0002",
    "\u0002\u0002\u0242\u023b\u0003\u0002\u0002\u0002\u0242\u023f\u0003\u0002",
    "\u0002\u0002\u0243k\u0003\u0002\u0002\u0002\u0244\u0247\t\u0005\u0002",
    "\u0002\u0245\u0247\u0007\\\u0002\u0002\u0246\u0244\u0003\u0002\u0002",
    "\u0002\u0246\u0245\u0003\u0002\u0002\u0002\u0247m\u0003\u0002\u0002",
    "\u0002\u0248\u024b\u0005l7\u0002\u0249\u024b\u0007]\u0002\u0002\u024a",
    "\u0248\u0003\u0002\u0002\u0002\u024a\u0249\u0003\u0002\u0002\u0002\u024b",
    "o\u0003\u0002\u0002\u0002\u024c\u024d\u00069\u0002\u0002\u024d\u024f",
    "\u0005n8\u0002\u024e\u024c\u0003\u0002\u0002\u0002\u024f\u0250\u0003",
    "\u0002\u0002\u0002\u0250\u024e\u0003\u0002\u0002\u0002\u0250\u0251\u0003",
    "\u0002\u0002\u0002\u0251q\u0003\u0002\u0002\u0002\u0252\u0253\u0007",
    ">\u0002\u0002\u0253s\u0003\u0002\u0002\u0002\u0254\u0257\u0007>\u0002",
    "\u0002\u0255\u0257\u0005n8\u0002\u0256\u0254\u0003\u0002\u0002\u0002",
    "\u0256\u0255\u0003\u0002\u0002\u0002\u0257u\u0003\u0002\u0002\u0002",
    "\u0258\u0259\u0006<\u0003\u0002\u0259\u025b\u0005t;\u0002\u025a\u0258",
    "\u0003\u0002\u0002\u0002\u025b\u025c\u0003\u0002\u0002\u0002\u025c\u025a",
    "\u0003\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025dw",
    "\u0003\u0002\u0002\u0002\u025e\u026a\u0005z>\u0002\u025f\u026a\u0005",
    "|?\u0002\u0260\u026a\u0005~@\u0002\u0261\u026a\u0005\u0082B\u0002\u0262",
    "\u026a\u0005\u0084C\u0002\u0263\u026a\u0005\u0086D\u0002\u0264\u026a",
    "\u0005\u0096L\u0002\u0265\u026a\u0005\u009cO\u0002\u0266\u026a\u0005",
    "\u0088E\u0002\u0267\u026a\u0005\u008aF\u0002\u0268\u026a\u0005\u0106",
    "\u0084\u0002\u0269\u025e\u0003\u0002\u0002\u0002\u0269\u025f\u0003\u0002",
    "\u0002\u0002\u0269\u0260\u0003\u0002\u0002\u0002\u0269\u0261\u0003\u0002",
    "\u0002\u0002\u0269\u0262\u0003\u0002\u0002\u0002\u0269\u0263\u0003\u0002",
    "\u0002\u0002\u0269\u0264\u0003\u0002\u0002\u0002\u0269\u0265\u0003\u0002",
    "\u0002\u0002\u0269\u0266\u0003\u0002\u0002\u0002\u0269\u0267\u0003\u0002",
    "\u0002\u0002\u0269\u0268\u0003\u0002\u0002\u0002\u026ay\u0003\u0002",
    "\u0002\u0002\u026b\u026c\u0005\u00bc_\u0002\u026c\u026e\u0007\u0004",
    "\u0002\u0002\u026d\u026f\u0007\u0006\u0002\u0002\u026e\u026d\u0003\u0002",
    "\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002",
    "\u0002\u0002\u0270\u0271\u0005\u00d4k\u0002\u0271\u0272\u0005\u00a8",
    "U\u0002\u0272{\u0003\u0002\u0002\u0002\u0273\u0274\u0005\u00bc_\u0002",
    "\u0274\u0275\u0007\u0007\u0002\u0002\u0275\u0276\u0007\u0006\u0002\u0002",
    "\u0276\u0277\u0005\u00d4k\u0002\u0277\u0278\u0005\u00a8U\u0002\u0278",
    "}\u0003\u0002\u0002\u0002\u0279\u027a\u0005\u00bc_\u0002\u027a\u027b",
    "\u0007\u0007\u0002\u0002\u027b\u027c\u0005\u0080A\u0002\u027c\u027d",
    "\u0005\u00a8U\u0002\u027d\u007f\u0003\u0002\u0002\u0002\u027e\u027f",
    "\u0005\u00d4k\u0002\u027f\u0280\u0005\u00f8}\u0002\u0280\u0081\u0003",
    "\u0002\u0002\u0002\u0281\u0282\u0005\u00bc_\u0002\u0282\u0283\u0007",
    "+\u0002\u0002\u0283\u0284\u0007\u0006\u0002\u0002\u0284\u0285\u0005",
    "\u00d4k\u0002\u0285\u0286\u0005\u00a8U\u0002\u0286\u0083\u0003\u0002",
    "\u0002\u0002\u0287\u0288\u0005\u00bc_\u0002\u0288\u0289\u0007+\u0002",
    "\u0002\u0289\u028a\u0005\u00d4k\u0002\u028a\u028b\u0005\u00f8}\u0002",
    "\u028b\u028c\u0005\u00a8U\u0002\u028c\u0085\u0003\u0002\u0002\u0002",
    "\u028d\u028f\u0005\u00a4S\u0002\u028e\u028d\u0003\u0002\u0002\u0002",
    "\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002",
    "\u0290\u0291\u0007&\u0002\u0002\u0291\u0292\u0005\u00e2r\u0002\u0292",
    "\u0087\u0003\u0002\u0002\u0002\u0293\u0294\u0005\u00aaV\u0002\u0294",
    "\u0296\u0005\u00acW\u0002\u0295\u0297\u0005\u0004\u0003\u0002\u0296",
    "\u0295\u0003\u0002\u0002\u0002\u0296\u0297\u0003\u0002\u0002\u0002\u0297",
    "\u0298\u0003\u0002\u0002\u0002\u0298\u029a\u0005\u00aeX\u0002\u0299",
    "\u029b\u0005\u00b2Z\u0002\u029a\u0299\u0003\u0002\u0002\u0002\u029a",
    "\u029b\u0003\u0002\u0002\u0002\u029b\u0089\u0003\u0002\u0002\u0002\u029c",
    "\u02a2\u0005\u008cG\u0002\u029d\u02a2\u0005\u008eH\u0002\u029e\u02a2",
    "\u0005\u0090I\u0002\u029f\u02a2\u0005\u0092J\u0002\u02a0\u02a2\u0005",
    "\u0094K\u0002\u02a1\u029c\u0003\u0002\u0002\u0002\u02a1\u029d\u0003",
    "\u0002\u0002\u0002\u02a1\u029e\u0003\u0002\u0002\u0002\u02a1\u029f\u0003",
    "\u0002\u0002\u0002\u02a1\u02a0\u0003\u0002\u0002\u0002\u02a2\u02a4\u0003",
    "\u0002\u0002\u0002\u02a3\u02a5\u0005\u00b2Z\u0002\u02a4\u02a3\u0003",
    "\u0002\u0002\u0002\u02a4\u02a5\u0003\u0002\u0002\u0002\u02a5\u008b\u0003",
    "\u0002\u0002\u0002\u02a6\u02a7\u0007\u0012\u0002\u0002\u02a7\u008d\u0003",
    "\u0002\u0002\u0002\u02a8\u02a9\u0007\u0013\u0002\u0002\u02a9\u008f\u0003",
    "\u0002\u0002\u0002\u02aa\u02ab\u0007\u0014\u0002\u0002\u02ab\u0091\u0003",
    "\u0002\u0002\u0002\u02ac\u02ad\u0007\u0015\u0002\u0002\u02ad\u02ae\u0005",
    "\u00aeX\u0002\u02ae\u0093\u0003\u0002\u0002\u0002\u02af\u02b0\u0007",
    "\u0011\u0002\u0002\u02b0\u02b1\u0005\u00aeX\u0002\u02b1\u0095\u0003",
    "\u0002\u0002\u0002\u02b2\u02b3\u0005\u0098M\u0002\u02b3\u02b4\u0005",
    "\u009aN\u0002\u02b4\u0097\u0003\u0002\u0002\u0002\u02b5\u02b6\u0005",
    "\u00bc_\u0002\u02b6\u02b7\t\u0006\u0002\u0002\u02b7\u0099\u0003\u0002",
    "\u0002\u0002\u02b8\u02ba\u0005\u00d2j\u0002\u02b9\u02bb\u0005\u00f0",
    "y\u0002\u02ba\u02b9\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002",
    "\u0002\u0002\u02bb\u009b\u0003\u0002\u0002\u0002\u02bc\u02bd\u0005\u009e",
    "P\u0002\u02bd\u02be\u0005\u00a0Q\u0002\u02be\u009d\u0003\u0002\u0002",
    "\u0002\u02bf\u02c0\u0005\u00bc_\u0002\u02c0\u02c1\u0007\u0005\u0002",
    "\u0002\u02c1\u009f\u0003\u0002\u0002\u0002\u02c2\u02c3\u0005\u00d2j",
    "\u0002\u02c3\u02c4\u0005\u0010\t\u0002\u02c4\u00a1\u0003\u0002\u0002",
    "\u0002\u02c5\u02c6\u0005\u00bc_\u0002\u02c6\u00a3\u0003\u0002\u0002",
    "\u0002\u02c7\u02c9\u0005\u00a2R\u0002\u02c8\u02c7\u0003\u0002\u0002",
    "\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca\u02c8\u0003\u0002\u0002",
    "\u0002\u02ca\u02cb\u0003\u0002\u0002\u0002\u02cb\u00a5\u0003\u0002\u0002",
    "\u0002\u02cc\u02ce\u0005x=\u0002\u02cd\u02cc\u0003\u0002\u0002\u0002",
    "\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002",
    "\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0\u00a7\u0003\u0002\u0002\u0002",
    "\u02d1\u02d3\u0007?\u0002\u0002\u02d2\u02d4\u0005\u00c0a\u0002\u02d3",
    "\u02d2\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002\u0002\u0002\u02d4",
    "\u02d5\u0003\u0002\u0002\u0002\u02d5\u02d6\u0007B\u0002\u0002\u02d6",
    "\u00a9\u0003\u0002\u0002\u0002\u02d7\u02d9\u0005\u00a4S\u0002\u02d8",
    "\u02d7\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9",
    "\u02da\u0003\u0002\u0002\u0002\u02da\u02db\u0007\u001f\u0002\u0002\u02db",
    "\u00ab\u0003\u0002\u0002\u0002\u02dc\u02df\u0005\u00d4k\u0002\u02dd",
    "\u02df\u0005j6\u0002\u02de\u02dc\u0003\u0002\u0002\u0002\u02de\u02dd",
    "\u0003\u0002\u0002\u0002\u02df\u00ad\u0003\u0002\u0002\u0002\u02e0\u02e2",
    "\u0005\u0010\t\u0002\u02e1\u02e3\u0005\u00b0Y\u0002\u02e2\u02e1\u0003",
    "\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u00af\u0003",
    "\u0002\u0002\u0002\u02e4\u02e5\u0005\u00f0y\u0002\u02e5\u00b1\u0003",
    "\u0002\u0002\u0002\u02e6\u02e7\u0005\u00a8U\u0002\u02e7\u00b3\u0003",
    "\u0002\u0002\u0002\u02e8\u02ed\u0007@\u0002\u0002\u02e9\u02eb\u0005",
    "\u00b6\\\u0002\u02ea\u02ec\u0005`1\u0002\u02eb\u02ea\u0003\u0002\u0002",
    "\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u02ee\u0003\u0002\u0002",
    "\u0002\u02ed\u02e9\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002",
    "\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u02f0\u0007C\u0002",
    "\u0002\u02f0\u00b5\u0003\u0002\u0002\u0002\u02f1\u02f6\u0005\u00b8]",
    "\u0002\u02f2\u02f3\u0007E\u0002\u0002\u02f3\u02f5\u0005\u00b8]\u0002",
    "\u02f4\u02f2\u0003\u0002\u0002\u0002\u02f5\u02f8\u0003\u0002\u0002\u0002",
    "\u02f6\u02f4\u0003\u0002\u0002\u0002\u02f6\u02f7\u0003\u0002\u0002\u0002",
    "\u02f7\u00b7\u0003\u0002\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002\u0002",
    "\u02f9\u02fe\u0005\u00e8u\u0002\u02fa\u02fb\u0005\u00ba^\u0002\u02fb",
    "\u02fc\u0005\u00f0y\u0002\u02fc\u02fe\u0003\u0002\u0002\u0002\u02fd",
    "\u02f9\u0003\u0002\u0002\u0002\u02fd\u02fa\u0003\u0002\u0002\u0002\u02fe",
    "\u00b9\u0003\u0002\u0002\u0002\u02ff\u0301\u0005\u00d4k\u0002\u0300",
    "\u02ff\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302",
    "\u0300\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303",
    "\u00bb\u0003\u0002\u0002\u0002\u0304\u0308\t\u0007\u0002\u0002\u0305",
    "\u0306\u0007@\u0002\u0002\u0306\u0307\u0007)\u0002\u0002\u0307\u0309",
    "\u0007C\u0002\u0002\u0308\u0305\u0003\u0002\u0002\u0002\u0308\u0309",
    "\u0003\u0002\u0002\u0002\u0309\u00bd\u0003\u0002\u0002\u0002\u030a\u0310",
    "\u0005x=\u0002\u030b\u0310\u0005\u00c2b\u0002\u030c\u0310\u0005\u00c4",
    "c\u0002\u030d\u0310\u0005\u00caf\u0002\u030e\u0310\u0005,\u0017\u0002",
    "\u030f\u030a\u0003\u0002\u0002\u0002\u030f\u030b\u0003\u0002\u0002\u0002",
    "\u030f\u030c\u0003\u0002\u0002\u0002\u030f\u030d\u0003\u0002\u0002\u0002",
    "\u030f\u030e\u0003\u0002\u0002\u0002\u0310\u0312\u0003\u0002\u0002\u0002",
    "\u0311\u0313\u0007G\u0002\u0002\u0312\u0311\u0003\u0002\u0002\u0002",
    "\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u00bf\u0003\u0002\u0002\u0002",
    "\u0314\u0316\u0005\u00be`\u0002\u0315\u0314\u0003\u0002\u0002\u0002",
    "\u0316\u0317\u0003\u0002\u0002\u0002\u0317\u0315\u0003\u0002\u0002\u0002",
    "\u0317\u0318\u0003\u0002\u0002\u0002\u0318\u00c1\u0003\u0002\u0002\u0002",
    "\u0319\u031c\u0005\u00ccg\u0002\u031a\u031c\u0005\u0096L\u0002\u031b",
    "\u0319\u0003\u0002\u0002\u0002\u031b\u031a\u0003\u0002\u0002\u0002\u031c",
    "\u031d\u0003\u0002\u0002\u0002\u031d\u0320\u0005J&\u0002\u031e\u0321",
    "\u0005\u00ccg\u0002\u031f\u0321\u0005<\u001f\u0002\u0320\u031e\u0003",
    "\u0002\u0002\u0002\u0320\u031f\u0003\u0002\u0002\u0002\u0321\u00c3\u0003",
    "\u0002\u0002\u0002\u0322\u0324\u0005\u00c6d\u0002\u0323\u0325\u0005",
    "\u00c8e\u0002\u0324\u0323\u0003\u0002\u0002\u0002\u0324\u0325\u0003",
    "\u0002\u0002\u0002\u0325\u00c5\u0003\u0002\u0002\u0002\u0326\u0329\u0005",
    "\u00ccg\u0002\u0327\u0329\u0005\u0096L\u0002\u0328\u0326\u0003\u0002",
    "\u0002\u0002\u0328\u0327\u0003\u0002\u0002\u0002\u0329\u0331\u0003\u0002",
    "\u0002\u0002\u032a\u032d\u0005L\'\u0002\u032b\u032e\u0005\u00ccg\u0002",
    "\u032c\u032e\u0005<\u001f\u0002\u032d\u032b\u0003\u0002\u0002\u0002",
    "\u032d\u032c\u0003\u0002\u0002\u0002\u032e\u0330\u0003\u0002\u0002\u0002",
    "\u032f\u032a\u0003\u0002\u0002\u0002\u0330\u0333\u0003\u0002\u0002\u0002",
    "\u0331\u032f\u0003\u0002\u0002\u0002\u0331\u0332\u0003\u0002\u0002\u0002",
    "\u0332\u00c7\u0003\u0002\u0002\u0002\u0333\u0331\u0003\u0002\u0002\u0002",
    "\u0334\u0335\u0007F\u0002\u0002\u0335\u0336\u0005$\u0013\u0002\u0336",
    "\u00c9\u0003\u0002\u0002\u0002\u0337\u033b\u0005\u00fe\u0080\u0002\u0338",
    "\u033b\u0005\u0100\u0081\u0002\u0339\u033b\u0005\u0102\u0082\u0002\u033a",
    "\u0337\u0003\u0002\u0002\u0002\u033a\u0338\u0003\u0002\u0002\u0002\u033a",
    "\u0339\u0003\u0002\u0002\u0002\u033b\u00cb\u0003\u0002\u0002\u0002\u033c",
    "\u033f\u0005\u00ceh\u0002\u033d\u033f\u0005\u00d0i\u0002\u033e\u033c",
    "\u0003\u0002\u0002\u0002\u033e\u033d\u0003\u0002\u0002\u0002\u033f\u00cd",
    "\u0003\u0002\u0002\u0002\u0340\u0343\u00056\u001c\u0002\u0341\u0343",
    "\u00058\u001d\u0002\u0342\u0340\u0003\u0002\u0002\u0002\u0342\u0341",
    "\u0003\u0002\u0002\u0002\u0343\u00cf\u0003\u0002\u0002\u0002\u0344\u0345",
    "\u0005\u00d2j\u0002\u0345\u00d1\u0003\u0002\u0002\u0002\u0346\u0349",
    "\u0005\u00d4k\u0002\u0347\u0349\u0005<\u001f\u0002\u0348\u0346\u0003",
    "\u0002\u0002\u0002\u0348\u0347\u0003\u0002\u0002\u0002\u0349\u034b\u0003",
    "\u0002\u0002\u0002\u034a\u034c\t\b\u0002\u0002\u034b\u034a\u0003\u0002",
    "\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002\u034c\u00d3\u0003\u0002",
    "\u0002\u0002\u034d\u0350\t\t\u0002\u0002\u034e\u0350\u0007=\u0002\u0002",
    "\u034f\u034d\u0003\u0002\u0002\u0002\u034f\u034e\u0003\u0002\u0002\u0002",
    "\u0350\u00d5\u0003\u0002\u0002\u0002\u0351\u0355\u0005\u00d8m\u0002",
    "\u0352\u0355\u0005\u00dan\u0002\u0353\u0355\u0005\u00dco\u0002\u0354",
    "\u0351\u0003\u0002\u0002\u0002\u0354\u0352\u0003\u0002\u0002\u0002\u0354",
    "\u0353\u0003\u0002\u0002\u0002\u0355\u0357\u0003\u0002\u0002\u0002\u0356",
    "\u0358\u0005\u00f0y\u0002\u0357\u0356\u0003\u0002\u0002\u0002\u0357",
    "\u0358\u0003\u0002\u0002\u0002\u0358\u00d7\u0003\u0002\u0002\u0002\u0359",
    "\u035a\u0007J\u0002\u0002\u035a\u00d9\u0003\u0002\u0002\u0002\u035b",
    "\u035c\u0005\u00d4k\u0002\u035c\u00db\u0003\u0002\u0002\u0002\u035d",
    "\u035f\u0007@\u0002\u0002\u035e\u0360\u0005\u00dep\u0002\u035f\u035e",
    "\u0003\u0002\u0002\u0002\u035f\u0360\u0003\u0002\u0002\u0002\u0360\u0361",
    "\u0003\u0002\u0002\u0002\u0361\u0362\u0007C\u0002\u0002\u0362\u00dd",
    "\u0003\u0002\u0002\u0002\u0363\u0368\u0005\u00e0q\u0002\u0364\u0365",
    "\u0007E\u0002\u0002\u0365\u0367\u0005\u00e0q\u0002\u0366\u0364\u0003",
    "\u0002\u0002\u0002\u0367\u036a\u0003\u0002\u0002\u0002\u0368\u0366\u0003",
    "\u0002\u0002\u0002\u0368\u0369\u0003\u0002\u0002\u0002\u0369\u00df\u0003",
    "\u0002\u0002\u0002\u036a\u0368\u0003\u0002\u0002\u0002\u036b\u036c\u0005",
    "\u00d4k\u0002\u036c\u036d\u0007F\u0002\u0002\u036d\u036f\u0003\u0002",
    "\u0002\u0002\u036e\u036b\u0003\u0002\u0002\u0002\u036e\u036f\u0003\u0002",
    "\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0371\u0005\u00d6",
    "l\u0002\u0371\u00e1\u0003\u0002\u0002\u0002\u0372\u0377\u0005\u00e4",
    "s\u0002\u0373\u0374\u0007E\u0002\u0002\u0374\u0376\u0005\u00e4s\u0002",
    "\u0375\u0373\u0003\u0002\u0002\u0002\u0376\u0379\u0003\u0002\u0002\u0002",
    "\u0377\u0375\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002\u0002\u0002",
    "\u0378\u00e3\u0003\u0002\u0002\u0002\u0379\u0377\u0003\u0002\u0002\u0002",
    "\u037a\u037c\u0005\u00d6l\u0002\u037b\u037d\u0005\u00e6t\u0002\u037c",
    "\u037b\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002\u0002\u037d",
    "\u00e5\u0003\u0002\u0002\u0002\u037e\u037f\u0007M\u0002\u0002\u037f",
    "\u0380\u0005,\u0017\u0002\u0380\u00e7\u0003\u0002\u0002\u0002\u0381",
    "\u038b\u0005\u00eav\u0002\u0382\u038b\u0005\u00ecw\u0002\u0383\u038b",
    "\u0005\u00eex\u0002\u0384\u038b\u0005\u00f2z\u0002\u0385\u038b\u0005",
    "\u00fa~\u0002\u0386\u0387\u0007@\u0002\u0002\u0387\u0388\u0005\u00e8",
    "u\u0002\u0388\u0389\u0007C\u0002\u0002\u0389\u038b\u0003\u0002\u0002",
    "\u0002\u038a\u0381\u0003\u0002\u0002\u0002\u038a\u0382\u0003\u0002\u0002",
    "\u0002\u038a\u0383\u0003\u0002\u0002\u0002\u038a\u0384\u0003\u0002\u0002",
    "\u0002\u038a\u0385\u0003\u0002\u0002\u0002\u038a\u0386\u0003\u0002\u0002",
    "\u0002\u038b\u00e9\u0003\u0002\u0002\u0002\u038c\u038d\u0005\u00b4[",
    "\u0002\u038d\u038e\u0005^0\u0002\u038e\u038f\u0005\u00e8u\u0002\u038f",
    "\u00eb\u0003\u0002\u0002\u0002\u0390\u0391\u0007A\u0002\u0002\u0391",
    "\u0392\u0005\u00e8u\u0002\u0392\u0393\u0007D\u0002\u0002\u0393\u00ed",
    "\u0003\u0002\u0002\u0002\u0394\u0396\u0007\u000f\u0002\u0002\u0395\u0394",
    "\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002\u0002\u0396\u0397",
    "\u0003\u0002\u0002\u0002\u0397\u0398\u0007?\u0002\u0002\u0398\u0399",
    "\u0005\u00e8u\u0002\u0399\u03a0\u0005\u00f0y\u0002\u039a\u039b\u0007",
    "E\u0002\u0002\u039b\u039c\u0005\u00e8u\u0002\u039c\u039d\u0005\u00f0",
    "y\u0002\u039d\u039f\u0003\u0002\u0002\u0002\u039e\u039a\u0003\u0002",
    "\u0002\u0002\u039f\u03a2\u0003\u0002\u0002\u0002\u03a0\u039e\u0003\u0002",
    "\u0002\u0002\u03a0\u03a1\u0003\u0002\u0002\u0002\u03a1\u03a3\u0003\u0002",
    "\u0002\u0002\u03a2\u03a0\u0003\u0002\u0002\u0002\u03a3\u03a4\u0007B",
    "\u0002\u0002\u03a4\u00ef\u0003\u0002\u0002\u0002\u03a5\u03a6\u0007F",
    "\u0002\u0002\u03a6\u03a7\u0005\u00e8u\u0002\u03a7\u00f1\u0003\u0002",
    "\u0002\u0002\u03a8\u03aa\t\n\u0002\u0002\u03a9\u03a8\u0003\u0002\u0002",
    "\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002",
    "\u0002\u03ab\u03ad\u0005\u00f4{\u0002\u03ac\u03ae\u0007\u000e\u0002",
    "\u0002\u03ad\u03ac\u0003\u0002\u0002\u0002\u03ad\u03ae\u0003\u0002\u0002",
    "\u0002\u03ae\u03b0\u0003\u0002\u0002\u0002\u03af\u03b1\u0005\n\u0006",
    "\u0002\u03b0\u03af\u0003\u0002\u0002\u0002\u03b0\u03b1\u0003\u0002\u0002",
    "\u0002\u03b1\u03b4\u0003\u0002\u0002\u0002\u03b2\u03b3\u0007>\u0002",
    "\u0002\u03b3\u03b5\u0005\u00f2z\u0002\u03b4\u03b2\u0003\u0002\u0002",
    "\u0002\u03b4\u03b5\u0003\u0002\u0002\u0002\u03b5\u00f3\u0003\u0002\u0002",
    "\u0002\u03b6\u03bd\u0007\b\u0002\u0002\u03b7\u03bd\u0007\n\u0002\u0002",
    "\u03b8\u03bd\u0007\u000b\u0002\u0002\u03b9\u03bd\u0007\f\u0002\u0002",
    "\u03ba\u03bd\u0007\r\u0002\u0002\u03bb\u03bd\u0005\u00d4k\u0002\u03bc",
    "\u03b6\u0003\u0002\u0002\u0002\u03bc\u03b7\u0003\u0002\u0002\u0002\u03bc",
    "\u03b8\u0003\u0002\u0002\u0002\u03bc\u03b9\u0003\u0002\u0002\u0002\u03bc",
    "\u03ba\u0003\u0002\u0002\u0002\u03bc\u03bb\u0003\u0002\u0002\u0002\u03bd",
    "\u00f5\u0003\u0002\u0002\u0002\u03be\u03bf\u0005\u00d4k\u0002\u03bf",
    "\u00f7\u0003\u0002\u0002\u0002\u03c0\u03c1\u0007F\u0002\u0002\u03c1",
    "\u03c6\u0005\u00e8u\u0002\u03c2\u03c3\u0007E\u0002\u0002\u03c3\u03c5",
    "\u0005\u00e8u\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002\u03c5\u03c8",
    "\u0003\u0002\u0002\u0002\u03c6\u03c4\u0003\u0002\u0002\u0002\u03c6\u03c7",
    "\u0003\u0002\u0002\u0002\u03c7\u00f9\u0003\u0002\u0002\u0002\u03c8\u03c6",
    "\u0003\u0002\u0002\u0002\u03c9\u03ca\u00073\u0002\u0002\u03ca\u00fb",
    "\u0003\u0002\u0002\u0002\u03cb\u03cc\u0005\u00d4k\u0002\u03cc\u00fd",
    "\u0003\u0002\u0002\u0002\u03cd\u03cf\u0007\u0018\u0002\u0002\u03ce\u03d0",
    "\u0005\u00fc\u007f\u0002\u03cf\u03ce\u0003\u0002\u0002\u0002\u03cf\u03d0",
    "\u0003\u0002\u0002\u0002\u03d0\u00ff\u0003\u0002\u0002\u0002\u03d1\u03d3",
    "\u0007\u001a\u0002\u0002\u03d2\u03d4\u0005\u00fc\u007f\u0002\u03d3\u03d2",
    "\u0003\u0002\u0002\u0002\u03d3\u03d4\u0003\u0002\u0002\u0002\u03d4\u0101",
    "\u0003\u0002\u0002\u0002\u03d5\u03d7\u0007,\u0002\u0002\u03d6\u03d8",
    "\u0005,\u0017\u0002\u03d7\u03d6\u0003\u0002\u0002\u0002\u03d7\u03d8",
    "\u0003\u0002\u0002\u0002\u03d8\u0103\u0003\u0002\u0002\u0002\u03d9\u03da",
    "\u0007-\u0002\u0002\u03da\u03db\u0005,\u0017\u0002\u03db\u0105\u0003",
    "\u0002\u0002\u0002\u03dc\u03de\u0005\u0108\u0085\u0002\u03dd\u03df\u0005",
    "\u0004\u0003\u0002\u03de\u03dd\u0003\u0002\u0002\u0002\u03de\u03df\u0003",
    "\u0002\u0002\u0002\u03df\u03e0\u0003\u0002\u0002\u0002\u03e0\u03e1\u0005",
    "\u0010\t\u0002\u03e1\u03e2\u0005\u010a\u0086\u0002\u03e2\u0107\u0003",
    "\u0002\u0002\u0002\u03e3\u03e4\u0007.\u0002\u0002\u03e4\u0109\u0003",
    "\u0002\u0002\u0002\u03e5\u03e6\u0005\u00a8U\u0002\u03e6\u010b\u0003",
    "\u0002\u0002\u0002\u03e7\u03ec\u0005\u00f2z\u0002\u03e8\u03e9\u0007",
    "\u0010\u0002\u0002\u03e9\u03eb\u0005\u00f2z\u0002\u03ea\u03e8\u0003",
    "\u0002\u0002\u0002\u03eb\u03ee\u0003\u0002\u0002\u0002\u03ec\u03ea\u0003",
    "\u0002\u0002\u0002\u03ec\u03ed\u0003\u0002\u0002\u0002\u03ed\u03f0\u0003",
    "\u0002\u0002\u0002\u03ee\u03ec\u0003\u0002\u0002\u0002\u03ef\u03f1\u0005",
    "\u010e\u0088\u0002\u03f0\u03ef\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003",
    "\u0002\u0002\u0002\u03f1\u010d\u0003\u0002\u0002\u0002\u03f2\u03f3\u0007",
    "\u0010\u0002\u0002\u03f3\u010f\u0003\u0002\u0002\u0002k\u0111\u011e",
    "\u0123\u012e\u0135\u013e\u0143\u0146\u0150\u0153\u0157\u015a\u0165\u016b",
    "\u0172\u0175\u017b\u0183\u0187\u018f\u0191\u019b\u019d\u01a1\u01aa\u01ae",
    "\u01b8\u01c1\u01c3\u01ca\u01cc\u01d1\u01d7\u01de\u01e2\u01eb\u01ef\u01f6",
    "\u01ff\u0203\u0213\u023d\u0242\u0246\u024a\u0250\u0256\u025c\u0269\u026e",
    "\u028e\u0296\u029a\u02a1\u02a4\u02ba\u02ca\u02cf\u02d3\u02d8\u02de\u02e2",
    "\u02eb\u02ed\u02f6\u02fd\u0302\u0308\u030f\u0312\u0317\u031b\u0320\u0324",
    "\u0328\u032d\u0331\u033a\u033e\u0342\u0348\u034b\u034f\u0354\u0357\u035f",
    "\u0368\u036e\u0377\u037c\u038a\u0395\u03a0\u03a9\u03ad\u03b0\u03b4\u03bc",
    "\u03c6\u03cf\u03d3\u03d7\u03de\u03ec\u03f0"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, "'contract'", "'event'", "'interface'", 
                     "'resource'", "'String'", "'UInt8'", "'UInt64'", "'Address'", 
                     "'Type'", "'AnyStruct'", "'?'", "'@'", "'&'", "'prepare'", 
                     "'pre'", "'execute'", "'post'", "'transaction'", null, 
                     "'as'", "'break'", "'case'", "'continue'", "'default'", 
                     "'else'", "'enum'", "'for'", "'fun'", "'in'", "'if'", 
                     "'import'", "'private'", "'pub'", "'while'", "'let'", 
                     "'var'", "'get'", "'set'", "'switch'", "'struct'", 
                     "'return'", "'throw'", "'init'", "'static'", "'is'", 
                     "'try'", "'super'", "'Any'", "'false'", "'true'", "'nil'", 
                     "'self'", "'file'", "'line'", "'#error'", "'#warning'", 
                     "'#available'", null, "'.'", "'{'", "'('", "'['", "'}'", 
                     "')'", "']'", "','", "':'", "';'", "'<'", "'>'", "'_'", 
                     "'!'", "'-'", "'='", "'<-'", "'<-!'", "'<->'", "'|'", 
                     "'/'", "'+'", "'*'", "'%'", "'^'", "'~'", "'#'", "'`'", 
                     "'$'", "'\\'" ];

var symbolicNames = [ null, "ACCESS", "CONTRACT", "EVENT", "INTERFACE", 
                      "RESOURCE", "STRING_TYPE", "UINT8_TYPE", "UINT64_TYPE", 
                      "ADDRESS", "TYPE", "ANY_STRUCT", "QUESTION", "AT", 
                      "AND", "PREPARE", "PRE", "EXECUTE", "POST", "TRANSACTION", 
                      "WS", "AS", "BREAK", "CASE", "CONTINUE", "DEFAULT", 
                      "ELSE", "ENUM", "FOR", "FUNC", "IN", "IF", "IMPORT", 
                      "PRIVATE", "PUBLIC", "WHILE", "LET", "VAR", "GET", 
                      "SET", "SWITCH", "STRUCT", "RETURN", "THROW", "INIT", 
                      "STATIC", "IS", "TRY", "SUPER", "ANY", "FALSE", "TRUE", 
                      "NIL", "SELF", "FILE", "LINE", "ERROR", "WARNING", 
                      "AVAILABLE", "Identifier", "DOT", "LCURLY", "LPAREN", 
                      "LBRACK", "RCURLY", "RPAREN", "RBRACK", "COMMA", "COLON", 
                      "SEMI", "LT", "GT", "UNDERSCORE", "BANG", "SUB", "EQUAL", 
                      "MOVE", "FORCE_MOVE", "SWAP", "OR", "DIV", "ADD", 
                      "MUL", "MOD", "CARET", "TILDE", "HASH", "BACKTICK", 
                      "DOLLAR", "BACKSLASH", "Operator_head_other", "Operator_following_character", 
                      "Binary_literal", "Octal_literal", "Decimal_digits", 
                      "Decimal_literal", "Hexadecimal_literal", "Floating_point_literal", 
                      "HASHBANG", "Line_comment", "Block_comment", "Multi_line_extended_string_open", 
                      "Single_line_extended_string_open", "Multi_line_string_open", 
                      "Single_line_string_open", "Interpolataion_single_line", 
                      "Single_line_string_close", "Quoted_single_line_text", 
                      "Interpolataion_multi_line", "Multi_line_string_close", 
                      "Quoted_multi_line_text", "Single_line_extended_string_close", 
                      "Quoted_single_line_extended_text", "Multi_line_extended_string_close", 
                      "Quoted_multi_line_extended_text" ];

var ruleNames =  [ "top_level", "generic_parameter_clause", "generic_parameter_list", 
                   "generic_parameter", "generic_argument_clause", "generic_argument_list", 
                   "generic_argument", "parameter_clause", "parameter_list", 
                   "parameter", "parameter_name", "negate_prefix_operator", 
                   "literal", "numeric_literal", "boolean_literal", "nil_literal", 
                   "integer_literal", "string_literal", "extended_string_literal", 
                   "static_string_literal", "interpolated_string_literal", 
                   "expression", "expression_list", "prefix_expression", 
                   "postfix_expression", "primary_expression", "self_expression", 
                   "object_expression", "object_access", "literal_expression", 
                   "array_literal", "array_literal_items", "array_literal_item", 
                   "dictionary_literal", "dictionary_literal_items", "dictionary_literal_item", 
                   "assignment_operator", "compilation_condition", "compilation_condition_AND", 
                   "compilation_condition_OR", "compilation_condition_NOT", 
                   "compilation_condition_ET", "compilation_condition_GE", 
                   "compilation_condition_LE", "compilation_condition_G", 
                   "compilation_condition_L", "arrow_operator", "range_operator", 
                   "same_type_equals", "binary_operator", "prefix_operator", 
                   "postfix_operator", "operator", "operator_head", "operator_character", 
                   "operator_characters", "dot_operator_head", "dot_operator_character", 
                   "dot_operator_characters", "declaration", "contract_declaration", 
                   "resource_interface_declaration", "resource_implementation_declaration", 
                   "resource_implementation_definition", "struct_interface_declaration", 
                   "struct_implementation_declaration", "constant_declaration", 
                   "function_declaration", "phase_declaration", "pre_phase_head", 
                   "execute_phase_head", "post_phase_head", "transaction_phase_head", 
                   "prepare_phase_head", "variable_declaration", "variable_declaration_head", 
                   "variable_body", "event_declaration", "event_declaration_head", 
                   "event_body", "declaration_modifier", "declaration_modifiers", 
                   "declarations", "code_block", "function_head", "function_name", 
                   "function_signature", "function_result", "function_body", 
                   "function_type_argument_clause", "function_type_argument_list", 
                   "function_type_argument", "argument_label", "access_level_modifier", 
                   "statement", "statements", "assignment_statement", "check_statement", 
                   "check_statement_conditions", "check_statement_message", 
                   "control_transfer_statement", "variable", "resource_variable", 
                   "local_variable", "variable_name", "identifier", "pattern", 
                   "wildcard_pattern", "identifier_pattern", "tuple_pattern", 
                   "tuple_pattern_element_list", "tuple_pattern_element", 
                   "pattern_initializer_list", "pattern_initializer", "initializer", 
                   "type", "function_type", "array_type", "dictionary_type", 
                   "type_annotation", "type_identifier", "type_name", "type_name_alias", 
                   "composite_types", "any_type", "label_name", "break_statement", 
                   "continue_statement", "return_statement", "throw_statement", 
                   "initializer_declaration", "initializer_head", "initializer_body", 
                   "protocol_composition_type", "trailing_composition_and" ];

function CadenceParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CadenceParser.prototype = Object.create(antlr4.Parser.prototype);
CadenceParser.prototype.constructor = CadenceParser;

Object.defineProperty(CadenceParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CadenceParser.EOF = antlr4.Token.EOF;
CadenceParser.ACCESS = 1;
CadenceParser.CONTRACT = 2;
CadenceParser.EVENT = 3;
CadenceParser.INTERFACE = 4;
CadenceParser.RESOURCE = 5;
CadenceParser.STRING_TYPE = 6;
CadenceParser.UINT8_TYPE = 7;
CadenceParser.UINT64_TYPE = 8;
CadenceParser.ADDRESS = 9;
CadenceParser.TYPE = 10;
CadenceParser.ANY_STRUCT = 11;
CadenceParser.QUESTION = 12;
CadenceParser.AT = 13;
CadenceParser.AND = 14;
CadenceParser.PREPARE = 15;
CadenceParser.PRE = 16;
CadenceParser.EXECUTE = 17;
CadenceParser.POST = 18;
CadenceParser.TRANSACTION = 19;
CadenceParser.WS = 20;
CadenceParser.AS = 21;
CadenceParser.BREAK = 22;
CadenceParser.CASE = 23;
CadenceParser.CONTINUE = 24;
CadenceParser.DEFAULT = 25;
CadenceParser.ELSE = 26;
CadenceParser.ENUM = 27;
CadenceParser.FOR = 28;
CadenceParser.FUNC = 29;
CadenceParser.IN = 30;
CadenceParser.IF = 31;
CadenceParser.IMPORT = 32;
CadenceParser.PRIVATE = 33;
CadenceParser.PUBLIC = 34;
CadenceParser.WHILE = 35;
CadenceParser.LET = 36;
CadenceParser.VAR = 37;
CadenceParser.GET = 38;
CadenceParser.SET = 39;
CadenceParser.SWITCH = 40;
CadenceParser.STRUCT = 41;
CadenceParser.RETURN = 42;
CadenceParser.THROW = 43;
CadenceParser.INIT = 44;
CadenceParser.STATIC = 45;
CadenceParser.IS = 46;
CadenceParser.TRY = 47;
CadenceParser.SUPER = 48;
CadenceParser.ANY = 49;
CadenceParser.FALSE = 50;
CadenceParser.TRUE = 51;
CadenceParser.NIL = 52;
CadenceParser.SELF = 53;
CadenceParser.FILE = 54;
CadenceParser.LINE = 55;
CadenceParser.ERROR = 56;
CadenceParser.WARNING = 57;
CadenceParser.AVAILABLE = 58;
CadenceParser.Identifier = 59;
CadenceParser.DOT = 60;
CadenceParser.LCURLY = 61;
CadenceParser.LPAREN = 62;
CadenceParser.LBRACK = 63;
CadenceParser.RCURLY = 64;
CadenceParser.RPAREN = 65;
CadenceParser.RBRACK = 66;
CadenceParser.COMMA = 67;
CadenceParser.COLON = 68;
CadenceParser.SEMI = 69;
CadenceParser.LT = 70;
CadenceParser.GT = 71;
CadenceParser.UNDERSCORE = 72;
CadenceParser.BANG = 73;
CadenceParser.SUB = 74;
CadenceParser.EQUAL = 75;
CadenceParser.MOVE = 76;
CadenceParser.FORCE_MOVE = 77;
CadenceParser.SWAP = 78;
CadenceParser.OR = 79;
CadenceParser.DIV = 80;
CadenceParser.ADD = 81;
CadenceParser.MUL = 82;
CadenceParser.MOD = 83;
CadenceParser.CARET = 84;
CadenceParser.TILDE = 85;
CadenceParser.HASH = 86;
CadenceParser.BACKTICK = 87;
CadenceParser.DOLLAR = 88;
CadenceParser.BACKSLASH = 89;
CadenceParser.Operator_head_other = 90;
CadenceParser.Operator_following_character = 91;
CadenceParser.Binary_literal = 92;
CadenceParser.Octal_literal = 93;
CadenceParser.Decimal_digits = 94;
CadenceParser.Decimal_literal = 95;
CadenceParser.Hexadecimal_literal = 96;
CadenceParser.Floating_point_literal = 97;
CadenceParser.HASHBANG = 98;
CadenceParser.Line_comment = 99;
CadenceParser.Block_comment = 100;
CadenceParser.Multi_line_extended_string_open = 101;
CadenceParser.Single_line_extended_string_open = 102;
CadenceParser.Multi_line_string_open = 103;
CadenceParser.Single_line_string_open = 104;
CadenceParser.Interpolataion_single_line = 105;
CadenceParser.Single_line_string_close = 106;
CadenceParser.Quoted_single_line_text = 107;
CadenceParser.Interpolataion_multi_line = 108;
CadenceParser.Multi_line_string_close = 109;
CadenceParser.Quoted_multi_line_text = 110;
CadenceParser.Single_line_extended_string_close = 111;
CadenceParser.Quoted_single_line_extended_text = 112;
CadenceParser.Multi_line_extended_string_close = 113;
CadenceParser.Quoted_multi_line_extended_text = 114;

CadenceParser.RULE_top_level = 0;
CadenceParser.RULE_generic_parameter_clause = 1;
CadenceParser.RULE_generic_parameter_list = 2;
CadenceParser.RULE_generic_parameter = 3;
CadenceParser.RULE_generic_argument_clause = 4;
CadenceParser.RULE_generic_argument_list = 5;
CadenceParser.RULE_generic_argument = 6;
CadenceParser.RULE_parameter_clause = 7;
CadenceParser.RULE_parameter_list = 8;
CadenceParser.RULE_parameter = 9;
CadenceParser.RULE_parameter_name = 10;
CadenceParser.RULE_negate_prefix_operator = 11;
CadenceParser.RULE_literal = 12;
CadenceParser.RULE_numeric_literal = 13;
CadenceParser.RULE_boolean_literal = 14;
CadenceParser.RULE_nil_literal = 15;
CadenceParser.RULE_integer_literal = 16;
CadenceParser.RULE_string_literal = 17;
CadenceParser.RULE_extended_string_literal = 18;
CadenceParser.RULE_static_string_literal = 19;
CadenceParser.RULE_interpolated_string_literal = 20;
CadenceParser.RULE_expression = 21;
CadenceParser.RULE_expression_list = 22;
CadenceParser.RULE_prefix_expression = 23;
CadenceParser.RULE_postfix_expression = 24;
CadenceParser.RULE_primary_expression = 25;
CadenceParser.RULE_self_expression = 26;
CadenceParser.RULE_object_expression = 27;
CadenceParser.RULE_object_access = 28;
CadenceParser.RULE_literal_expression = 29;
CadenceParser.RULE_array_literal = 30;
CadenceParser.RULE_array_literal_items = 31;
CadenceParser.RULE_array_literal_item = 32;
CadenceParser.RULE_dictionary_literal = 33;
CadenceParser.RULE_dictionary_literal_items = 34;
CadenceParser.RULE_dictionary_literal_item = 35;
CadenceParser.RULE_assignment_operator = 36;
CadenceParser.RULE_compilation_condition = 37;
CadenceParser.RULE_compilation_condition_AND = 38;
CadenceParser.RULE_compilation_condition_OR = 39;
CadenceParser.RULE_compilation_condition_NOT = 40;
CadenceParser.RULE_compilation_condition_ET = 41;
CadenceParser.RULE_compilation_condition_GE = 42;
CadenceParser.RULE_compilation_condition_LE = 43;
CadenceParser.RULE_compilation_condition_G = 44;
CadenceParser.RULE_compilation_condition_L = 45;
CadenceParser.RULE_arrow_operator = 46;
CadenceParser.RULE_range_operator = 47;
CadenceParser.RULE_same_type_equals = 48;
CadenceParser.RULE_binary_operator = 49;
CadenceParser.RULE_prefix_operator = 50;
CadenceParser.RULE_postfix_operator = 51;
CadenceParser.RULE_operator = 52;
CadenceParser.RULE_operator_head = 53;
CadenceParser.RULE_operator_character = 54;
CadenceParser.RULE_operator_characters = 55;
CadenceParser.RULE_dot_operator_head = 56;
CadenceParser.RULE_dot_operator_character = 57;
CadenceParser.RULE_dot_operator_characters = 58;
CadenceParser.RULE_declaration = 59;
CadenceParser.RULE_contract_declaration = 60;
CadenceParser.RULE_resource_interface_declaration = 61;
CadenceParser.RULE_resource_implementation_declaration = 62;
CadenceParser.RULE_resource_implementation_definition = 63;
CadenceParser.RULE_struct_interface_declaration = 64;
CadenceParser.RULE_struct_implementation_declaration = 65;
CadenceParser.RULE_constant_declaration = 66;
CadenceParser.RULE_function_declaration = 67;
CadenceParser.RULE_phase_declaration = 68;
CadenceParser.RULE_pre_phase_head = 69;
CadenceParser.RULE_execute_phase_head = 70;
CadenceParser.RULE_post_phase_head = 71;
CadenceParser.RULE_transaction_phase_head = 72;
CadenceParser.RULE_prepare_phase_head = 73;
CadenceParser.RULE_variable_declaration = 74;
CadenceParser.RULE_variable_declaration_head = 75;
CadenceParser.RULE_variable_body = 76;
CadenceParser.RULE_event_declaration = 77;
CadenceParser.RULE_event_declaration_head = 78;
CadenceParser.RULE_event_body = 79;
CadenceParser.RULE_declaration_modifier = 80;
CadenceParser.RULE_declaration_modifiers = 81;
CadenceParser.RULE_declarations = 82;
CadenceParser.RULE_code_block = 83;
CadenceParser.RULE_function_head = 84;
CadenceParser.RULE_function_name = 85;
CadenceParser.RULE_function_signature = 86;
CadenceParser.RULE_function_result = 87;
CadenceParser.RULE_function_body = 88;
CadenceParser.RULE_function_type_argument_clause = 89;
CadenceParser.RULE_function_type_argument_list = 90;
CadenceParser.RULE_function_type_argument = 91;
CadenceParser.RULE_argument_label = 92;
CadenceParser.RULE_access_level_modifier = 93;
CadenceParser.RULE_statement = 94;
CadenceParser.RULE_statements = 95;
CadenceParser.RULE_assignment_statement = 96;
CadenceParser.RULE_check_statement = 97;
CadenceParser.RULE_check_statement_conditions = 98;
CadenceParser.RULE_check_statement_message = 99;
CadenceParser.RULE_control_transfer_statement = 100;
CadenceParser.RULE_variable = 101;
CadenceParser.RULE_resource_variable = 102;
CadenceParser.RULE_local_variable = 103;
CadenceParser.RULE_variable_name = 104;
CadenceParser.RULE_identifier = 105;
CadenceParser.RULE_pattern = 106;
CadenceParser.RULE_wildcard_pattern = 107;
CadenceParser.RULE_identifier_pattern = 108;
CadenceParser.RULE_tuple_pattern = 109;
CadenceParser.RULE_tuple_pattern_element_list = 110;
CadenceParser.RULE_tuple_pattern_element = 111;
CadenceParser.RULE_pattern_initializer_list = 112;
CadenceParser.RULE_pattern_initializer = 113;
CadenceParser.RULE_initializer = 114;
CadenceParser.RULE_type = 115;
CadenceParser.RULE_function_type = 116;
CadenceParser.RULE_array_type = 117;
CadenceParser.RULE_dictionary_type = 118;
CadenceParser.RULE_type_annotation = 119;
CadenceParser.RULE_type_identifier = 120;
CadenceParser.RULE_type_name = 121;
CadenceParser.RULE_type_name_alias = 122;
CadenceParser.RULE_composite_types = 123;
CadenceParser.RULE_any_type = 124;
CadenceParser.RULE_label_name = 125;
CadenceParser.RULE_break_statement = 126;
CadenceParser.RULE_continue_statement = 127;
CadenceParser.RULE_return_statement = 128;
CadenceParser.RULE_throw_statement = 129;
CadenceParser.RULE_initializer_declaration = 130;
CadenceParser.RULE_initializer_head = 131;
CadenceParser.RULE_initializer_body = 132;
CadenceParser.RULE_protocol_composition_type = 133;
CadenceParser.RULE_trailing_composition_and = 134;


function Top_levelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_top_level;
    return this;
}

Top_levelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Top_levelContext.prototype.constructor = Top_levelContext;

Top_levelContext.prototype.EOF = function() {
    return this.getToken(CadenceParser.EOF, 0);
};

Top_levelContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

Top_levelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTop_level(this);
	}
};

Top_levelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTop_level(this);
	}
};




CadenceParser.Top_levelContext = Top_levelContext;

CadenceParser.prototype.top_level = function() {

    var localctx = new Top_levelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CadenceParser.RULE_top_level);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.QUESTION) | (1 << CadenceParser.AT) | (1 << CadenceParser.AND) | (1 << CadenceParser.PREPARE) | (1 << CadenceParser.PRE) | (1 << CadenceParser.EXECUTE) | (1 << CadenceParser.POST) | (1 << CadenceParser.TRANSACTION) | (1 << CadenceParser.AS) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CadenceParser.PRIVATE - 33)) | (1 << (CadenceParser.PUBLIC - 33)) | (1 << (CadenceParser.WHILE - 33)) | (1 << (CadenceParser.LET - 33)) | (1 << (CadenceParser.GET - 33)) | (1 << (CadenceParser.SET - 33)) | (1 << (CadenceParser.RETURN - 33)) | (1 << (CadenceParser.INIT - 33)) | (1 << (CadenceParser.FALSE - 33)) | (1 << (CadenceParser.TRUE - 33)) | (1 << (CadenceParser.NIL - 33)) | (1 << (CadenceParser.SELF - 33)) | (1 << (CadenceParser.FILE - 33)) | (1 << (CadenceParser.LINE - 33)) | (1 << (CadenceParser.Identifier - 33)) | (1 << (CadenceParser.DOT - 33)) | (1 << (CadenceParser.LCURLY - 33)) | (1 << (CadenceParser.LBRACK - 33)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (CadenceParser.LT - 70)) | (1 << (CadenceParser.GT - 70)) | (1 << (CadenceParser.BANG - 70)) | (1 << (CadenceParser.SUB - 70)) | (1 << (CadenceParser.EQUAL - 70)) | (1 << (CadenceParser.OR - 70)) | (1 << (CadenceParser.DIV - 70)) | (1 << (CadenceParser.ADD - 70)) | (1 << (CadenceParser.MUL - 70)) | (1 << (CadenceParser.MOD - 70)) | (1 << (CadenceParser.CARET - 70)) | (1 << (CadenceParser.TILDE - 70)) | (1 << (CadenceParser.Operator_head_other - 70)) | (1 << (CadenceParser.Binary_literal - 70)) | (1 << (CadenceParser.Octal_literal - 70)) | (1 << (CadenceParser.Decimal_digits - 70)) | (1 << (CadenceParser.Decimal_literal - 70)) | (1 << (CadenceParser.Hexadecimal_literal - 70)) | (1 << (CadenceParser.Floating_point_literal - 70)) | (1 << (CadenceParser.Multi_line_extended_string_open - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (CadenceParser.Single_line_extended_string_open - 102)) | (1 << (CadenceParser.Multi_line_string_open - 102)) | (1 << (CadenceParser.Single_line_string_open - 102)))) !== 0)) {
            this.state = 270;
            this.statements();
        }

        this.state = 273;
        this.match(CadenceParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_parameter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_parameter_clause;
    return this;
}

Generic_parameter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_parameter_clauseContext.prototype.constructor = Generic_parameter_clauseContext;

Generic_parameter_clauseContext.prototype.LT = function() {
    return this.getToken(CadenceParser.LT, 0);
};

Generic_parameter_clauseContext.prototype.generic_parameter_list = function() {
    return this.getTypedRuleContext(Generic_parameter_listContext,0);
};

Generic_parameter_clauseContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Generic_parameter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_parameter_clause(this);
	}
};

Generic_parameter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_parameter_clause(this);
	}
};




CadenceParser.Generic_parameter_clauseContext = Generic_parameter_clauseContext;

CadenceParser.prototype.generic_parameter_clause = function() {

    var localctx = new Generic_parameter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CadenceParser.RULE_generic_parameter_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 275;
        this.match(CadenceParser.LT);
        this.state = 276;
        this.generic_parameter_list();
        this.state = 277;
        this.match(CadenceParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_parameter_list;
    return this;
}

Generic_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_parameter_listContext.prototype.constructor = Generic_parameter_listContext;

Generic_parameter_listContext.prototype.generic_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Generic_parameterContext);
    } else {
        return this.getTypedRuleContext(Generic_parameterContext,i);
    }
};

Generic_parameter_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Generic_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_parameter_list(this);
	}
};

Generic_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_parameter_list(this);
	}
};




CadenceParser.Generic_parameter_listContext = Generic_parameter_listContext;

CadenceParser.prototype.generic_parameter_list = function() {

    var localctx = new Generic_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CadenceParser.RULE_generic_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 279;
        this.generic_parameter();
        this.state = 284;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 280;
            this.match(CadenceParser.COMMA);
            this.state = 281;
            this.generic_parameter();
            this.state = 286;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_parameter;
    return this;
}

Generic_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_parameterContext.prototype.constructor = Generic_parameterContext;

Generic_parameterContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Generic_parameterContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

Generic_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_parameter(this);
	}
};

Generic_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_parameter(this);
	}
};




CadenceParser.Generic_parameterContext = Generic_parameterContext;

CadenceParser.prototype.generic_parameter = function() {

    var localctx = new Generic_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CadenceParser.RULE_generic_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        this.type_name();
        this.state = 289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 288;
            this.type_annotation();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_argument_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_argument_clause;
    return this;
}

Generic_argument_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_argument_clauseContext.prototype.constructor = Generic_argument_clauseContext;

Generic_argument_clauseContext.prototype.LT = function() {
    return this.getToken(CadenceParser.LT, 0);
};

Generic_argument_clauseContext.prototype.generic_argument_list = function() {
    return this.getTypedRuleContext(Generic_argument_listContext,0);
};

Generic_argument_clauseContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Generic_argument_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_argument_clause(this);
	}
};

Generic_argument_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_argument_clause(this);
	}
};




CadenceParser.Generic_argument_clauseContext = Generic_argument_clauseContext;

CadenceParser.prototype.generic_argument_clause = function() {

    var localctx = new Generic_argument_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CadenceParser.RULE_generic_argument_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 291;
        this.match(CadenceParser.LT);
        this.state = 292;
        this.generic_argument_list();
        this.state = 293;
        this.match(CadenceParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_argument_list;
    return this;
}

Generic_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_argument_listContext.prototype.constructor = Generic_argument_listContext;

Generic_argument_listContext.prototype.generic_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Generic_argumentContext);
    } else {
        return this.getTypedRuleContext(Generic_argumentContext,i);
    }
};

Generic_argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Generic_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_argument_list(this);
	}
};

Generic_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_argument_list(this);
	}
};




CadenceParser.Generic_argument_listContext = Generic_argument_listContext;

CadenceParser.prototype.generic_argument_list = function() {

    var localctx = new Generic_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CadenceParser.RULE_generic_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 295;
        this.generic_argument();
        this.state = 300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 296;
            this.match(CadenceParser.COMMA);
            this.state = 297;
            this.generic_argument();
            this.state = 302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Generic_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_generic_argument;
    return this;
}

Generic_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generic_argumentContext.prototype.constructor = Generic_argumentContext;

Generic_argumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Generic_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterGeneric_argument(this);
	}
};

Generic_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitGeneric_argument(this);
	}
};




CadenceParser.Generic_argumentContext = Generic_argumentContext;

CadenceParser.prototype.generic_argument = function() {

    var localctx = new Generic_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CadenceParser.RULE_generic_argument);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_parameter_clause;
    return this;
}

Parameter_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_clauseContext.prototype.constructor = Parameter_clauseContext;

Parameter_clauseContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Parameter_clauseContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Parameter_clauseContext.prototype.parameter_list = function() {
    return this.getTypedRuleContext(Parameter_listContext,0);
};

Parameter_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterParameter_clause(this);
	}
};

Parameter_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitParameter_clause(this);
	}
};




CadenceParser.Parameter_clauseContext = Parameter_clauseContext;

CadenceParser.prototype.parameter_clause = function() {

    var localctx = new Parameter_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CadenceParser.RULE_parameter_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 305;
        this.match(CadenceParser.LPAREN);
        this.state = 307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.STRING_TYPE) | (1 << CadenceParser.UINT64_TYPE) | (1 << CadenceParser.ADDRESS) | (1 << CadenceParser.TYPE) | (1 << CadenceParser.ANY_STRUCT) | (1 << CadenceParser.AS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CadenceParser.PRIVATE - 33)) | (1 << (CadenceParser.PUBLIC - 33)) | (1 << (CadenceParser.WHILE - 33)) | (1 << (CadenceParser.GET - 33)) | (1 << (CadenceParser.SET - 33)) | (1 << (CadenceParser.SELF - 33)) | (1 << (CadenceParser.FILE - 33)) | (1 << (CadenceParser.LINE - 33)) | (1 << (CadenceParser.Identifier - 33)))) !== 0)) {
            this.state = 306;
            this.parameter_list();
        }

        this.state = 309;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_parameter_list;
    return this;
}

Parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_listContext.prototype.constructor = Parameter_listContext;

Parameter_listContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

Parameter_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterParameter_list(this);
	}
};

Parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitParameter_list(this);
	}
};




CadenceParser.Parameter_listContext = Parameter_listContext;

CadenceParser.prototype.parameter_list = function() {

    var localctx = new Parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CadenceParser.RULE_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 311;
        this.parameter();
        this.state = 316;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 312;
            this.match(CadenceParser.COMMA);
            this.state = 313;
            this.parameter();
            this.state = 318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.parameter_name = function() {
    return this.getTypedRuleContext(Parameter_nameContext,0);
};

ParameterContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitParameter(this);
	}
};




CadenceParser.ParameterContext = ParameterContext;

CadenceParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CadenceParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        this.parameter_name();
        this.state = 321;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 320;
            this.type_annotation();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Parameter_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_parameter_name;
    return this;
}

Parameter_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameter_nameContext.prototype.constructor = Parameter_nameContext;

Parameter_nameContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Parameter_nameContext.prototype.type_name_alias = function() {
    return this.getTypedRuleContext(Type_name_aliasContext,0);
};

Parameter_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterParameter_name(this);
	}
};

Parameter_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitParameter_name(this);
	}
};




CadenceParser.Parameter_nameContext = Parameter_nameContext;

CadenceParser.prototype.parameter_name = function() {

    var localctx = new Parameter_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CadenceParser.RULE_parameter_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        if(la_===1) {
            this.state = 323;
            this.type_name_alias();

        }
        this.state = 326;
        this.type_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Negate_prefix_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_negate_prefix_operator;
    return this;
}

Negate_prefix_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Negate_prefix_operatorContext.prototype.constructor = Negate_prefix_operatorContext;

Negate_prefix_operatorContext.prototype.SUB = function() {
    return this.getToken(CadenceParser.SUB, 0);
};

Negate_prefix_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterNegate_prefix_operator(this);
	}
};

Negate_prefix_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitNegate_prefix_operator(this);
	}
};




CadenceParser.Negate_prefix_operatorContext = Negate_prefix_operatorContext;

CadenceParser.prototype.negate_prefix_operator = function() {

    var localctx = new Negate_prefix_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CadenceParser.RULE_negate_prefix_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 328;
        this.match(CadenceParser.SUB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.numeric_literal = function() {
    return this.getTypedRuleContext(Numeric_literalContext,0);
};

LiteralContext.prototype.string_literal = function() {
    return this.getTypedRuleContext(String_literalContext,0);
};

LiteralContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

LiteralContext.prototype.nil_literal = function() {
    return this.getTypedRuleContext(Nil_literalContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLiteral(this);
	}
};




CadenceParser.LiteralContext = LiteralContext;

CadenceParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CadenceParser.RULE_literal);
    try {
        this.state = 334;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.SUB:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
            this.enterOuterAlt(localctx, 1);
            this.state = 330;
            this.numeric_literal();
            break;
        case CadenceParser.Multi_line_extended_string_open:
        case CadenceParser.Single_line_extended_string_open:
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.enterOuterAlt(localctx, 2);
            this.state = 331;
            this.string_literal();
            break;
        case CadenceParser.FALSE:
        case CadenceParser.TRUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 332;
            this.boolean_literal();
            break;
        case CadenceParser.NIL:
            this.enterOuterAlt(localctx, 4);
            this.state = 333;
            this.nil_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Numeric_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_numeric_literal;
    return this;
}

Numeric_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Numeric_literalContext.prototype.constructor = Numeric_literalContext;

Numeric_literalContext.prototype.integer_literal = function() {
    return this.getTypedRuleContext(Integer_literalContext,0);
};

Numeric_literalContext.prototype.negate_prefix_operator = function() {
    return this.getTypedRuleContext(Negate_prefix_operatorContext,0);
};

Numeric_literalContext.prototype.Floating_point_literal = function() {
    return this.getToken(CadenceParser.Floating_point_literal, 0);
};

Numeric_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterNumeric_literal(this);
	}
};

Numeric_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitNumeric_literal(this);
	}
};




CadenceParser.Numeric_literalContext = Numeric_literalContext;

CadenceParser.prototype.numeric_literal = function() {

    var localctx = new Numeric_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CadenceParser.RULE_numeric_literal);
    var _la = 0; // Token type
    try {
        this.state = 344;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.SUB) {
                this.state = 336;
                this.negate_prefix_operator();
            }

            this.state = 339;
            this.integer_literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.SUB) {
                this.state = 340;
                this.negate_prefix_operator();
            }

            this.state = 343;
            this.match(CadenceParser.Floating_point_literal);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Boolean_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_boolean_literal;
    return this;
}

Boolean_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_literalContext.prototype.constructor = Boolean_literalContext;

Boolean_literalContext.prototype.TRUE = function() {
    return this.getToken(CadenceParser.TRUE, 0);
};

Boolean_literalContext.prototype.FALSE = function() {
    return this.getToken(CadenceParser.FALSE, 0);
};

Boolean_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBoolean_literal(this);
	}
};




CadenceParser.Boolean_literalContext = Boolean_literalContext;

CadenceParser.prototype.boolean_literal = function() {

    var localctx = new Boolean_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CadenceParser.RULE_boolean_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 346;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.FALSE || _la===CadenceParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Nil_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_nil_literal;
    return this;
}

Nil_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nil_literalContext.prototype.constructor = Nil_literalContext;

Nil_literalContext.prototype.NIL = function() {
    return this.getToken(CadenceParser.NIL, 0);
};

Nil_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterNil_literal(this);
	}
};

Nil_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitNil_literal(this);
	}
};




CadenceParser.Nil_literalContext = Nil_literalContext;

CadenceParser.prototype.nil_literal = function() {

    var localctx = new Nil_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CadenceParser.RULE_nil_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 348;
        this.match(CadenceParser.NIL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Integer_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_integer_literal;
    return this;
}

Integer_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Integer_literalContext.prototype.constructor = Integer_literalContext;

Integer_literalContext.prototype.Decimal_digits = function() {
    return this.getToken(CadenceParser.Decimal_digits, 0);
};

Integer_literalContext.prototype.Decimal_literal = function() {
    return this.getToken(CadenceParser.Decimal_literal, 0);
};

Integer_literalContext.prototype.Binary_literal = function() {
    return this.getToken(CadenceParser.Binary_literal, 0);
};

Integer_literalContext.prototype.Octal_literal = function() {
    return this.getToken(CadenceParser.Octal_literal, 0);
};

Integer_literalContext.prototype.Hexadecimal_literal = function() {
    return this.getToken(CadenceParser.Hexadecimal_literal, 0);
};

Integer_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInteger_literal(this);
	}
};

Integer_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInteger_literal(this);
	}
};




CadenceParser.Integer_literalContext = Integer_literalContext;

CadenceParser.prototype.integer_literal = function() {

    var localctx = new Integer_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CadenceParser.RULE_integer_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 350;
        _la = this._input.LA(1);
        if(!(((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (CadenceParser.Binary_literal - 92)) | (1 << (CadenceParser.Octal_literal - 92)) | (1 << (CadenceParser.Decimal_digits - 92)) | (1 << (CadenceParser.Decimal_literal - 92)) | (1 << (CadenceParser.Hexadecimal_literal - 92)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function String_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_string_literal;
    return this;
}

String_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_literalContext.prototype.constructor = String_literalContext;

String_literalContext.prototype.extended_string_literal = function() {
    return this.getTypedRuleContext(Extended_string_literalContext,0);
};

String_literalContext.prototype.interpolated_string_literal = function() {
    return this.getTypedRuleContext(Interpolated_string_literalContext,0);
};

String_literalContext.prototype.static_string_literal = function() {
    return this.getTypedRuleContext(Static_string_literalContext,0);
};

String_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterString_literal(this);
	}
};

String_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitString_literal(this);
	}
};




CadenceParser.String_literalContext = String_literalContext;

CadenceParser.prototype.string_literal = function() {

    var localctx = new String_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CadenceParser.RULE_string_literal);
    try {
        this.state = 355;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 352;
            this.extended_string_literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 353;
            this.interpolated_string_literal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 354;
            this.static_string_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Extended_string_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_extended_string_literal;
    return this;
}

Extended_string_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Extended_string_literalContext.prototype.constructor = Extended_string_literalContext;

Extended_string_literalContext.prototype.Multi_line_extended_string_open = function() {
    return this.getToken(CadenceParser.Multi_line_extended_string_open, 0);
};

Extended_string_literalContext.prototype.Multi_line_extended_string_close = function() {
    return this.getToken(CadenceParser.Multi_line_extended_string_close, 0);
};

Extended_string_literalContext.prototype.Quoted_multi_line_extended_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_multi_line_extended_text);
    } else {
        return this.getToken(CadenceParser.Quoted_multi_line_extended_text, i);
    }
};


Extended_string_literalContext.prototype.Single_line_extended_string_open = function() {
    return this.getToken(CadenceParser.Single_line_extended_string_open, 0);
};

Extended_string_literalContext.prototype.Single_line_extended_string_close = function() {
    return this.getToken(CadenceParser.Single_line_extended_string_close, 0);
};

Extended_string_literalContext.prototype.Quoted_single_line_extended_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_single_line_extended_text);
    } else {
        return this.getToken(CadenceParser.Quoted_single_line_extended_text, i);
    }
};


Extended_string_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExtended_string_literal(this);
	}
};

Extended_string_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExtended_string_literal(this);
	}
};




CadenceParser.Extended_string_literalContext = Extended_string_literalContext;

CadenceParser.prototype.extended_string_literal = function() {

    var localctx = new Extended_string_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CadenceParser.RULE_extended_string_literal);
    var _la = 0; // Token type
    try {
        this.state = 371;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.Multi_line_extended_string_open:
            this.enterOuterAlt(localctx, 1);
            this.state = 357;
            this.match(CadenceParser.Multi_line_extended_string_open);
            this.state = 359; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 358;
                this.match(CadenceParser.Quoted_multi_line_extended_text);
                this.state = 361; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===CadenceParser.Quoted_multi_line_extended_text);
            this.state = 363;
            this.match(CadenceParser.Multi_line_extended_string_close);
            break;
        case CadenceParser.Single_line_extended_string_open:
            this.enterOuterAlt(localctx, 2);
            this.state = 364;
            this.match(CadenceParser.Single_line_extended_string_open);
            this.state = 366; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 365;
                this.match(CadenceParser.Quoted_single_line_extended_text);
                this.state = 368; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===CadenceParser.Quoted_single_line_extended_text);
            this.state = 370;
            this.match(CadenceParser.Single_line_extended_string_close);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Static_string_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_static_string_literal;
    return this;
}

Static_string_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Static_string_literalContext.prototype.constructor = Static_string_literalContext;

Static_string_literalContext.prototype.Single_line_string_open = function() {
    return this.getToken(CadenceParser.Single_line_string_open, 0);
};

Static_string_literalContext.prototype.Single_line_string_close = function() {
    return this.getToken(CadenceParser.Single_line_string_close, 0);
};

Static_string_literalContext.prototype.Quoted_single_line_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_single_line_text);
    } else {
        return this.getToken(CadenceParser.Quoted_single_line_text, i);
    }
};


Static_string_literalContext.prototype.Multi_line_string_open = function() {
    return this.getToken(CadenceParser.Multi_line_string_open, 0);
};

Static_string_literalContext.prototype.Multi_line_string_close = function() {
    return this.getToken(CadenceParser.Multi_line_string_close, 0);
};

Static_string_literalContext.prototype.Quoted_multi_line_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_multi_line_text);
    } else {
        return this.getToken(CadenceParser.Quoted_multi_line_text, i);
    }
};


Static_string_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStatic_string_literal(this);
	}
};

Static_string_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStatic_string_literal(this);
	}
};




CadenceParser.Static_string_literalContext = Static_string_literalContext;

CadenceParser.prototype.static_string_literal = function() {

    var localctx = new Static_string_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CadenceParser.RULE_static_string_literal);
    var _la = 0; // Token type
    try {
        this.state = 389;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.Single_line_string_open:
            this.enterOuterAlt(localctx, 1);
            this.state = 373;
            this.match(CadenceParser.Single_line_string_open);
            this.state = 377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CadenceParser.Quoted_single_line_text) {
                this.state = 374;
                this.match(CadenceParser.Quoted_single_line_text);
                this.state = 379;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 380;
            this.match(CadenceParser.Single_line_string_close);
            break;
        case CadenceParser.Multi_line_string_open:
            this.enterOuterAlt(localctx, 2);
            this.state = 381;
            this.match(CadenceParser.Multi_line_string_open);
            this.state = 385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CadenceParser.Quoted_multi_line_text) {
                this.state = 382;
                this.match(CadenceParser.Quoted_multi_line_text);
                this.state = 387;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 388;
            this.match(CadenceParser.Multi_line_string_close);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Interpolated_string_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_interpolated_string_literal;
    return this;
}

Interpolated_string_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Interpolated_string_literalContext.prototype.constructor = Interpolated_string_literalContext;

Interpolated_string_literalContext.prototype.Single_line_string_open = function() {
    return this.getToken(CadenceParser.Single_line_string_open, 0);
};

Interpolated_string_literalContext.prototype.Single_line_string_close = function() {
    return this.getToken(CadenceParser.Single_line_string_close, 0);
};

Interpolated_string_literalContext.prototype.Quoted_single_line_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_single_line_text);
    } else {
        return this.getToken(CadenceParser.Quoted_single_line_text, i);
    }
};


Interpolated_string_literalContext.prototype.Interpolataion_single_line = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Interpolataion_single_line);
    } else {
        return this.getToken(CadenceParser.Interpolataion_single_line, i);
    }
};


Interpolated_string_literalContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.RPAREN);
    } else {
        return this.getToken(CadenceParser.RPAREN, i);
    }
};


Interpolated_string_literalContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Interpolated_string_literalContext.prototype.Multi_line_string_open = function() {
    return this.getToken(CadenceParser.Multi_line_string_open, 0);
};

Interpolated_string_literalContext.prototype.Multi_line_string_close = function() {
    return this.getToken(CadenceParser.Multi_line_string_close, 0);
};

Interpolated_string_literalContext.prototype.Quoted_multi_line_text = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Quoted_multi_line_text);
    } else {
        return this.getToken(CadenceParser.Quoted_multi_line_text, i);
    }
};


Interpolated_string_literalContext.prototype.Interpolataion_multi_line = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.Interpolataion_multi_line);
    } else {
        return this.getToken(CadenceParser.Interpolataion_multi_line, i);
    }
};


Interpolated_string_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInterpolated_string_literal(this);
	}
};

Interpolated_string_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInterpolated_string_literal(this);
	}
};




CadenceParser.Interpolated_string_literalContext = Interpolated_string_literalContext;

CadenceParser.prototype.interpolated_string_literal = function() {

    var localctx = new Interpolated_string_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CadenceParser.RULE_interpolated_string_literal);
    var _la = 0; // Token type
    try {
        this.state = 415;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.Single_line_string_open:
            this.enterOuterAlt(localctx, 1);
            this.state = 391;
            this.match(CadenceParser.Single_line_string_open);
            this.state = 399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CadenceParser.Interpolataion_single_line || _la===CadenceParser.Quoted_single_line_text) {
                this.state = 397;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CadenceParser.Quoted_single_line_text:
                    this.state = 392;
                    this.match(CadenceParser.Quoted_single_line_text);
                    break;
                case CadenceParser.Interpolataion_single_line:
                    this.state = 393;
                    this.match(CadenceParser.Interpolataion_single_line);

                    this.state = 394;
                    this.expression();
                    this.state = 395;
                    this.match(CadenceParser.RPAREN);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 401;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 402;
            this.match(CadenceParser.Single_line_string_close);
            break;
        case CadenceParser.Multi_line_string_open:
            this.enterOuterAlt(localctx, 2);
            this.state = 403;
            this.match(CadenceParser.Multi_line_string_open);
            this.state = 411;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CadenceParser.Interpolataion_multi_line || _la===CadenceParser.Quoted_multi_line_text) {
                this.state = 409;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CadenceParser.Quoted_multi_line_text:
                    this.state = 404;
                    this.match(CadenceParser.Quoted_multi_line_text);
                    break;
                case CadenceParser.Interpolataion_multi_line:
                    this.state = 405;
                    this.match(CadenceParser.Interpolataion_multi_line);

                    this.state = 406;
                    this.expression();
                    this.state = 407;
                    this.match(CadenceParser.RPAREN);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 413;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 414;
            this.match(CadenceParser.Multi_line_string_close);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.prefix_expression = function() {
    return this.getTypedRuleContext(Prefix_expressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExpression(this);
	}
};




CadenceParser.ExpressionContext = ExpressionContext;

CadenceParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CadenceParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        this.prefix_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExpression_list(this);
	}
};




CadenceParser.Expression_listContext = Expression_listContext;

CadenceParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CadenceParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 419;
        this.expression();
        this.state = 424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 420;
            this.match(CadenceParser.COMMA);
            this.state = 421;
            this.expression();
            this.state = 426;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Prefix_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_prefix_expression;
    return this;
}

Prefix_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Prefix_expressionContext.prototype.constructor = Prefix_expressionContext;

Prefix_expressionContext.prototype.postfix_expression = function() {
    return this.getTypedRuleContext(Postfix_expressionContext,0);
};

Prefix_expressionContext.prototype.prefix_operator = function() {
    return this.getTypedRuleContext(Prefix_operatorContext,0);
};

Prefix_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrefix_expression(this);
	}
};

Prefix_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrefix_expression(this);
	}
};




CadenceParser.Prefix_expressionContext = Prefix_expressionContext;

CadenceParser.prototype.prefix_expression = function() {

    var localctx = new Prefix_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CadenceParser.RULE_prefix_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        if(la_===1) {
            this.state = 427;
            this.prefix_operator();

        }
        this.state = 430;
        this.postfix_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Postfix_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_postfix_expression;
    return this;
}

Postfix_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Postfix_expressionContext.prototype.constructor = Postfix_expressionContext;

Postfix_expressionContext.prototype.primary_expression = function() {
    return this.getTypedRuleContext(Primary_expressionContext,0);
};

Postfix_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPostfix_expression(this);
	}
};

Postfix_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPostfix_expression(this);
	}
};




CadenceParser.Postfix_expressionContext = Postfix_expressionContext;

CadenceParser.prototype.postfix_expression = function() {

    var localctx = new Postfix_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CadenceParser.RULE_postfix_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        this.primary_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Primary_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_primary_expression;
    return this;
}

Primary_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primary_expressionContext.prototype.constructor = Primary_expressionContext;

Primary_expressionContext.prototype.array_type = function() {
    return this.getTypedRuleContext(Array_typeContext,0);
};

Primary_expressionContext.prototype.dictionary_type = function() {
    return this.getTypedRuleContext(Dictionary_typeContext,0);
};

Primary_expressionContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Primary_expressionContext.prototype.self_expression = function() {
    return this.getTypedRuleContext(Self_expressionContext,0);
};

Primary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrimary_expression(this);
	}
};

Primary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrimary_expression(this);
	}
};




CadenceParser.Primary_expressionContext = Primary_expressionContext;

CadenceParser.prototype.primary_expression = function() {

    var localctx = new Primary_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CadenceParser.RULE_primary_expression);
    try {
        this.state = 438;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 434;
            this.array_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 435;
            this.dictionary_type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 436;
            this.literal_expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 437;
            this.self_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Self_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_self_expression;
    return this;
}

Self_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Self_expressionContext.prototype.constructor = Self_expressionContext;

Self_expressionContext.prototype.SELF = function() {
    return this.getToken(CadenceParser.SELF, 0);
};

Self_expressionContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Self_expressionContext.prototype.object_expression = function() {
    return this.getTypedRuleContext(Object_expressionContext,0);
};

Self_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSelf_expression(this);
	}
};

Self_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSelf_expression(this);
	}
};




CadenceParser.Self_expressionContext = Self_expressionContext;

CadenceParser.prototype.self_expression = function() {

    var localctx = new Self_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CadenceParser.RULE_self_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.match(CadenceParser.SELF);
        this.state = 441;
        this.match(CadenceParser.DOT);
        this.state = 442;
        this.object_expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Object_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_object_expression;
    return this;
}

Object_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_expressionContext.prototype.constructor = Object_expressionContext;

Object_expressionContext.prototype.variable_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Variable_nameContext);
    } else {
        return this.getTypedRuleContext(Variable_nameContext,i);
    }
};

Object_expressionContext.prototype.parameter_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Parameter_clauseContext);
    } else {
        return this.getTypedRuleContext(Parameter_clauseContext,i);
    }
};

Object_expressionContext.prototype.object_access = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Object_accessContext);
    } else {
        return this.getTypedRuleContext(Object_accessContext,i);
    }
};

Object_expressionContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.DOT);
    } else {
        return this.getToken(CadenceParser.DOT, i);
    }
};


Object_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterObject_expression(this);
	}
};

Object_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitObject_expression(this);
	}
};




CadenceParser.Object_expressionContext = Object_expressionContext;

CadenceParser.prototype.object_expression = function() {

    var localctx = new Object_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CadenceParser.RULE_object_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 444;
        this.variable_name();
        this.state = 449;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 447;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case CadenceParser.LPAREN:
                    this.state = 445;
                    this.parameter_clause();
                    break;
                case CadenceParser.LBRACK:
                    this.state = 446;
                    this.object_access();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 451;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 463;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 452;
                this.match(CadenceParser.DOT);
                this.state = 453;
                this.variable_name();
                this.state = 458;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,30,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 456;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case CadenceParser.LPAREN:
                            this.state = 454;
                            this.parameter_clause();
                            break;
                        case CadenceParser.LBRACK:
                            this.state = 455;
                            this.object_access();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        } 
                    }
                    this.state = 460;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,30,this._ctx);
                }
         
            }
            this.state = 465;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Object_accessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_object_access;
    return this;
}

Object_accessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_accessContext.prototype.constructor = Object_accessContext;

Object_accessContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Object_accessContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Object_accessContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Object_accessContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Object_accessContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterObject_access(this);
	}
};

Object_accessContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitObject_access(this);
	}
};




CadenceParser.Object_accessContext = Object_accessContext;

CadenceParser.prototype.object_access = function() {

    var localctx = new Object_accessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CadenceParser.RULE_object_access);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 466;
        this.match(CadenceParser.LBRACK);
        this.state = 469;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.AS:
        case CadenceParser.DEFAULT:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHILE:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.SELF:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.Identifier:
            this.state = 467;
            this.identifier();
            break;
        case CadenceParser.FALSE:
        case CadenceParser.TRUE:
        case CadenceParser.NIL:
        case CadenceParser.LBRACK:
        case CadenceParser.SUB:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
        case CadenceParser.Multi_line_extended_string_open:
        case CadenceParser.Single_line_extended_string_open:
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.state = 468;
            this.literal_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 471;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Literal_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_literal_expression;
    return this;
}

Literal_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_expressionContext.prototype.constructor = Literal_expressionContext;

Literal_expressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

Literal_expressionContext.prototype.array_literal = function() {
    return this.getTypedRuleContext(Array_literalContext,0);
};

Literal_expressionContext.prototype.dictionary_literal = function() {
    return this.getTypedRuleContext(Dictionary_literalContext,0);
};

Literal_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLiteral_expression(this);
	}
};

Literal_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLiteral_expression(this);
	}
};




CadenceParser.Literal_expressionContext = Literal_expressionContext;

CadenceParser.prototype.literal_expression = function() {

    var localctx = new Literal_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CadenceParser.RULE_literal_expression);
    try {
        this.state = 476;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 473;
            this.literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 474;
            this.array_literal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 475;
            this.dictionary_literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_array_literal;
    return this;
}

Array_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_literalContext.prototype.constructor = Array_literalContext;

Array_literalContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Array_literalContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Array_literalContext.prototype.array_literal_items = function() {
    return this.getTypedRuleContext(Array_literal_itemsContext,0);
};

Array_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArray_literal(this);
	}
};

Array_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArray_literal(this);
	}
};




CadenceParser.Array_literalContext = Array_literalContext;

CadenceParser.prototype.array_literal = function() {

    var localctx = new Array_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CadenceParser.RULE_array_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 478;
        this.match(CadenceParser.LBRACK);
        this.state = 480;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.QUESTION) | (1 << CadenceParser.AT) | (1 << CadenceParser.AND))) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CadenceParser.FALSE - 50)) | (1 << (CadenceParser.TRUE - 50)) | (1 << (CadenceParser.NIL - 50)) | (1 << (CadenceParser.SELF - 50)) | (1 << (CadenceParser.DOT - 50)) | (1 << (CadenceParser.LCURLY - 50)) | (1 << (CadenceParser.LBRACK - 50)) | (1 << (CadenceParser.LT - 50)) | (1 << (CadenceParser.GT - 50)) | (1 << (CadenceParser.BANG - 50)) | (1 << (CadenceParser.SUB - 50)) | (1 << (CadenceParser.EQUAL - 50)) | (1 << (CadenceParser.OR - 50)) | (1 << (CadenceParser.DIV - 50)) | (1 << (CadenceParser.ADD - 50)))) !== 0) || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (CadenceParser.MUL - 82)) | (1 << (CadenceParser.MOD - 82)) | (1 << (CadenceParser.CARET - 82)) | (1 << (CadenceParser.TILDE - 82)) | (1 << (CadenceParser.Operator_head_other - 82)) | (1 << (CadenceParser.Binary_literal - 82)) | (1 << (CadenceParser.Octal_literal - 82)) | (1 << (CadenceParser.Decimal_digits - 82)) | (1 << (CadenceParser.Decimal_literal - 82)) | (1 << (CadenceParser.Hexadecimal_literal - 82)) | (1 << (CadenceParser.Floating_point_literal - 82)) | (1 << (CadenceParser.Multi_line_extended_string_open - 82)) | (1 << (CadenceParser.Single_line_extended_string_open - 82)) | (1 << (CadenceParser.Multi_line_string_open - 82)) | (1 << (CadenceParser.Single_line_string_open - 82)))) !== 0)) {
            this.state = 479;
            this.array_literal_items();
        }

        this.state = 482;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_literal_itemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_array_literal_items;
    return this;
}

Array_literal_itemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_literal_itemsContext.prototype.constructor = Array_literal_itemsContext;

Array_literal_itemsContext.prototype.array_literal_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Array_literal_itemContext);
    } else {
        return this.getTypedRuleContext(Array_literal_itemContext,i);
    }
};

Array_literal_itemsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Array_literal_itemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArray_literal_items(this);
	}
};

Array_literal_itemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArray_literal_items(this);
	}
};




CadenceParser.Array_literal_itemsContext = Array_literal_itemsContext;

CadenceParser.prototype.array_literal_items = function() {

    var localctx = new Array_literal_itemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CadenceParser.RULE_array_literal_items);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.array_literal_item();
        this.state = 489;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 485;
                this.match(CadenceParser.COMMA);
                this.state = 486;
                this.array_literal_item(); 
            }
            this.state = 491;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

        this.state = 493;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COMMA) {
            this.state = 492;
            this.match(CadenceParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_literal_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_array_literal_item;
    return this;
}

Array_literal_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_literal_itemContext.prototype.constructor = Array_literal_itemContext;

Array_literal_itemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Array_literal_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArray_literal_item(this);
	}
};

Array_literal_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArray_literal_item(this);
	}
};




CadenceParser.Array_literal_itemContext = Array_literal_itemContext;

CadenceParser.prototype.array_literal_item = function() {

    var localctx = new Array_literal_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CadenceParser.RULE_array_literal_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dictionary_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dictionary_literal;
    return this;
}

Dictionary_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dictionary_literalContext.prototype.constructor = Dictionary_literalContext;

Dictionary_literalContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Dictionary_literalContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Dictionary_literalContext.prototype.dictionary_literal_items = function() {
    return this.getTypedRuleContext(Dictionary_literal_itemsContext,0);
};

Dictionary_literalContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Dictionary_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDictionary_literal(this);
	}
};

Dictionary_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDictionary_literal(this);
	}
};




CadenceParser.Dictionary_literalContext = Dictionary_literalContext;

CadenceParser.prototype.dictionary_literal = function() {

    var localctx = new Dictionary_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CadenceParser.RULE_dictionary_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this.match(CadenceParser.LBRACK);
        this.state = 500;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.QUESTION:
        case CadenceParser.AT:
        case CadenceParser.AND:
        case CadenceParser.FALSE:
        case CadenceParser.TRUE:
        case CadenceParser.NIL:
        case CadenceParser.SELF:
        case CadenceParser.DOT:
        case CadenceParser.LCURLY:
        case CadenceParser.LBRACK:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
        case CadenceParser.Multi_line_extended_string_open:
        case CadenceParser.Single_line_extended_string_open:
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.state = 498;
            this.dictionary_literal_items();
            break;
        case CadenceParser.COLON:
            this.state = 499;
            this.match(CadenceParser.COLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 502;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dictionary_literal_itemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dictionary_literal_items;
    return this;
}

Dictionary_literal_itemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dictionary_literal_itemsContext.prototype.constructor = Dictionary_literal_itemsContext;

Dictionary_literal_itemsContext.prototype.dictionary_literal_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dictionary_literal_itemContext);
    } else {
        return this.getTypedRuleContext(Dictionary_literal_itemContext,i);
    }
};

Dictionary_literal_itemsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Dictionary_literal_itemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDictionary_literal_items(this);
	}
};

Dictionary_literal_itemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDictionary_literal_items(this);
	}
};




CadenceParser.Dictionary_literal_itemsContext = Dictionary_literal_itemsContext;

CadenceParser.prototype.dictionary_literal_items = function() {

    var localctx = new Dictionary_literal_itemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CadenceParser.RULE_dictionary_literal_items);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 504;
        this.dictionary_literal_item();
        this.state = 509;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 505;
                this.match(CadenceParser.COMMA);
                this.state = 506;
                this.dictionary_literal_item(); 
            }
            this.state = 511;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
        }

        this.state = 513;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COMMA) {
            this.state = 512;
            this.match(CadenceParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dictionary_literal_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dictionary_literal_item;
    return this;
}

Dictionary_literal_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dictionary_literal_itemContext.prototype.constructor = Dictionary_literal_itemContext;

Dictionary_literal_itemContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Dictionary_literal_itemContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Dictionary_literal_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDictionary_literal_item(this);
	}
};

Dictionary_literal_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDictionary_literal_item(this);
	}
};




CadenceParser.Dictionary_literal_itemContext = Dictionary_literal_itemContext;

CadenceParser.prototype.dictionary_literal_item = function() {

    var localctx = new Dictionary_literal_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CadenceParser.RULE_dictionary_literal_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        this.expression();
        this.state = 516;
        this.match(CadenceParser.COLON);
        this.state = 517;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Assignment_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_assignment_operator;
    return this;
}

Assignment_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_operatorContext.prototype.constructor = Assignment_operatorContext;

Assignment_operatorContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Assignment_operatorContext.prototype.MOVE = function() {
    return this.getToken(CadenceParser.MOVE, 0);
};

Assignment_operatorContext.prototype.FORCE_MOVE = function() {
    return this.getToken(CadenceParser.FORCE_MOVE, 0);
};

Assignment_operatorContext.prototype.SWAP = function() {
    return this.getToken(CadenceParser.SWAP, 0);
};

Assignment_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterAssignment_operator(this);
	}
};

Assignment_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitAssignment_operator(this);
	}
};




CadenceParser.Assignment_operatorContext = Assignment_operatorContext;

CadenceParser.prototype.assignment_operator = function() {

    var localctx = new Assignment_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CadenceParser.RULE_assignment_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        _la = this._input.LA(1);
        if(!(((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (CadenceParser.EQUAL - 75)) | (1 << (CadenceParser.MOVE - 75)) | (1 << (CadenceParser.FORCE_MOVE - 75)) | (1 << (CadenceParser.SWAP - 75)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition;
    return this;
}

Compilation_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_conditionContext.prototype.constructor = Compilation_conditionContext;

Compilation_conditionContext.prototype.compilation_condition_AND = function() {
    return this.getTypedRuleContext(Compilation_condition_ANDContext,0);
};

Compilation_conditionContext.prototype.compilation_condition_OR = function() {
    return this.getTypedRuleContext(Compilation_condition_ORContext,0);
};

Compilation_conditionContext.prototype.compilation_condition_NOT = function() {
    return this.getTypedRuleContext(Compilation_condition_NOTContext,0);
};

Compilation_conditionContext.prototype.compilation_condition_ET = function() {
    return this.getTypedRuleContext(Compilation_condition_ETContext,0);
};

Compilation_conditionContext.prototype.compilation_condition_GE = function() {
    return this.getTypedRuleContext(Compilation_condition_GEContext,0);
};

Compilation_conditionContext.prototype.compilation_condition_LE = function() {
    return this.getTypedRuleContext(Compilation_condition_LEContext,0);
};

Compilation_conditionContext.prototype.compilation_condition_G = function() {
    return this.getTypedRuleContext(Compilation_condition_GContext,0);
};

Compilation_conditionContext.prototype.compilation_condition_L = function() {
    return this.getTypedRuleContext(Compilation_condition_LContext,0);
};

Compilation_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition(this);
	}
};

Compilation_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition(this);
	}
};




CadenceParser.Compilation_conditionContext = Compilation_conditionContext;

CadenceParser.prototype.compilation_condition = function() {

    var localctx = new Compilation_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CadenceParser.RULE_compilation_condition);
    try {
        this.state = 529;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 521;
            this.compilation_condition_AND();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 522;
            this.compilation_condition_OR();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 523;
            this.compilation_condition_NOT();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 524;
            this.compilation_condition_ET();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 525;
            this.compilation_condition_GE();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 526;
            this.compilation_condition_LE();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 527;
            this.compilation_condition_G();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 528;
            this.compilation_condition_L();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_ANDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_AND;
    return this;
}

Compilation_condition_ANDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_ANDContext.prototype.constructor = Compilation_condition_ANDContext;

Compilation_condition_ANDContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.AND);
    } else {
        return this.getToken(CadenceParser.AND, i);
    }
};


Compilation_condition_ANDContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_AND(this);
	}
};

Compilation_condition_ANDContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_AND(this);
	}
};




CadenceParser.Compilation_condition_ANDContext = Compilation_condition_ANDContext;

CadenceParser.prototype.compilation_condition_AND = function() {

    var localctx = new Compilation_condition_ANDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CadenceParser.RULE_compilation_condition_AND);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 531;
        this.match(CadenceParser.AND);
        this.state = 532;
        this.match(CadenceParser.AND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_ORContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_OR;
    return this;
}

Compilation_condition_ORContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_ORContext.prototype.constructor = Compilation_condition_ORContext;

Compilation_condition_ORContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.OR);
    } else {
        return this.getToken(CadenceParser.OR, i);
    }
};


Compilation_condition_ORContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_OR(this);
	}
};

Compilation_condition_ORContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_OR(this);
	}
};




CadenceParser.Compilation_condition_ORContext = Compilation_condition_ORContext;

CadenceParser.prototype.compilation_condition_OR = function() {

    var localctx = new Compilation_condition_ORContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CadenceParser.RULE_compilation_condition_OR);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 534;
        this.match(CadenceParser.OR);
        this.state = 535;
        this.match(CadenceParser.OR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_NOTContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_NOT;
    return this;
}

Compilation_condition_NOTContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_NOTContext.prototype.constructor = Compilation_condition_NOTContext;

Compilation_condition_NOTContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

Compilation_condition_NOTContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Compilation_condition_NOTContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_NOT(this);
	}
};

Compilation_condition_NOTContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_NOT(this);
	}
};




CadenceParser.Compilation_condition_NOTContext = Compilation_condition_NOTContext;

CadenceParser.prototype.compilation_condition_NOT = function() {

    var localctx = new Compilation_condition_NOTContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CadenceParser.RULE_compilation_condition_NOT);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this.match(CadenceParser.BANG);
        this.state = 538;
        this.match(CadenceParser.EQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_ETContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_ET;
    return this;
}

Compilation_condition_ETContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_ETContext.prototype.constructor = Compilation_condition_ETContext;

Compilation_condition_ETContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.EQUAL);
    } else {
        return this.getToken(CadenceParser.EQUAL, i);
    }
};


Compilation_condition_ETContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_ET(this);
	}
};

Compilation_condition_ETContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_ET(this);
	}
};




CadenceParser.Compilation_condition_ETContext = Compilation_condition_ETContext;

CadenceParser.prototype.compilation_condition_ET = function() {

    var localctx = new Compilation_condition_ETContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CadenceParser.RULE_compilation_condition_ET);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 540;
        this.match(CadenceParser.EQUAL);
        this.state = 541;
        this.match(CadenceParser.EQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_GEContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_GE;
    return this;
}

Compilation_condition_GEContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_GEContext.prototype.constructor = Compilation_condition_GEContext;

Compilation_condition_GEContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Compilation_condition_GEContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Compilation_condition_GEContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_GE(this);
	}
};

Compilation_condition_GEContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_GE(this);
	}
};




CadenceParser.Compilation_condition_GEContext = Compilation_condition_GEContext;

CadenceParser.prototype.compilation_condition_GE = function() {

    var localctx = new Compilation_condition_GEContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CadenceParser.RULE_compilation_condition_GE);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this.match(CadenceParser.GT);
        this.state = 544;
        this.match(CadenceParser.EQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_LEContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_LE;
    return this;
}

Compilation_condition_LEContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_LEContext.prototype.constructor = Compilation_condition_LEContext;

Compilation_condition_LEContext.prototype.LT = function() {
    return this.getToken(CadenceParser.LT, 0);
};

Compilation_condition_LEContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Compilation_condition_LEContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_LE(this);
	}
};

Compilation_condition_LEContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_LE(this);
	}
};




CadenceParser.Compilation_condition_LEContext = Compilation_condition_LEContext;

CadenceParser.prototype.compilation_condition_LE = function() {

    var localctx = new Compilation_condition_LEContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CadenceParser.RULE_compilation_condition_LE);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        this.match(CadenceParser.LT);
        this.state = 547;
        this.match(CadenceParser.EQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_GContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_G;
    return this;
}

Compilation_condition_GContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_GContext.prototype.constructor = Compilation_condition_GContext;

Compilation_condition_GContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Compilation_condition_GContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_G(this);
	}
};

Compilation_condition_GContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_G(this);
	}
};




CadenceParser.Compilation_condition_GContext = Compilation_condition_GContext;

CadenceParser.prototype.compilation_condition_G = function() {

    var localctx = new Compilation_condition_GContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CadenceParser.RULE_compilation_condition_G);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 549;
        this.match(CadenceParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compilation_condition_LContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_compilation_condition_L;
    return this;
}

Compilation_condition_LContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compilation_condition_LContext.prototype.constructor = Compilation_condition_LContext;

Compilation_condition_LContext.prototype.LT = function() {
    return this.getToken(CadenceParser.LT, 0);
};

Compilation_condition_LContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCompilation_condition_L(this);
	}
};

Compilation_condition_LContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCompilation_condition_L(this);
	}
};




CadenceParser.Compilation_condition_LContext = Compilation_condition_LContext;

CadenceParser.prototype.compilation_condition_L = function() {

    var localctx = new Compilation_condition_LContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CadenceParser.RULE_compilation_condition_L);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        this.match(CadenceParser.LT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Arrow_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_arrow_operator;
    return this;
}

Arrow_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arrow_operatorContext.prototype.constructor = Arrow_operatorContext;

Arrow_operatorContext.prototype.SUB = function() {
    return this.getToken(CadenceParser.SUB, 0);
};

Arrow_operatorContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Arrow_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArrow_operator(this);
	}
};

Arrow_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArrow_operator(this);
	}
};




CadenceParser.Arrow_operatorContext = Arrow_operatorContext;

CadenceParser.prototype.arrow_operator = function() {

    var localctx = new Arrow_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CadenceParser.RULE_arrow_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.match(CadenceParser.SUB);
        this.state = 554;
        this.match(CadenceParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Range_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_range_operator;
    return this;
}

Range_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_operatorContext.prototype.constructor = Range_operatorContext;

Range_operatorContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.DOT);
    } else {
        return this.getToken(CadenceParser.DOT, i);
    }
};


Range_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterRange_operator(this);
	}
};

Range_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitRange_operator(this);
	}
};




CadenceParser.Range_operatorContext = Range_operatorContext;

CadenceParser.prototype.range_operator = function() {

    var localctx = new Range_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CadenceParser.RULE_range_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 556;
        this.match(CadenceParser.DOT);
        this.state = 557;
        this.match(CadenceParser.DOT);
        this.state = 558;
        this.match(CadenceParser.DOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Same_type_equalsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_same_type_equals;
    return this;
}

Same_type_equalsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Same_type_equalsContext.prototype.constructor = Same_type_equalsContext;

Same_type_equalsContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.EQUAL);
    } else {
        return this.getToken(CadenceParser.EQUAL, i);
    }
};


Same_type_equalsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterSame_type_equals(this);
	}
};

Same_type_equalsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitSame_type_equals(this);
	}
};




CadenceParser.Same_type_equalsContext = Same_type_equalsContext;

CadenceParser.prototype.same_type_equals = function() {

    var localctx = new Same_type_equalsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CadenceParser.RULE_same_type_equals);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        this.match(CadenceParser.EQUAL);
        this.state = 561;
        this.match(CadenceParser.EQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Binary_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_binary_operator;
    return this;
}

Binary_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Binary_operatorContext.prototype.constructor = Binary_operatorContext;

Binary_operatorContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Binary_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBinary_operator(this);
	}
};

Binary_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBinary_operator(this);
	}
};




CadenceParser.Binary_operatorContext = Binary_operatorContext;

CadenceParser.prototype.binary_operator = function() {

    var localctx = new Binary_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CadenceParser.RULE_binary_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Prefix_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_prefix_operator;
    return this;
}

Prefix_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Prefix_operatorContext.prototype.constructor = Prefix_operatorContext;

Prefix_operatorContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Prefix_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrefix_operator(this);
	}
};

Prefix_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrefix_operator(this);
	}
};




CadenceParser.Prefix_operatorContext = Prefix_operatorContext;

CadenceParser.prototype.prefix_operator = function() {

    var localctx = new Prefix_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CadenceParser.RULE_prefix_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 565;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Postfix_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_postfix_operator;
    return this;
}

Postfix_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Postfix_operatorContext.prototype.constructor = Postfix_operatorContext;

Postfix_operatorContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Postfix_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPostfix_operator(this);
	}
};

Postfix_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPostfix_operator(this);
	}
};




CadenceParser.Postfix_operatorContext = Postfix_operatorContext;

CadenceParser.prototype.postfix_operator = function() {

    var localctx = new Postfix_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CadenceParser.RULE_postfix_operator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 567;
        this.operator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;

OperatorContext.prototype.operator_head = function() {
    return this.getTypedRuleContext(Operator_headContext,0);
};

OperatorContext.prototype.operator_characters = function() {
    return this.getTypedRuleContext(Operator_charactersContext,0);
};

OperatorContext.prototype.dot_operator_head = function() {
    return this.getTypedRuleContext(Dot_operator_headContext,0);
};

OperatorContext.prototype.dot_operator_characters = function() {
    return this.getTypedRuleContext(Dot_operator_charactersContext,0);
};

OperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOperator(this);
	}
};

OperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOperator(this);
	}
};




CadenceParser.OperatorContext = OperatorContext;

CadenceParser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CadenceParser.RULE_operator);
    try {
        this.state = 576;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
            this.enterOuterAlt(localctx, 1);
            this.state = 569;
            this.operator_head();
            this.state = 571;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
            if(la_===1) {
                this.state = 570;
                this.operator_characters();

            }
            break;
        case CadenceParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 573;
            this.dot_operator_head();
            this.state = 574;
            this.dot_operator_characters();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operator_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_operator_head;
    return this;
}

Operator_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_headContext.prototype.constructor = Operator_headContext;

Operator_headContext.prototype.DIV = function() {
    return this.getToken(CadenceParser.DIV, 0);
};

Operator_headContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

Operator_headContext.prototype.SUB = function() {
    return this.getToken(CadenceParser.SUB, 0);
};

Operator_headContext.prototype.ADD = function() {
    return this.getToken(CadenceParser.ADD, 0);
};

Operator_headContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

Operator_headContext.prototype.MUL = function() {
    return this.getToken(CadenceParser.MUL, 0);
};

Operator_headContext.prototype.MOD = function() {
    return this.getToken(CadenceParser.MOD, 0);
};

Operator_headContext.prototype.AND = function() {
    return this.getToken(CadenceParser.AND, 0);
};

Operator_headContext.prototype.OR = function() {
    return this.getToken(CadenceParser.OR, 0);
};

Operator_headContext.prototype.LT = function() {
    return this.getToken(CadenceParser.LT, 0);
};

Operator_headContext.prototype.GT = function() {
    return this.getToken(CadenceParser.GT, 0);
};

Operator_headContext.prototype.CARET = function() {
    return this.getToken(CadenceParser.CARET, 0);
};

Operator_headContext.prototype.TILDE = function() {
    return this.getToken(CadenceParser.TILDE, 0);
};

Operator_headContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Operator_headContext.prototype.Operator_head_other = function() {
    return this.getToken(CadenceParser.Operator_head_other, 0);
};

Operator_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOperator_head(this);
	}
};

Operator_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOperator_head(this);
	}
};




CadenceParser.Operator_headContext = Operator_headContext;

CadenceParser.prototype.operator_head = function() {

    var localctx = new Operator_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CadenceParser.RULE_operator_head);
    var _la = 0; // Token type
    try {
        this.state = 580;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
            this.enterOuterAlt(localctx, 1);
            this.state = 578;
            _la = this._input.LA(1);
            if(!(_la===CadenceParser.QUESTION || _la===CadenceParser.AND || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (CadenceParser.LT - 70)) | (1 << (CadenceParser.GT - 70)) | (1 << (CadenceParser.BANG - 70)) | (1 << (CadenceParser.SUB - 70)) | (1 << (CadenceParser.EQUAL - 70)) | (1 << (CadenceParser.OR - 70)) | (1 << (CadenceParser.DIV - 70)) | (1 << (CadenceParser.ADD - 70)) | (1 << (CadenceParser.MUL - 70)) | (1 << (CadenceParser.MOD - 70)) | (1 << (CadenceParser.CARET - 70)) | (1 << (CadenceParser.TILDE - 70)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case CadenceParser.Operator_head_other:
            this.enterOuterAlt(localctx, 2);
            this.state = 579;
            this.match(CadenceParser.Operator_head_other);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operator_characterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_operator_character;
    return this;
}

Operator_characterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_characterContext.prototype.constructor = Operator_characterContext;

Operator_characterContext.prototype.operator_head = function() {
    return this.getTypedRuleContext(Operator_headContext,0);
};

Operator_characterContext.prototype.Operator_following_character = function() {
    return this.getToken(CadenceParser.Operator_following_character, 0);
};

Operator_characterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOperator_character(this);
	}
};

Operator_characterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOperator_character(this);
	}
};




CadenceParser.Operator_characterContext = Operator_characterContext;

CadenceParser.prototype.operator_character = function() {

    var localctx = new Operator_characterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CadenceParser.RULE_operator_character);
    try {
        this.state = 584;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
            this.enterOuterAlt(localctx, 1);
            this.state = 582;
            this.operator_head();
            break;
        case CadenceParser.Operator_following_character:
            this.enterOuterAlt(localctx, 2);
            this.state = 583;
            this.match(CadenceParser.Operator_following_character);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Operator_charactersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_operator_characters;
    return this;
}

Operator_charactersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Operator_charactersContext.prototype.constructor = Operator_charactersContext;

Operator_charactersContext.prototype.operator_character = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Operator_characterContext);
    } else {
        return this.getTypedRuleContext(Operator_characterContext,i);
    }
};

Operator_charactersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterOperator_characters(this);
	}
};

Operator_charactersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitOperator_characters(this);
	}
};




CadenceParser.Operator_charactersContext = Operator_charactersContext;

CadenceParser.prototype.operator_characters = function() {

    var localctx = new Operator_charactersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CadenceParser.RULE_operator_characters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 586;
        		if (!( _input.get(_input.index()-1).getType()!=WS)) {
        		    throw new antlr4.error.FailedPredicateException(this, "_input.get(_input.index()-1).getType()!=WS");
        		}
        		this.state = 587;
        		this.operator_character();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 590; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,45, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dot_operator_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dot_operator_head;
    return this;
}

Dot_operator_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dot_operator_headContext.prototype.constructor = Dot_operator_headContext;

Dot_operator_headContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Dot_operator_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDot_operator_head(this);
	}
};

Dot_operator_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDot_operator_head(this);
	}
};




CadenceParser.Dot_operator_headContext = Dot_operator_headContext;

CadenceParser.prototype.dot_operator_head = function() {

    var localctx = new Dot_operator_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CadenceParser.RULE_dot_operator_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 592;
        this.match(CadenceParser.DOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dot_operator_characterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dot_operator_character;
    return this;
}

Dot_operator_characterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dot_operator_characterContext.prototype.constructor = Dot_operator_characterContext;

Dot_operator_characterContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Dot_operator_characterContext.prototype.operator_character = function() {
    return this.getTypedRuleContext(Operator_characterContext,0);
};

Dot_operator_characterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDot_operator_character(this);
	}
};

Dot_operator_characterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDot_operator_character(this);
	}
};




CadenceParser.Dot_operator_characterContext = Dot_operator_characterContext;

CadenceParser.prototype.dot_operator_character = function() {

    var localctx = new Dot_operator_characterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CadenceParser.RULE_dot_operator_character);
    try {
        this.state = 596;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.DOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 594;
            this.match(CadenceParser.DOT);
            break;
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
        case CadenceParser.Operator_following_character:
            this.enterOuterAlt(localctx, 2);
            this.state = 595;
            this.operator_character();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dot_operator_charactersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dot_operator_characters;
    return this;
}

Dot_operator_charactersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dot_operator_charactersContext.prototype.constructor = Dot_operator_charactersContext;

Dot_operator_charactersContext.prototype.dot_operator_character = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dot_operator_characterContext);
    } else {
        return this.getTypedRuleContext(Dot_operator_characterContext,i);
    }
};

Dot_operator_charactersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDot_operator_characters(this);
	}
};

Dot_operator_charactersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDot_operator_characters(this);
	}
};




CadenceParser.Dot_operator_charactersContext = Dot_operator_charactersContext;

CadenceParser.prototype.dot_operator_characters = function() {

    var localctx = new Dot_operator_charactersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CadenceParser.RULE_dot_operator_characters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 600; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 598;
        		if (!( _input.get(_input.index()-1).getType()!=WS)) {
        		    throw new antlr4.error.FailedPredicateException(this, "_input.get(_input.index()-1).getType()!=WS");
        		}
        		this.state = 599;
        		this.dot_operator_character();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 602; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,47, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.contract_declaration = function() {
    return this.getTypedRuleContext(Contract_declarationContext,0);
};

DeclarationContext.prototype.resource_interface_declaration = function() {
    return this.getTypedRuleContext(Resource_interface_declarationContext,0);
};

DeclarationContext.prototype.resource_implementation_declaration = function() {
    return this.getTypedRuleContext(Resource_implementation_declarationContext,0);
};

DeclarationContext.prototype.struct_interface_declaration = function() {
    return this.getTypedRuleContext(Struct_interface_declarationContext,0);
};

DeclarationContext.prototype.struct_implementation_declaration = function() {
    return this.getTypedRuleContext(Struct_implementation_declarationContext,0);
};

DeclarationContext.prototype.constant_declaration = function() {
    return this.getTypedRuleContext(Constant_declarationContext,0);
};

DeclarationContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

DeclarationContext.prototype.event_declaration = function() {
    return this.getTypedRuleContext(Event_declarationContext,0);
};

DeclarationContext.prototype.function_declaration = function() {
    return this.getTypedRuleContext(Function_declarationContext,0);
};

DeclarationContext.prototype.phase_declaration = function() {
    return this.getTypedRuleContext(Phase_declarationContext,0);
};

DeclarationContext.prototype.initializer_declaration = function() {
    return this.getTypedRuleContext(Initializer_declarationContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDeclaration(this);
	}
};




CadenceParser.DeclarationContext = DeclarationContext;

CadenceParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CadenceParser.RULE_declaration);
    try {
        this.state = 615;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 604;
            this.contract_declaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 605;
            this.resource_interface_declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 606;
            this.resource_implementation_declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 607;
            this.struct_interface_declaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 608;
            this.struct_implementation_declaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 609;
            this.constant_declaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 610;
            this.variable_declaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 611;
            this.event_declaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 612;
            this.function_declaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 613;
            this.phase_declaration();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 614;
            this.initializer_declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Contract_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_contract_declaration;
    return this;
}

Contract_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Contract_declarationContext.prototype.constructor = Contract_declarationContext;

Contract_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Contract_declarationContext.prototype.CONTRACT = function() {
    return this.getToken(CadenceParser.CONTRACT, 0);
};

Contract_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Contract_declarationContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Contract_declarationContext.prototype.INTERFACE = function() {
    return this.getToken(CadenceParser.INTERFACE, 0);
};

Contract_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterContract_declaration(this);
	}
};

Contract_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitContract_declaration(this);
	}
};




CadenceParser.Contract_declarationContext = Contract_declarationContext;

CadenceParser.prototype.contract_declaration = function() {

    var localctx = new Contract_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CadenceParser.RULE_contract_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.access_level_modifier();
        this.state = 618;
        this.match(CadenceParser.CONTRACT);
        this.state = 620;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.INTERFACE) {
            this.state = 619;
            this.match(CadenceParser.INTERFACE);
        }

        this.state = 622;
        this.identifier();
        this.state = 623;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_interface_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_resource_interface_declaration;
    return this;
}

Resource_interface_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_interface_declarationContext.prototype.constructor = Resource_interface_declarationContext;

Resource_interface_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Resource_interface_declarationContext.prototype.RESOURCE = function() {
    return this.getToken(CadenceParser.RESOURCE, 0);
};

Resource_interface_declarationContext.prototype.INTERFACE = function() {
    return this.getToken(CadenceParser.INTERFACE, 0);
};

Resource_interface_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Resource_interface_declarationContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Resource_interface_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterResource_interface_declaration(this);
	}
};

Resource_interface_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitResource_interface_declaration(this);
	}
};




CadenceParser.Resource_interface_declarationContext = Resource_interface_declarationContext;

CadenceParser.prototype.resource_interface_declaration = function() {

    var localctx = new Resource_interface_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CadenceParser.RULE_resource_interface_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 625;
        this.access_level_modifier();
        this.state = 626;
        this.match(CadenceParser.RESOURCE);
        this.state = 627;
        this.match(CadenceParser.INTERFACE);
        this.state = 628;
        this.identifier();
        this.state = 629;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_implementation_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_resource_implementation_declaration;
    return this;
}

Resource_implementation_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_implementation_declarationContext.prototype.constructor = Resource_implementation_declarationContext;

Resource_implementation_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Resource_implementation_declarationContext.prototype.RESOURCE = function() {
    return this.getToken(CadenceParser.RESOURCE, 0);
};

Resource_implementation_declarationContext.prototype.resource_implementation_definition = function() {
    return this.getTypedRuleContext(Resource_implementation_definitionContext,0);
};

Resource_implementation_declarationContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Resource_implementation_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterResource_implementation_declaration(this);
	}
};

Resource_implementation_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitResource_implementation_declaration(this);
	}
};




CadenceParser.Resource_implementation_declarationContext = Resource_implementation_declarationContext;

CadenceParser.prototype.resource_implementation_declaration = function() {

    var localctx = new Resource_implementation_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CadenceParser.RULE_resource_implementation_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this.access_level_modifier();
        this.state = 632;
        this.match(CadenceParser.RESOURCE);
        this.state = 633;
        this.resource_implementation_definition();
        this.state = 634;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_implementation_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_resource_implementation_definition;
    return this;
}

Resource_implementation_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_implementation_definitionContext.prototype.constructor = Resource_implementation_definitionContext;

Resource_implementation_definitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Resource_implementation_definitionContext.prototype.composite_types = function() {
    return this.getTypedRuleContext(Composite_typesContext,0);
};

Resource_implementation_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterResource_implementation_definition(this);
	}
};

Resource_implementation_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitResource_implementation_definition(this);
	}
};




CadenceParser.Resource_implementation_definitionContext = Resource_implementation_definitionContext;

CadenceParser.prototype.resource_implementation_definition = function() {

    var localctx = new Resource_implementation_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CadenceParser.RULE_resource_implementation_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 636;
        this.identifier();
        this.state = 637;
        this.composite_types();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Struct_interface_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_struct_interface_declaration;
    return this;
}

Struct_interface_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_interface_declarationContext.prototype.constructor = Struct_interface_declarationContext;

Struct_interface_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Struct_interface_declarationContext.prototype.STRUCT = function() {
    return this.getToken(CadenceParser.STRUCT, 0);
};

Struct_interface_declarationContext.prototype.INTERFACE = function() {
    return this.getToken(CadenceParser.INTERFACE, 0);
};

Struct_interface_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Struct_interface_declarationContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Struct_interface_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStruct_interface_declaration(this);
	}
};

Struct_interface_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStruct_interface_declaration(this);
	}
};




CadenceParser.Struct_interface_declarationContext = Struct_interface_declarationContext;

CadenceParser.prototype.struct_interface_declaration = function() {

    var localctx = new Struct_interface_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CadenceParser.RULE_struct_interface_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.access_level_modifier();
        this.state = 640;
        this.match(CadenceParser.STRUCT);
        this.state = 641;
        this.match(CadenceParser.INTERFACE);
        this.state = 642;
        this.identifier();
        this.state = 643;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Struct_implementation_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_struct_implementation_declaration;
    return this;
}

Struct_implementation_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Struct_implementation_declarationContext.prototype.constructor = Struct_implementation_declarationContext;

Struct_implementation_declarationContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Struct_implementation_declarationContext.prototype.STRUCT = function() {
    return this.getToken(CadenceParser.STRUCT, 0);
};

Struct_implementation_declarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Struct_implementation_declarationContext.prototype.composite_types = function() {
    return this.getTypedRuleContext(Composite_typesContext,0);
};

Struct_implementation_declarationContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Struct_implementation_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStruct_implementation_declaration(this);
	}
};

Struct_implementation_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStruct_implementation_declaration(this);
	}
};




CadenceParser.Struct_implementation_declarationContext = Struct_implementation_declarationContext;

CadenceParser.prototype.struct_implementation_declaration = function() {

    var localctx = new Struct_implementation_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CadenceParser.RULE_struct_implementation_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 645;
        this.access_level_modifier();
        this.state = 646;
        this.match(CadenceParser.STRUCT);
        this.state = 647;
        this.identifier();
        this.state = 648;
        this.composite_types();
        this.state = 649;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Constant_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_constant_declaration;
    return this;
}

Constant_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_declarationContext.prototype.constructor = Constant_declarationContext;

Constant_declarationContext.prototype.LET = function() {
    return this.getToken(CadenceParser.LET, 0);
};

Constant_declarationContext.prototype.pattern_initializer_list = function() {
    return this.getTypedRuleContext(Pattern_initializer_listContext,0);
};

Constant_declarationContext.prototype.declaration_modifiers = function() {
    return this.getTypedRuleContext(Declaration_modifiersContext,0);
};

Constant_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterConstant_declaration(this);
	}
};

Constant_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitConstant_declaration(this);
	}
};




CadenceParser.Constant_declarationContext = Constant_declarationContext;

CadenceParser.prototype.constant_declaration = function() {

    var localctx = new Constant_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CadenceParser.RULE_constant_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.ACCESS || _la===CadenceParser.PRIVATE || _la===CadenceParser.PUBLIC) {
            this.state = 651;
            this.declaration_modifiers();
        }

        this.state = 654;
        this.match(CadenceParser.LET);
        this.state = 655;
        this.pattern_initializer_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_declaration;
    return this;
}

Function_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_declarationContext.prototype.constructor = Function_declarationContext;

Function_declarationContext.prototype.function_head = function() {
    return this.getTypedRuleContext(Function_headContext,0);
};

Function_declarationContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Function_declarationContext.prototype.function_signature = function() {
    return this.getTypedRuleContext(Function_signatureContext,0);
};

Function_declarationContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Function_declarationContext.prototype.function_body = function() {
    return this.getTypedRuleContext(Function_bodyContext,0);
};

Function_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_declaration(this);
	}
};

Function_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_declaration(this);
	}
};




CadenceParser.Function_declarationContext = Function_declarationContext;

CadenceParser.prototype.function_declaration = function() {

    var localctx = new Function_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CadenceParser.RULE_function_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 657;
        this.function_head();
        this.state = 658;
        this.function_name();
        this.state = 660;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 659;
            this.generic_parameter_clause();
        }

        this.state = 662;
        this.function_signature();
        this.state = 664;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 663;
            this.function_body();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Phase_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_phase_declaration;
    return this;
}

Phase_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Phase_declarationContext.prototype.constructor = Phase_declarationContext;

Phase_declarationContext.prototype.pre_phase_head = function() {
    return this.getTypedRuleContext(Pre_phase_headContext,0);
};

Phase_declarationContext.prototype.execute_phase_head = function() {
    return this.getTypedRuleContext(Execute_phase_headContext,0);
};

Phase_declarationContext.prototype.post_phase_head = function() {
    return this.getTypedRuleContext(Post_phase_headContext,0);
};

Phase_declarationContext.prototype.transaction_phase_head = function() {
    return this.getTypedRuleContext(Transaction_phase_headContext,0);
};

Phase_declarationContext.prototype.prepare_phase_head = function() {
    return this.getTypedRuleContext(Prepare_phase_headContext,0);
};

Phase_declarationContext.prototype.function_body = function() {
    return this.getTypedRuleContext(Function_bodyContext,0);
};

Phase_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPhase_declaration(this);
	}
};

Phase_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPhase_declaration(this);
	}
};




CadenceParser.Phase_declarationContext = Phase_declarationContext;

CadenceParser.prototype.phase_declaration = function() {

    var localctx = new Phase_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CadenceParser.RULE_phase_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.PRE:
            this.state = 666;
            this.pre_phase_head();
            break;
        case CadenceParser.EXECUTE:
            this.state = 667;
            this.execute_phase_head();
            break;
        case CadenceParser.POST:
            this.state = 668;
            this.post_phase_head();
            break;
        case CadenceParser.TRANSACTION:
            this.state = 669;
            this.transaction_phase_head();
            break;
        case CadenceParser.PREPARE:
            this.state = 670;
            this.prepare_phase_head();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 674;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        if(la_===1) {
            this.state = 673;
            this.function_body();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pre_phase_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_pre_phase_head;
    return this;
}

Pre_phase_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pre_phase_headContext.prototype.constructor = Pre_phase_headContext;

Pre_phase_headContext.prototype.PRE = function() {
    return this.getToken(CadenceParser.PRE, 0);
};

Pre_phase_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPre_phase_head(this);
	}
};

Pre_phase_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPre_phase_head(this);
	}
};




CadenceParser.Pre_phase_headContext = Pre_phase_headContext;

CadenceParser.prototype.pre_phase_head = function() {

    var localctx = new Pre_phase_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CadenceParser.RULE_pre_phase_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 676;
        this.match(CadenceParser.PRE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Execute_phase_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_execute_phase_head;
    return this;
}

Execute_phase_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Execute_phase_headContext.prototype.constructor = Execute_phase_headContext;

Execute_phase_headContext.prototype.EXECUTE = function() {
    return this.getToken(CadenceParser.EXECUTE, 0);
};

Execute_phase_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterExecute_phase_head(this);
	}
};

Execute_phase_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitExecute_phase_head(this);
	}
};




CadenceParser.Execute_phase_headContext = Execute_phase_headContext;

CadenceParser.prototype.execute_phase_head = function() {

    var localctx = new Execute_phase_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CadenceParser.RULE_execute_phase_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this.match(CadenceParser.EXECUTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Post_phase_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_post_phase_head;
    return this;
}

Post_phase_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Post_phase_headContext.prototype.constructor = Post_phase_headContext;

Post_phase_headContext.prototype.POST = function() {
    return this.getToken(CadenceParser.POST, 0);
};

Post_phase_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPost_phase_head(this);
	}
};

Post_phase_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPost_phase_head(this);
	}
};




CadenceParser.Post_phase_headContext = Post_phase_headContext;

CadenceParser.prototype.post_phase_head = function() {

    var localctx = new Post_phase_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CadenceParser.RULE_post_phase_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 680;
        this.match(CadenceParser.POST);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Transaction_phase_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_transaction_phase_head;
    return this;
}

Transaction_phase_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_phase_headContext.prototype.constructor = Transaction_phase_headContext;

Transaction_phase_headContext.prototype.TRANSACTION = function() {
    return this.getToken(CadenceParser.TRANSACTION, 0);
};

Transaction_phase_headContext.prototype.function_signature = function() {
    return this.getTypedRuleContext(Function_signatureContext,0);
};

Transaction_phase_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTransaction_phase_head(this);
	}
};

Transaction_phase_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTransaction_phase_head(this);
	}
};




CadenceParser.Transaction_phase_headContext = Transaction_phase_headContext;

CadenceParser.prototype.transaction_phase_head = function() {

    var localctx = new Transaction_phase_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CadenceParser.RULE_transaction_phase_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 682;
        this.match(CadenceParser.TRANSACTION);
        this.state = 683;
        this.function_signature();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Prepare_phase_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_prepare_phase_head;
    return this;
}

Prepare_phase_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Prepare_phase_headContext.prototype.constructor = Prepare_phase_headContext;

Prepare_phase_headContext.prototype.PREPARE = function() {
    return this.getToken(CadenceParser.PREPARE, 0);
};

Prepare_phase_headContext.prototype.function_signature = function() {
    return this.getTypedRuleContext(Function_signatureContext,0);
};

Prepare_phase_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPrepare_phase_head(this);
	}
};

Prepare_phase_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPrepare_phase_head(this);
	}
};




CadenceParser.Prepare_phase_headContext = Prepare_phase_headContext;

CadenceParser.prototype.prepare_phase_head = function() {

    var localctx = new Prepare_phase_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CadenceParser.RULE_prepare_phase_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this.match(CadenceParser.PREPARE);
        this.state = 686;
        this.function_signature();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_variable_declaration;
    return this;
}

Variable_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declarationContext.prototype.constructor = Variable_declarationContext;

Variable_declarationContext.prototype.variable_declaration_head = function() {
    return this.getTypedRuleContext(Variable_declaration_headContext,0);
};

Variable_declarationContext.prototype.variable_body = function() {
    return this.getTypedRuleContext(Variable_bodyContext,0);
};

Variable_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterVariable_declaration(this);
	}
};

Variable_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitVariable_declaration(this);
	}
};




CadenceParser.Variable_declarationContext = Variable_declarationContext;

CadenceParser.prototype.variable_declaration = function() {

    var localctx = new Variable_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CadenceParser.RULE_variable_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 688;
        this.variable_declaration_head();
        this.state = 689;
        this.variable_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_declaration_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_variable_declaration_head;
    return this;
}

Variable_declaration_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_declaration_headContext.prototype.constructor = Variable_declaration_headContext;

Variable_declaration_headContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Variable_declaration_headContext.prototype.LET = function() {
    return this.getToken(CadenceParser.LET, 0);
};

Variable_declaration_headContext.prototype.VAR = function() {
    return this.getToken(CadenceParser.VAR, 0);
};

Variable_declaration_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterVariable_declaration_head(this);
	}
};

Variable_declaration_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitVariable_declaration_head(this);
	}
};




CadenceParser.Variable_declaration_headContext = Variable_declaration_headContext;

CadenceParser.prototype.variable_declaration_head = function() {

    var localctx = new Variable_declaration_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CadenceParser.RULE_variable_declaration_head);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 691;
        this.access_level_modifier();
        this.state = 692;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.LET || _la===CadenceParser.VAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_variable_body;
    return this;
}

Variable_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_bodyContext.prototype.constructor = Variable_bodyContext;

Variable_bodyContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Variable_bodyContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

Variable_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterVariable_body(this);
	}
};

Variable_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitVariable_body(this);
	}
};




CadenceParser.Variable_bodyContext = Variable_bodyContext;

CadenceParser.prototype.variable_body = function() {

    var localctx = new Variable_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CadenceParser.RULE_variable_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 694;
        this.variable_name();
        this.state = 696;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 695;
            this.type_annotation();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_event_declaration;
    return this;
}

Event_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_declarationContext.prototype.constructor = Event_declarationContext;

Event_declarationContext.prototype.event_declaration_head = function() {
    return this.getTypedRuleContext(Event_declaration_headContext,0);
};

Event_declarationContext.prototype.event_body = function() {
    return this.getTypedRuleContext(Event_bodyContext,0);
};

Event_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterEvent_declaration(this);
	}
};

Event_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitEvent_declaration(this);
	}
};




CadenceParser.Event_declarationContext = Event_declarationContext;

CadenceParser.prototype.event_declaration = function() {

    var localctx = new Event_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CadenceParser.RULE_event_declaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        this.event_declaration_head();
        this.state = 699;
        this.event_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_declaration_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_event_declaration_head;
    return this;
}

Event_declaration_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_declaration_headContext.prototype.constructor = Event_declaration_headContext;

Event_declaration_headContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Event_declaration_headContext.prototype.EVENT = function() {
    return this.getToken(CadenceParser.EVENT, 0);
};

Event_declaration_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterEvent_declaration_head(this);
	}
};

Event_declaration_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitEvent_declaration_head(this);
	}
};




CadenceParser.Event_declaration_headContext = Event_declaration_headContext;

CadenceParser.prototype.event_declaration_head = function() {

    var localctx = new Event_declaration_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CadenceParser.RULE_event_declaration_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 701;
        this.access_level_modifier();

        this.state = 702;
        this.match(CadenceParser.EVENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Event_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_event_body;
    return this;
}

Event_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_bodyContext.prototype.constructor = Event_bodyContext;

Event_bodyContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Event_bodyContext.prototype.parameter_clause = function() {
    return this.getTypedRuleContext(Parameter_clauseContext,0);
};

Event_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterEvent_body(this);
	}
};

Event_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitEvent_body(this);
	}
};




CadenceParser.Event_bodyContext = Event_bodyContext;

CadenceParser.prototype.event_body = function() {

    var localctx = new Event_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CadenceParser.RULE_event_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.variable_name();
        this.state = 705;
        this.parameter_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Declaration_modifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_declaration_modifier;
    return this;
}

Declaration_modifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_modifierContext.prototype.constructor = Declaration_modifierContext;

Declaration_modifierContext.prototype.access_level_modifier = function() {
    return this.getTypedRuleContext(Access_level_modifierContext,0);
};

Declaration_modifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDeclaration_modifier(this);
	}
};

Declaration_modifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDeclaration_modifier(this);
	}
};




CadenceParser.Declaration_modifierContext = Declaration_modifierContext;

CadenceParser.prototype.declaration_modifier = function() {

    var localctx = new Declaration_modifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CadenceParser.RULE_declaration_modifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 707;
        this.access_level_modifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Declaration_modifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_declaration_modifiers;
    return this;
}

Declaration_modifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declaration_modifiersContext.prototype.constructor = Declaration_modifiersContext;

Declaration_modifiersContext.prototype.declaration_modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declaration_modifierContext);
    } else {
        return this.getTypedRuleContext(Declaration_modifierContext,i);
    }
};

Declaration_modifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDeclaration_modifiers(this);
	}
};

Declaration_modifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDeclaration_modifiers(this);
	}
};




CadenceParser.Declaration_modifiersContext = Declaration_modifiersContext;

CadenceParser.prototype.declaration_modifiers = function() {

    var localctx = new Declaration_modifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CadenceParser.RULE_declaration_modifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 710; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 709;
            this.declaration_modifier();
            this.state = 712; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===CadenceParser.ACCESS || _la===CadenceParser.PRIVATE || _la===CadenceParser.PUBLIC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_declarations;
    return this;
}

DeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationsContext.prototype.constructor = DeclarationsContext;

DeclarationsContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

DeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDeclarations(this);
	}
};

DeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDeclarations(this);
	}
};




CadenceParser.DeclarationsContext = DeclarationsContext;

CadenceParser.prototype.declarations = function() {

    var localctx = new DeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CadenceParser.RULE_declarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 714;
            this.declaration();
            this.state = 717; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.PREPARE) | (1 << CadenceParser.PRE) | (1 << CadenceParser.EXECUTE) | (1 << CadenceParser.POST) | (1 << CadenceParser.TRANSACTION) | (1 << CadenceParser.FUNC))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CadenceParser.PRIVATE - 33)) | (1 << (CadenceParser.PUBLIC - 33)) | (1 << (CadenceParser.LET - 33)) | (1 << (CadenceParser.INIT - 33)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Code_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_code_block;
    return this;
}

Code_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Code_blockContext.prototype.constructor = Code_blockContext;

Code_blockContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Code_blockContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Code_blockContext.prototype.statements = function() {
    return this.getTypedRuleContext(StatementsContext,0);
};

Code_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCode_block(this);
	}
};

Code_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCode_block(this);
	}
};




CadenceParser.Code_blockContext = Code_blockContext;

CadenceParser.prototype.code_block = function() {

    var localctx = new Code_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CadenceParser.RULE_code_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this.match(CadenceParser.LCURLY);
        this.state = 721;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.QUESTION) | (1 << CadenceParser.AT) | (1 << CadenceParser.AND) | (1 << CadenceParser.PREPARE) | (1 << CadenceParser.PRE) | (1 << CadenceParser.EXECUTE) | (1 << CadenceParser.POST) | (1 << CadenceParser.TRANSACTION) | (1 << CadenceParser.AS) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CadenceParser.PRIVATE - 33)) | (1 << (CadenceParser.PUBLIC - 33)) | (1 << (CadenceParser.WHILE - 33)) | (1 << (CadenceParser.LET - 33)) | (1 << (CadenceParser.GET - 33)) | (1 << (CadenceParser.SET - 33)) | (1 << (CadenceParser.RETURN - 33)) | (1 << (CadenceParser.INIT - 33)) | (1 << (CadenceParser.FALSE - 33)) | (1 << (CadenceParser.TRUE - 33)) | (1 << (CadenceParser.NIL - 33)) | (1 << (CadenceParser.SELF - 33)) | (1 << (CadenceParser.FILE - 33)) | (1 << (CadenceParser.LINE - 33)) | (1 << (CadenceParser.Identifier - 33)) | (1 << (CadenceParser.DOT - 33)) | (1 << (CadenceParser.LCURLY - 33)) | (1 << (CadenceParser.LBRACK - 33)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (CadenceParser.LT - 70)) | (1 << (CadenceParser.GT - 70)) | (1 << (CadenceParser.BANG - 70)) | (1 << (CadenceParser.SUB - 70)) | (1 << (CadenceParser.EQUAL - 70)) | (1 << (CadenceParser.OR - 70)) | (1 << (CadenceParser.DIV - 70)) | (1 << (CadenceParser.ADD - 70)) | (1 << (CadenceParser.MUL - 70)) | (1 << (CadenceParser.MOD - 70)) | (1 << (CadenceParser.CARET - 70)) | (1 << (CadenceParser.TILDE - 70)) | (1 << (CadenceParser.Operator_head_other - 70)) | (1 << (CadenceParser.Binary_literal - 70)) | (1 << (CadenceParser.Octal_literal - 70)) | (1 << (CadenceParser.Decimal_digits - 70)) | (1 << (CadenceParser.Decimal_literal - 70)) | (1 << (CadenceParser.Hexadecimal_literal - 70)) | (1 << (CadenceParser.Floating_point_literal - 70)) | (1 << (CadenceParser.Multi_line_extended_string_open - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (CadenceParser.Single_line_extended_string_open - 102)) | (1 << (CadenceParser.Multi_line_string_open - 102)) | (1 << (CadenceParser.Single_line_string_open - 102)))) !== 0)) {
            this.state = 720;
            this.statements();
        }

        this.state = 723;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_head;
    return this;
}

Function_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_headContext.prototype.constructor = Function_headContext;

Function_headContext.prototype.FUNC = function() {
    return this.getToken(CadenceParser.FUNC, 0);
};

Function_headContext.prototype.declaration_modifiers = function() {
    return this.getTypedRuleContext(Declaration_modifiersContext,0);
};

Function_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_head(this);
	}
};

Function_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_head(this);
	}
};




CadenceParser.Function_headContext = Function_headContext;

CadenceParser.prototype.function_head = function() {

    var localctx = new Function_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CadenceParser.RULE_function_head);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.ACCESS || _la===CadenceParser.PRIVATE || _la===CadenceParser.PUBLIC) {
            this.state = 725;
            this.declaration_modifiers();
        }

        this.state = 728;
        this.match(CadenceParser.FUNC);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Function_nameContext.prototype.operator = function() {
    return this.getTypedRuleContext(OperatorContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_name(this);
	}
};




CadenceParser.Function_nameContext = Function_nameContext;

CadenceParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CadenceParser.RULE_function_name);
    try {
        this.state = 732;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.AS:
        case CadenceParser.DEFAULT:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHILE:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.SELF:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 730;
            this.identifier();
            break;
        case CadenceParser.QUESTION:
        case CadenceParser.AND:
        case CadenceParser.DOT:
        case CadenceParser.LT:
        case CadenceParser.GT:
        case CadenceParser.BANG:
        case CadenceParser.SUB:
        case CadenceParser.EQUAL:
        case CadenceParser.OR:
        case CadenceParser.DIV:
        case CadenceParser.ADD:
        case CadenceParser.MUL:
        case CadenceParser.MOD:
        case CadenceParser.CARET:
        case CadenceParser.TILDE:
        case CadenceParser.Operator_head_other:
            this.enterOuterAlt(localctx, 2);
            this.state = 731;
            this.operator();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_signatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_signature;
    return this;
}

Function_signatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_signatureContext.prototype.constructor = Function_signatureContext;

Function_signatureContext.prototype.parameter_clause = function() {
    return this.getTypedRuleContext(Parameter_clauseContext,0);
};

Function_signatureContext.prototype.function_result = function() {
    return this.getTypedRuleContext(Function_resultContext,0);
};

Function_signatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_signature(this);
	}
};

Function_signatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_signature(this);
	}
};




CadenceParser.Function_signatureContext = Function_signatureContext;

CadenceParser.prototype.function_signature = function() {

    var localctx = new Function_signatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CadenceParser.RULE_function_signature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 734;
        this.parameter_clause();
        this.state = 736;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 735;
            this.function_result();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_resultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_result;
    return this;
}

Function_resultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_resultContext.prototype.constructor = Function_resultContext;

Function_resultContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

Function_resultContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_result(this);
	}
};

Function_resultContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_result(this);
	}
};




CadenceParser.Function_resultContext = Function_resultContext;

CadenceParser.prototype.function_result = function() {

    var localctx = new Function_resultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CadenceParser.RULE_function_result);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 738;
        this.type_annotation();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_body;
    return this;
}

Function_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_bodyContext.prototype.constructor = Function_bodyContext;

Function_bodyContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Function_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_body(this);
	}
};

Function_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_body(this);
	}
};




CadenceParser.Function_bodyContext = Function_bodyContext;

CadenceParser.prototype.function_body = function() {

    var localctx = new Function_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CadenceParser.RULE_function_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 740;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_type_argument_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_type_argument_clause;
    return this;
}

Function_type_argument_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_type_argument_clauseContext.prototype.constructor = Function_type_argument_clauseContext;

Function_type_argument_clauseContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Function_type_argument_clauseContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Function_type_argument_clauseContext.prototype.function_type_argument_list = function() {
    return this.getTypedRuleContext(Function_type_argument_listContext,0);
};

Function_type_argument_clauseContext.prototype.range_operator = function() {
    return this.getTypedRuleContext(Range_operatorContext,0);
};

Function_type_argument_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_type_argument_clause(this);
	}
};

Function_type_argument_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_type_argument_clause(this);
	}
};




CadenceParser.Function_type_argument_clauseContext = Function_type_argument_clauseContext;

CadenceParser.prototype.function_type_argument_clause = function() {

    var localctx = new Function_type_argument_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CadenceParser.RULE_function_type_argument_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 742;
        this.match(CadenceParser.LPAREN);
        this.state = 747;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.STRING_TYPE) | (1 << CadenceParser.UINT64_TYPE) | (1 << CadenceParser.ADDRESS) | (1 << CadenceParser.TYPE) | (1 << CadenceParser.ANY_STRUCT) | (1 << CadenceParser.AT) | (1 << CadenceParser.AND) | (1 << CadenceParser.AS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CadenceParser.PRIVATE - 33)) | (1 << (CadenceParser.PUBLIC - 33)) | (1 << (CadenceParser.WHILE - 33)) | (1 << (CadenceParser.GET - 33)) | (1 << (CadenceParser.SET - 33)) | (1 << (CadenceParser.ANY - 33)) | (1 << (CadenceParser.SELF - 33)) | (1 << (CadenceParser.FILE - 33)) | (1 << (CadenceParser.LINE - 33)) | (1 << (CadenceParser.Identifier - 33)) | (1 << (CadenceParser.LCURLY - 33)) | (1 << (CadenceParser.LPAREN - 33)) | (1 << (CadenceParser.LBRACK - 33)))) !== 0)) {
            this.state = 743;
            this.function_type_argument_list();
            this.state = 745;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CadenceParser.DOT) {
                this.state = 744;
                this.range_operator();
            }

        }

        this.state = 749;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_type_argument_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_type_argument_list;
    return this;
}

Function_type_argument_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_type_argument_listContext.prototype.constructor = Function_type_argument_listContext;

Function_type_argument_listContext.prototype.function_type_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_type_argumentContext);
    } else {
        return this.getTypedRuleContext(Function_type_argumentContext,i);
    }
};

Function_type_argument_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Function_type_argument_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_type_argument_list(this);
	}
};

Function_type_argument_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_type_argument_list(this);
	}
};




CadenceParser.Function_type_argument_listContext = Function_type_argument_listContext;

CadenceParser.prototype.function_type_argument_list = function() {

    var localctx = new Function_type_argument_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CadenceParser.RULE_function_type_argument_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 751;
        this.function_type_argument();
        this.state = 756;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 752;
            this.match(CadenceParser.COMMA);
            this.state = 753;
            this.function_type_argument();
            this.state = 758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_type_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_type_argument;
    return this;
}

Function_type_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_type_argumentContext.prototype.constructor = Function_type_argumentContext;

Function_type_argumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Function_type_argumentContext.prototype.argument_label = function() {
    return this.getTypedRuleContext(Argument_labelContext,0);
};

Function_type_argumentContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

Function_type_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_type_argument(this);
	}
};

Function_type_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_type_argument(this);
	}
};




CadenceParser.Function_type_argumentContext = Function_type_argumentContext;

CadenceParser.prototype.function_type_argument = function() {

    var localctx = new Function_type_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CadenceParser.RULE_function_type_argument);
    try {
        this.state = 763;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 759;
            this.type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 760;
            this.argument_label();
            this.state = 761;
            this.type_annotation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Argument_labelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_argument_label;
    return this;
}

Argument_labelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Argument_labelContext.prototype.constructor = Argument_labelContext;

Argument_labelContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

Argument_labelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArgument_label(this);
	}
};

Argument_labelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArgument_label(this);
	}
};




CadenceParser.Argument_labelContext = Argument_labelContext;

CadenceParser.prototype.argument_label = function() {

    var localctx = new Argument_labelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CadenceParser.RULE_argument_label);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 766; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 765;
            this.identifier();
            this.state = 768; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CadenceParser.PRIVATE - 33)) | (1 << (CadenceParser.PUBLIC - 33)) | (1 << (CadenceParser.WHILE - 33)) | (1 << (CadenceParser.GET - 33)) | (1 << (CadenceParser.SET - 33)) | (1 << (CadenceParser.SELF - 33)) | (1 << (CadenceParser.FILE - 33)) | (1 << (CadenceParser.LINE - 33)) | (1 << (CadenceParser.Identifier - 33)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Access_level_modifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_access_level_modifier;
    return this;
}

Access_level_modifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Access_level_modifierContext.prototype.constructor = Access_level_modifierContext;

Access_level_modifierContext.prototype.ACCESS = function() {
    return this.getToken(CadenceParser.ACCESS, 0);
};

Access_level_modifierContext.prototype.PRIVATE = function() {
    return this.getToken(CadenceParser.PRIVATE, 0);
};

Access_level_modifierContext.prototype.PUBLIC = function() {
    return this.getToken(CadenceParser.PUBLIC, 0);
};

Access_level_modifierContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Access_level_modifierContext.prototype.SET = function() {
    return this.getToken(CadenceParser.SET, 0);
};

Access_level_modifierContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Access_level_modifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterAccess_level_modifier(this);
	}
};

Access_level_modifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitAccess_level_modifier(this);
	}
};




CadenceParser.Access_level_modifierContext = Access_level_modifierContext;

CadenceParser.prototype.access_level_modifier = function() {

    var localctx = new Access_level_modifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CadenceParser.RULE_access_level_modifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 770;
        _la = this._input.LA(1);
        if(!(_la===CadenceParser.ACCESS || _la===CadenceParser.PRIVATE || _la===CadenceParser.PUBLIC)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 774;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LPAREN) {
            this.state = 771;
            this.match(CadenceParser.LPAREN);
            this.state = 772;
            this.match(CadenceParser.SET);
            this.state = 773;
            this.match(CadenceParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

StatementContext.prototype.assignment_statement = function() {
    return this.getTypedRuleContext(Assignment_statementContext,0);
};

StatementContext.prototype.check_statement = function() {
    return this.getTypedRuleContext(Check_statementContext,0);
};

StatementContext.prototype.control_transfer_statement = function() {
    return this.getTypedRuleContext(Control_transfer_statementContext,0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.SEMI = function() {
    return this.getToken(CadenceParser.SEMI, 0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStatement(this);
	}
};




CadenceParser.StatementContext = StatementContext;

CadenceParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CadenceParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 781;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.state = 776;
            this.declaration();
            break;

        case 2:
            this.state = 777;
            this.assignment_statement();
            break;

        case 3:
            this.state = 778;
            this.check_statement();
            break;

        case 4:
            this.state = 779;
            this.control_transfer_statement();
            break;

        case 5:
            this.state = 780;
            this.expression();
            break;

        }
        this.state = 784;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.SEMI) {
            this.state = 783;
            this.match(CadenceParser.SEMI);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitStatements(this);
	}
};




CadenceParser.StatementsContext = StatementsContext;

CadenceParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CadenceParser.RULE_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 787; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 786;
            this.statement();
            this.state = 789; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.ACCESS) | (1 << CadenceParser.QUESTION) | (1 << CadenceParser.AT) | (1 << CadenceParser.AND) | (1 << CadenceParser.PREPARE) | (1 << CadenceParser.PRE) | (1 << CadenceParser.EXECUTE) | (1 << CadenceParser.POST) | (1 << CadenceParser.TRANSACTION) | (1 << CadenceParser.AS) | (1 << CadenceParser.BREAK) | (1 << CadenceParser.CONTINUE) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.FOR) | (1 << CadenceParser.FUNC) | (1 << CadenceParser.IN))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CadenceParser.PRIVATE - 33)) | (1 << (CadenceParser.PUBLIC - 33)) | (1 << (CadenceParser.WHILE - 33)) | (1 << (CadenceParser.LET - 33)) | (1 << (CadenceParser.GET - 33)) | (1 << (CadenceParser.SET - 33)) | (1 << (CadenceParser.RETURN - 33)) | (1 << (CadenceParser.INIT - 33)) | (1 << (CadenceParser.FALSE - 33)) | (1 << (CadenceParser.TRUE - 33)) | (1 << (CadenceParser.NIL - 33)) | (1 << (CadenceParser.SELF - 33)) | (1 << (CadenceParser.FILE - 33)) | (1 << (CadenceParser.LINE - 33)) | (1 << (CadenceParser.Identifier - 33)) | (1 << (CadenceParser.DOT - 33)) | (1 << (CadenceParser.LCURLY - 33)) | (1 << (CadenceParser.LBRACK - 33)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (CadenceParser.LT - 70)) | (1 << (CadenceParser.GT - 70)) | (1 << (CadenceParser.BANG - 70)) | (1 << (CadenceParser.SUB - 70)) | (1 << (CadenceParser.EQUAL - 70)) | (1 << (CadenceParser.OR - 70)) | (1 << (CadenceParser.DIV - 70)) | (1 << (CadenceParser.ADD - 70)) | (1 << (CadenceParser.MUL - 70)) | (1 << (CadenceParser.MOD - 70)) | (1 << (CadenceParser.CARET - 70)) | (1 << (CadenceParser.TILDE - 70)) | (1 << (CadenceParser.Operator_head_other - 70)) | (1 << (CadenceParser.Binary_literal - 70)) | (1 << (CadenceParser.Octal_literal - 70)) | (1 << (CadenceParser.Decimal_digits - 70)) | (1 << (CadenceParser.Decimal_literal - 70)) | (1 << (CadenceParser.Hexadecimal_literal - 70)) | (1 << (CadenceParser.Floating_point_literal - 70)) | (1 << (CadenceParser.Multi_line_extended_string_open - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (CadenceParser.Single_line_extended_string_open - 102)) | (1 << (CadenceParser.Multi_line_string_open - 102)) | (1 << (CadenceParser.Single_line_string_open - 102)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Assignment_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_assignment_statement;
    return this;
}

Assignment_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_statementContext.prototype.constructor = Assignment_statementContext;

Assignment_statementContext.prototype.assignment_operator = function() {
    return this.getTypedRuleContext(Assignment_operatorContext,0);
};

Assignment_statementContext.prototype.variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableContext);
    } else {
        return this.getTypedRuleContext(VariableContext,i);
    }
};

Assignment_statementContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Assignment_statementContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Assignment_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterAssignment_statement(this);
	}
};

Assignment_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitAssignment_statement(this);
	}
};




CadenceParser.Assignment_statementContext = Assignment_statementContext;

CadenceParser.prototype.assignment_statement = function() {

    var localctx = new Assignment_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CadenceParser.RULE_assignment_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 793;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.state = 791;
            this.variable();
            break;

        case 2:
            this.state = 792;
            this.variable_declaration();
            break;

        }
        this.state = 795;
        this.assignment_operator();
        this.state = 798;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.state = 796;
            this.variable();
            break;

        case 2:
            this.state = 797;
            this.literal_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Check_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_check_statement;
    return this;
}

Check_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Check_statementContext.prototype.constructor = Check_statementContext;

Check_statementContext.prototype.check_statement_conditions = function() {
    return this.getTypedRuleContext(Check_statement_conditionsContext,0);
};

Check_statementContext.prototype.check_statement_message = function() {
    return this.getTypedRuleContext(Check_statement_messageContext,0);
};

Check_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCheck_statement(this);
	}
};

Check_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCheck_statement(this);
	}
};




CadenceParser.Check_statementContext = Check_statementContext;

CadenceParser.prototype.check_statement = function() {

    var localctx = new Check_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CadenceParser.RULE_check_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 800;
        this.check_statement_conditions();
        this.state = 802;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 801;
            this.check_statement_message();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Check_statement_conditionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_check_statement_conditions;
    return this;
}

Check_statement_conditionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Check_statement_conditionsContext.prototype.constructor = Check_statement_conditionsContext;

Check_statement_conditionsContext.prototype.variable = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableContext);
    } else {
        return this.getTypedRuleContext(VariableContext,i);
    }
};

Check_statement_conditionsContext.prototype.variable_declaration = function() {
    return this.getTypedRuleContext(Variable_declarationContext,0);
};

Check_statement_conditionsContext.prototype.compilation_condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compilation_conditionContext);
    } else {
        return this.getTypedRuleContext(Compilation_conditionContext,i);
    }
};

Check_statement_conditionsContext.prototype.literal_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Literal_expressionContext);
    } else {
        return this.getTypedRuleContext(Literal_expressionContext,i);
    }
};

Check_statement_conditionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCheck_statement_conditions(this);
	}
};

Check_statement_conditionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCheck_statement_conditions(this);
	}
};




CadenceParser.Check_statement_conditionsContext = Check_statement_conditionsContext;

CadenceParser.prototype.check_statement_conditions = function() {

    var localctx = new Check_statement_conditionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CadenceParser.RULE_check_statement_conditions);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 806;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.state = 804;
            this.variable();
            break;

        case 2:
            this.state = 805;
            this.variable_declaration();
            break;

        }
        this.state = 815;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 808;
                this.compilation_condition();
                this.state = 811;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 809;
                    this.variable();
                    break;

                case 2:
                    this.state = 810;
                    this.literal_expression();
                    break;

                } 
            }
            this.state = 817;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Check_statement_messageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_check_statement_message;
    return this;
}

Check_statement_messageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Check_statement_messageContext.prototype.constructor = Check_statement_messageContext;

Check_statement_messageContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Check_statement_messageContext.prototype.string_literal = function() {
    return this.getTypedRuleContext(String_literalContext,0);
};

Check_statement_messageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterCheck_statement_message(this);
	}
};

Check_statement_messageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitCheck_statement_message(this);
	}
};




CadenceParser.Check_statement_messageContext = Check_statement_messageContext;

CadenceParser.prototype.check_statement_message = function() {

    var localctx = new Check_statement_messageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CadenceParser.RULE_check_statement_message);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this.match(CadenceParser.COLON);
        this.state = 819;
        this.string_literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Control_transfer_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_control_transfer_statement;
    return this;
}

Control_transfer_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Control_transfer_statementContext.prototype.constructor = Control_transfer_statementContext;

Control_transfer_statementContext.prototype.break_statement = function() {
    return this.getTypedRuleContext(Break_statementContext,0);
};

Control_transfer_statementContext.prototype.continue_statement = function() {
    return this.getTypedRuleContext(Continue_statementContext,0);
};

Control_transfer_statementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};

Control_transfer_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterControl_transfer_statement(this);
	}
};

Control_transfer_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitControl_transfer_statement(this);
	}
};




CadenceParser.Control_transfer_statementContext = Control_transfer_statementContext;

CadenceParser.prototype.control_transfer_statement = function() {

    var localctx = new Control_transfer_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CadenceParser.RULE_control_transfer_statement);
    try {
        this.state = 824;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.BREAK:
            this.enterOuterAlt(localctx, 1);
            this.state = 821;
            this.break_statement();
            break;
        case CadenceParser.CONTINUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 822;
            this.continue_statement();
            break;
        case CadenceParser.RETURN:
            this.enterOuterAlt(localctx, 3);
            this.state = 823;
            this.return_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_variable;
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.resource_variable = function() {
    return this.getTypedRuleContext(Resource_variableContext,0);
};

VariableContext.prototype.local_variable = function() {
    return this.getTypedRuleContext(Local_variableContext,0);
};

VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterVariable(this);
	}
};

VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitVariable(this);
	}
};




CadenceParser.VariableContext = VariableContext;

CadenceParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CadenceParser.RULE_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.state = 826;
            this.resource_variable();
            break;

        case 2:
            this.state = 827;
            this.local_variable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Resource_variableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_resource_variable;
    return this;
}

Resource_variableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Resource_variableContext.prototype.constructor = Resource_variableContext;

Resource_variableContext.prototype.self_expression = function() {
    return this.getTypedRuleContext(Self_expressionContext,0);
};

Resource_variableContext.prototype.object_expression = function() {
    return this.getTypedRuleContext(Object_expressionContext,0);
};

Resource_variableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterResource_variable(this);
	}
};

Resource_variableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitResource_variable(this);
	}
};




CadenceParser.Resource_variableContext = Resource_variableContext;

CadenceParser.prototype.resource_variable = function() {

    var localctx = new Resource_variableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CadenceParser.RULE_resource_variable);
    try {
        this.state = 832;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 830;
            this.self_expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 831;
            this.object_expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Local_variableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_local_variable;
    return this;
}

Local_variableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_variableContext.prototype.constructor = Local_variableContext;

Local_variableContext.prototype.variable_name = function() {
    return this.getTypedRuleContext(Variable_nameContext,0);
};

Local_variableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLocal_variable(this);
	}
};

Local_variableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLocal_variable(this);
	}
};




CadenceParser.Local_variableContext = Local_variableContext;

CadenceParser.prototype.local_variable = function() {

    var localctx = new Local_variableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CadenceParser.RULE_local_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 834;
        this.variable_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Variable_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_variable_name;
    return this;
}

Variable_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Variable_nameContext.prototype.constructor = Variable_nameContext;

Variable_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Variable_nameContext.prototype.literal_expression = function() {
    return this.getTypedRuleContext(Literal_expressionContext,0);
};

Variable_nameContext.prototype.BANG = function() {
    return this.getToken(CadenceParser.BANG, 0);
};

Variable_nameContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Variable_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterVariable_name(this);
	}
};

Variable_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitVariable_name(this);
	}
};




CadenceParser.Variable_nameContext = Variable_nameContext;

CadenceParser.prototype.variable_name = function() {

    var localctx = new Variable_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CadenceParser.RULE_variable_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 838;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.AS:
        case CadenceParser.DEFAULT:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHILE:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.SELF:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.Identifier:
            this.state = 836;
            this.identifier();
            break;
        case CadenceParser.FALSE:
        case CadenceParser.TRUE:
        case CadenceParser.NIL:
        case CadenceParser.LBRACK:
        case CadenceParser.SUB:
        case CadenceParser.Binary_literal:
        case CadenceParser.Octal_literal:
        case CadenceParser.Decimal_digits:
        case CadenceParser.Decimal_literal:
        case CadenceParser.Hexadecimal_literal:
        case CadenceParser.Floating_point_literal:
        case CadenceParser.Multi_line_extended_string_open:
        case CadenceParser.Single_line_extended_string_open:
        case CadenceParser.Multi_line_string_open:
        case CadenceParser.Single_line_string_open:
            this.state = 837;
            this.literal_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 841;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        if(la_===1) {
            this.state = 840;
            _la = this._input.LA(1);
            if(!(_la===CadenceParser.QUESTION || _la===CadenceParser.BANG)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.FILE = function() {
    return this.getToken(CadenceParser.FILE, 0);
};

IdentifierContext.prototype.LINE = function() {
    return this.getToken(CadenceParser.LINE, 0);
};

IdentifierContext.prototype.GET = function() {
    return this.getToken(CadenceParser.GET, 0);
};

IdentifierContext.prototype.SET = function() {
    return this.getToken(CadenceParser.SET, 0);
};

IdentifierContext.prototype.IN = function() {
    return this.getToken(CadenceParser.IN, 0);
};

IdentifierContext.prototype.FOR = function() {
    return this.getToken(CadenceParser.FOR, 0);
};

IdentifierContext.prototype.DEFAULT = function() {
    return this.getToken(CadenceParser.DEFAULT, 0);
};

IdentifierContext.prototype.PRIVATE = function() {
    return this.getToken(CadenceParser.PRIVATE, 0);
};

IdentifierContext.prototype.PUBLIC = function() {
    return this.getToken(CadenceParser.PUBLIC, 0);
};

IdentifierContext.prototype.AS = function() {
    return this.getToken(CadenceParser.AS, 0);
};

IdentifierContext.prototype.WHILE = function() {
    return this.getToken(CadenceParser.WHILE, 0);
};

IdentifierContext.prototype.SELF = function() {
    return this.getToken(CadenceParser.SELF, 0);
};

IdentifierContext.prototype.Identifier = function() {
    return this.getToken(CadenceParser.Identifier, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitIdentifier(this);
	}
};




CadenceParser.IdentifierContext = IdentifierContext;

CadenceParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, CadenceParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.state = 845;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.AS:
        case CadenceParser.DEFAULT:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHILE:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.SELF:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
            this.enterOuterAlt(localctx, 1);
            this.state = 843;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CadenceParser.AS) | (1 << CadenceParser.DEFAULT) | (1 << CadenceParser.FOR) | (1 << CadenceParser.IN))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (CadenceParser.PRIVATE - 33)) | (1 << (CadenceParser.PUBLIC - 33)) | (1 << (CadenceParser.WHILE - 33)) | (1 << (CadenceParser.GET - 33)) | (1 << (CadenceParser.SET - 33)) | (1 << (CadenceParser.SELF - 33)) | (1 << (CadenceParser.FILE - 33)) | (1 << (CadenceParser.LINE - 33)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case CadenceParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 844;
            this.match(CadenceParser.Identifier);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_pattern;
    return this;
}

PatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PatternContext.prototype.constructor = PatternContext;

PatternContext.prototype.wildcard_pattern = function() {
    return this.getTypedRuleContext(Wildcard_patternContext,0);
};

PatternContext.prototype.identifier_pattern = function() {
    return this.getTypedRuleContext(Identifier_patternContext,0);
};

PatternContext.prototype.tuple_pattern = function() {
    return this.getTypedRuleContext(Tuple_patternContext,0);
};

PatternContext.prototype.type_annotation = function() {
    return this.getTypedRuleContext(Type_annotationContext,0);
};

PatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPattern(this);
	}
};

PatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPattern(this);
	}
};




CadenceParser.PatternContext = PatternContext;

CadenceParser.prototype.pattern = function() {

    var localctx = new PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, CadenceParser.RULE_pattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 850;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.UNDERSCORE:
            this.state = 847;
            this.wildcard_pattern();
            break;
        case CadenceParser.AS:
        case CadenceParser.DEFAULT:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHILE:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.SELF:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.Identifier:
            this.state = 848;
            this.identifier_pattern();
            break;
        case CadenceParser.LPAREN:
            this.state = 849;
            this.tuple_pattern();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 853;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.COLON) {
            this.state = 852;
            this.type_annotation();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Wildcard_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_wildcard_pattern;
    return this;
}

Wildcard_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Wildcard_patternContext.prototype.constructor = Wildcard_patternContext;

Wildcard_patternContext.prototype.UNDERSCORE = function() {
    return this.getToken(CadenceParser.UNDERSCORE, 0);
};

Wildcard_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterWildcard_pattern(this);
	}
};

Wildcard_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitWildcard_pattern(this);
	}
};




CadenceParser.Wildcard_patternContext = Wildcard_patternContext;

CadenceParser.prototype.wildcard_pattern = function() {

    var localctx = new Wildcard_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, CadenceParser.RULE_wildcard_pattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 855;
        this.match(CadenceParser.UNDERSCORE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Identifier_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_identifier_pattern;
    return this;
}

Identifier_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Identifier_patternContext.prototype.constructor = Identifier_patternContext;

Identifier_patternContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Identifier_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterIdentifier_pattern(this);
	}
};

Identifier_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitIdentifier_pattern(this);
	}
};




CadenceParser.Identifier_patternContext = Identifier_patternContext;

CadenceParser.prototype.identifier_pattern = function() {

    var localctx = new Identifier_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, CadenceParser.RULE_identifier_pattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 857;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_patternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_pattern;
    return this;
}

Tuple_patternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_patternContext.prototype.constructor = Tuple_patternContext;

Tuple_patternContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

Tuple_patternContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

Tuple_patternContext.prototype.tuple_pattern_element_list = function() {
    return this.getTypedRuleContext(Tuple_pattern_element_listContext,0);
};

Tuple_patternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_pattern(this);
	}
};

Tuple_patternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_pattern(this);
	}
};




CadenceParser.Tuple_patternContext = Tuple_patternContext;

CadenceParser.prototype.tuple_pattern = function() {

    var localctx = new Tuple_patternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, CadenceParser.RULE_tuple_pattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 859;
        this.match(CadenceParser.LPAREN);
        this.state = 861;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & ((1 << (CadenceParser.AS - 21)) | (1 << (CadenceParser.DEFAULT - 21)) | (1 << (CadenceParser.FOR - 21)) | (1 << (CadenceParser.IN - 21)) | (1 << (CadenceParser.PRIVATE - 21)) | (1 << (CadenceParser.PUBLIC - 21)) | (1 << (CadenceParser.WHILE - 21)) | (1 << (CadenceParser.GET - 21)) | (1 << (CadenceParser.SET - 21)))) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CadenceParser.SELF - 53)) | (1 << (CadenceParser.FILE - 53)) | (1 << (CadenceParser.LINE - 53)) | (1 << (CadenceParser.Identifier - 53)) | (1 << (CadenceParser.LPAREN - 53)) | (1 << (CadenceParser.UNDERSCORE - 53)))) !== 0)) {
            this.state = 860;
            this.tuple_pattern_element_list();
        }

        this.state = 863;
        this.match(CadenceParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_pattern_element_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_pattern_element_list;
    return this;
}

Tuple_pattern_element_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_pattern_element_listContext.prototype.constructor = Tuple_pattern_element_listContext;

Tuple_pattern_element_listContext.prototype.tuple_pattern_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Tuple_pattern_elementContext);
    } else {
        return this.getTypedRuleContext(Tuple_pattern_elementContext,i);
    }
};

Tuple_pattern_element_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Tuple_pattern_element_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_pattern_element_list(this);
	}
};

Tuple_pattern_element_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_pattern_element_list(this);
	}
};




CadenceParser.Tuple_pattern_element_listContext = Tuple_pattern_element_listContext;

CadenceParser.prototype.tuple_pattern_element_list = function() {

    var localctx = new Tuple_pattern_element_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, CadenceParser.RULE_tuple_pattern_element_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 865;
        this.tuple_pattern_element();
        this.state = 870;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 866;
            this.match(CadenceParser.COMMA);
            this.state = 867;
            this.tuple_pattern_element();
            this.state = 872;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Tuple_pattern_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_tuple_pattern_element;
    return this;
}

Tuple_pattern_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tuple_pattern_elementContext.prototype.constructor = Tuple_pattern_elementContext;

Tuple_pattern_elementContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

Tuple_pattern_elementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Tuple_pattern_elementContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Tuple_pattern_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTuple_pattern_element(this);
	}
};

Tuple_pattern_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTuple_pattern_element(this);
	}
};




CadenceParser.Tuple_pattern_elementContext = Tuple_pattern_elementContext;

CadenceParser.prototype.tuple_pattern_element = function() {

    var localctx = new Tuple_pattern_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, CadenceParser.RULE_tuple_pattern_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        if(la_===1) {
            this.state = 873;
            this.identifier();
            this.state = 874;
            this.match(CadenceParser.COLON);

        }
        this.state = 878;
        this.pattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pattern_initializer_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_pattern_initializer_list;
    return this;
}

Pattern_initializer_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_initializer_listContext.prototype.constructor = Pattern_initializer_listContext;

Pattern_initializer_listContext.prototype.pattern_initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pattern_initializerContext);
    } else {
        return this.getTypedRuleContext(Pattern_initializerContext,i);
    }
};

Pattern_initializer_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Pattern_initializer_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPattern_initializer_list(this);
	}
};

Pattern_initializer_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPattern_initializer_list(this);
	}
};




CadenceParser.Pattern_initializer_listContext = Pattern_initializer_listContext;

CadenceParser.prototype.pattern_initializer_list = function() {

    var localctx = new Pattern_initializer_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, CadenceParser.RULE_pattern_initializer_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 880;
        this.pattern_initializer();
        this.state = 885;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 881;
            this.match(CadenceParser.COMMA);
            this.state = 882;
            this.pattern_initializer();
            this.state = 887;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Pattern_initializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_pattern_initializer;
    return this;
}

Pattern_initializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pattern_initializerContext.prototype.constructor = Pattern_initializerContext;

Pattern_initializerContext.prototype.pattern = function() {
    return this.getTypedRuleContext(PatternContext,0);
};

Pattern_initializerContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

Pattern_initializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterPattern_initializer(this);
	}
};

Pattern_initializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitPattern_initializer(this);
	}
};




CadenceParser.Pattern_initializerContext = Pattern_initializerContext;

CadenceParser.prototype.pattern_initializer = function() {

    var localctx = new Pattern_initializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, CadenceParser.RULE_pattern_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.pattern();
        this.state = 890;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        if(la_===1) {
            this.state = 889;
            this.initializer();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.EQUAL = function() {
    return this.getToken(CadenceParser.EQUAL, 0);
};

InitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInitializer(this);
	}
};




CadenceParser.InitializerContext = InitializerContext;

CadenceParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, CadenceParser.RULE_initializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 892;
        this.match(CadenceParser.EQUAL);
        this.state = 893;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.function_type = function() {
    return this.getTypedRuleContext(Function_typeContext,0);
};

TypeContext.prototype.array_type = function() {
    return this.getTypedRuleContext(Array_typeContext,0);
};

TypeContext.prototype.dictionary_type = function() {
    return this.getTypedRuleContext(Dictionary_typeContext,0);
};

TypeContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

TypeContext.prototype.any_type = function() {
    return this.getTypedRuleContext(Any_typeContext,0);
};

TypeContext.prototype.LPAREN = function() {
    return this.getToken(CadenceParser.LPAREN, 0);
};

TypeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeContext.prototype.RPAREN = function() {
    return this.getToken(CadenceParser.RPAREN, 0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType(this);
	}
};




CadenceParser.TypeContext = TypeContext;

CadenceParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, CadenceParser.RULE_type);
    try {
        this.state = 904;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 895;
            this.function_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 896;
            this.array_type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 897;
            this.dictionary_type();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 898;
            this.type_identifier();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 899;
            this.any_type();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 900;
            this.match(CadenceParser.LPAREN);
            this.state = 901;
            this.type();
            this.state = 902;
            this.match(CadenceParser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Function_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_function_type;
    return this;
}

Function_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_typeContext.prototype.constructor = Function_typeContext;

Function_typeContext.prototype.function_type_argument_clause = function() {
    return this.getTypedRuleContext(Function_type_argument_clauseContext,0);
};

Function_typeContext.prototype.arrow_operator = function() {
    return this.getTypedRuleContext(Arrow_operatorContext,0);
};

Function_typeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Function_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterFunction_type(this);
	}
};

Function_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitFunction_type(this);
	}
};




CadenceParser.Function_typeContext = Function_typeContext;

CadenceParser.prototype.function_type = function() {

    var localctx = new Function_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, CadenceParser.RULE_function_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 906;
        this.function_type_argument_clause();
        this.state = 907;
        this.arrow_operator();
        this.state = 908;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Array_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_array_type;
    return this;
}

Array_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_typeContext.prototype.constructor = Array_typeContext;

Array_typeContext.prototype.LBRACK = function() {
    return this.getToken(CadenceParser.LBRACK, 0);
};

Array_typeContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Array_typeContext.prototype.RBRACK = function() {
    return this.getToken(CadenceParser.RBRACK, 0);
};

Array_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterArray_type(this);
	}
};

Array_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitArray_type(this);
	}
};




CadenceParser.Array_typeContext = Array_typeContext;

CadenceParser.prototype.array_type = function() {

    var localctx = new Array_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, CadenceParser.RULE_array_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 910;
        this.match(CadenceParser.LBRACK);
        this.state = 911;
        this.type();
        this.state = 912;
        this.match(CadenceParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Dictionary_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_dictionary_type;
    return this;
}

Dictionary_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dictionary_typeContext.prototype.constructor = Dictionary_typeContext;

Dictionary_typeContext.prototype.LCURLY = function() {
    return this.getToken(CadenceParser.LCURLY, 0);
};

Dictionary_typeContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

Dictionary_typeContext.prototype.type_annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_annotationContext);
    } else {
        return this.getTypedRuleContext(Type_annotationContext,i);
    }
};

Dictionary_typeContext.prototype.RCURLY = function() {
    return this.getToken(CadenceParser.RCURLY, 0);
};

Dictionary_typeContext.prototype.AT = function() {
    return this.getToken(CadenceParser.AT, 0);
};

Dictionary_typeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Dictionary_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterDictionary_type(this);
	}
};

Dictionary_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitDictionary_type(this);
	}
};




CadenceParser.Dictionary_typeContext = Dictionary_typeContext;

CadenceParser.prototype.dictionary_type = function() {

    var localctx = new Dictionary_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, CadenceParser.RULE_dictionary_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 915;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.AT) {
            this.state = 914;
            this.match(CadenceParser.AT);
        }

        this.state = 917;
        this.match(CadenceParser.LCURLY);
        this.state = 918;
        this.type();
        this.state = 919;
        this.type_annotation();
        this.state = 926;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 920;
            this.match(CadenceParser.COMMA);
            this.state = 921;
            this.type();
            this.state = 922;
            this.type_annotation();
            this.state = 928;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 929;
        this.match(CadenceParser.RCURLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_annotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_annotation;
    return this;
}

Type_annotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_annotationContext.prototype.constructor = Type_annotationContext;

Type_annotationContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Type_annotationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

Type_annotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_annotation(this);
	}
};

Type_annotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_annotation(this);
	}
};




CadenceParser.Type_annotationContext = Type_annotationContext;

CadenceParser.prototype.type_annotation = function() {

    var localctx = new Type_annotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, CadenceParser.RULE_type_annotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.match(CadenceParser.COLON);
        this.state = 932;
        this.type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_identifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_identifier;
    return this;
}

Type_identifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_identifierContext.prototype.constructor = Type_identifierContext;

Type_identifierContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Type_identifierContext.prototype.QUESTION = function() {
    return this.getToken(CadenceParser.QUESTION, 0);
};

Type_identifierContext.prototype.generic_argument_clause = function() {
    return this.getTypedRuleContext(Generic_argument_clauseContext,0);
};

Type_identifierContext.prototype.DOT = function() {
    return this.getToken(CadenceParser.DOT, 0);
};

Type_identifierContext.prototype.type_identifier = function() {
    return this.getTypedRuleContext(Type_identifierContext,0);
};

Type_identifierContext.prototype.AT = function() {
    return this.getToken(CadenceParser.AT, 0);
};

Type_identifierContext.prototype.AND = function() {
    return this.getToken(CadenceParser.AND, 0);
};

Type_identifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_identifier(this);
	}
};

Type_identifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_identifier(this);
	}
};




CadenceParser.Type_identifierContext = Type_identifierContext;

CadenceParser.prototype.type_identifier = function() {

    var localctx = new Type_identifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, CadenceParser.RULE_type_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 935;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.AT || _la===CadenceParser.AND) {
            this.state = 934;
            _la = this._input.LA(1);
            if(!(_la===CadenceParser.AT || _la===CadenceParser.AND)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 937;
        this.type_name();
        this.state = 939;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        if(la_===1) {
            this.state = 938;
            this.match(CadenceParser.QUESTION);

        }
        this.state = 942;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
        if(la_===1) {
            this.state = 941;
            this.generic_argument_clause();

        }
        this.state = 946;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        if(la_===1) {
            this.state = 944;
            this.match(CadenceParser.DOT);
            this.state = 945;
            this.type_identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_name;
    return this;
}

Type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_nameContext.prototype.constructor = Type_nameContext;

Type_nameContext.prototype.STRING_TYPE = function() {
    return this.getToken(CadenceParser.STRING_TYPE, 0);
};

Type_nameContext.prototype.UINT64_TYPE = function() {
    return this.getToken(CadenceParser.UINT64_TYPE, 0);
};

Type_nameContext.prototype.ADDRESS = function() {
    return this.getToken(CadenceParser.ADDRESS, 0);
};

Type_nameContext.prototype.TYPE = function() {
    return this.getToken(CadenceParser.TYPE, 0);
};

Type_nameContext.prototype.ANY_STRUCT = function() {
    return this.getToken(CadenceParser.ANY_STRUCT, 0);
};

Type_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_name(this);
	}
};

Type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_name(this);
	}
};




CadenceParser.Type_nameContext = Type_nameContext;

CadenceParser.prototype.type_name = function() {

    var localctx = new Type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, CadenceParser.RULE_type_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 954;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CadenceParser.STRING_TYPE:
            this.state = 948;
            this.match(CadenceParser.STRING_TYPE);
            break;
        case CadenceParser.UINT64_TYPE:
            this.state = 949;
            this.match(CadenceParser.UINT64_TYPE);
            break;
        case CadenceParser.ADDRESS:
            this.state = 950;
            this.match(CadenceParser.ADDRESS);
            break;
        case CadenceParser.TYPE:
            this.state = 951;
            this.match(CadenceParser.TYPE);
            break;
        case CadenceParser.ANY_STRUCT:
            this.state = 952;
            this.match(CadenceParser.ANY_STRUCT);
            break;
        case CadenceParser.AS:
        case CadenceParser.DEFAULT:
        case CadenceParser.FOR:
        case CadenceParser.IN:
        case CadenceParser.PRIVATE:
        case CadenceParser.PUBLIC:
        case CadenceParser.WHILE:
        case CadenceParser.GET:
        case CadenceParser.SET:
        case CadenceParser.SELF:
        case CadenceParser.FILE:
        case CadenceParser.LINE:
        case CadenceParser.Identifier:
            this.state = 953;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Type_name_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_type_name_alias;
    return this;
}

Type_name_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_name_aliasContext.prototype.constructor = Type_name_aliasContext;

Type_name_aliasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Type_name_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterType_name_alias(this);
	}
};

Type_name_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitType_name_alias(this);
	}
};




CadenceParser.Type_name_aliasContext = Type_name_aliasContext;

CadenceParser.prototype.type_name_alias = function() {

    var localctx = new Type_name_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, CadenceParser.RULE_type_name_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 956;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Composite_typesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_composite_types;
    return this;
}

Composite_typesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Composite_typesContext.prototype.constructor = Composite_typesContext;

Composite_typesContext.prototype.COLON = function() {
    return this.getToken(CadenceParser.COLON, 0);
};

Composite_typesContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

Composite_typesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.COMMA);
    } else {
        return this.getToken(CadenceParser.COMMA, i);
    }
};


Composite_typesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterComposite_types(this);
	}
};

Composite_typesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitComposite_types(this);
	}
};




CadenceParser.Composite_typesContext = Composite_typesContext;

CadenceParser.prototype.composite_types = function() {

    var localctx = new Composite_typesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, CadenceParser.RULE_composite_types);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 958;
        this.match(CadenceParser.COLON);
        this.state = 959;
        this.type();
        this.state = 964;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CadenceParser.COMMA) {
            this.state = 960;
            this.match(CadenceParser.COMMA);
            this.state = 961;
            this.type();
            this.state = 966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Any_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_any_type;
    return this;
}

Any_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_typeContext.prototype.constructor = Any_typeContext;

Any_typeContext.prototype.ANY = function() {
    return this.getToken(CadenceParser.ANY, 0);
};

Any_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterAny_type(this);
	}
};

Any_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitAny_type(this);
	}
};




CadenceParser.Any_typeContext = Any_typeContext;

CadenceParser.prototype.any_type = function() {

    var localctx = new Any_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, CadenceParser.RULE_any_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967;
        this.match(CadenceParser.ANY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Label_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_label_name;
    return this;
}

Label_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Label_nameContext.prototype.constructor = Label_nameContext;

Label_nameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

Label_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterLabel_name(this);
	}
};

Label_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitLabel_name(this);
	}
};




CadenceParser.Label_nameContext = Label_nameContext;

CadenceParser.prototype.label_name = function() {

    var localctx = new Label_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, CadenceParser.RULE_label_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 969;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Break_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_break_statement;
    return this;
}

Break_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_statementContext.prototype.constructor = Break_statementContext;

Break_statementContext.prototype.BREAK = function() {
    return this.getToken(CadenceParser.BREAK, 0);
};

Break_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Break_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterBreak_statement(this);
	}
};

Break_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitBreak_statement(this);
	}
};




CadenceParser.Break_statementContext = Break_statementContext;

CadenceParser.prototype.break_statement = function() {

    var localctx = new Break_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, CadenceParser.RULE_break_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 971;
        this.match(CadenceParser.BREAK);
        this.state = 973;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        if(la_===1) {
            this.state = 972;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Continue_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_continue_statement;
    return this;
}

Continue_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_statementContext.prototype.constructor = Continue_statementContext;

Continue_statementContext.prototype.CONTINUE = function() {
    return this.getToken(CadenceParser.CONTINUE, 0);
};

Continue_statementContext.prototype.label_name = function() {
    return this.getTypedRuleContext(Label_nameContext,0);
};

Continue_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterContinue_statement(this);
	}
};

Continue_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitContinue_statement(this);
	}
};




CadenceParser.Continue_statementContext = Continue_statementContext;

CadenceParser.prototype.continue_statement = function() {

    var localctx = new Continue_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, CadenceParser.RULE_continue_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this.match(CadenceParser.CONTINUE);
        this.state = 977;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        if(la_===1) {
            this.state = 976;
            this.label_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_return_statement;
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(CadenceParser.RETURN, 0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitReturn_statement(this);
	}
};




CadenceParser.Return_statementContext = Return_statementContext;

CadenceParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, CadenceParser.RULE_return_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 979;
        this.match(CadenceParser.RETURN);
        this.state = 981;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        if(la_===1) {
            this.state = 980;
            this.expression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Throw_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_throw_statement;
    return this;
}

Throw_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Throw_statementContext.prototype.constructor = Throw_statementContext;

Throw_statementContext.prototype.THROW = function() {
    return this.getToken(CadenceParser.THROW, 0);
};

Throw_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Throw_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterThrow_statement(this);
	}
};

Throw_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitThrow_statement(this);
	}
};




CadenceParser.Throw_statementContext = Throw_statementContext;

CadenceParser.prototype.throw_statement = function() {

    var localctx = new Throw_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, CadenceParser.RULE_throw_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 983;
        this.match(CadenceParser.THROW);
        this.state = 984;
        this.expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initializer_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_initializer_declaration;
    return this;
}

Initializer_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_declarationContext.prototype.constructor = Initializer_declarationContext;

Initializer_declarationContext.prototype.initializer_head = function() {
    return this.getTypedRuleContext(Initializer_headContext,0);
};

Initializer_declarationContext.prototype.parameter_clause = function() {
    return this.getTypedRuleContext(Parameter_clauseContext,0);
};

Initializer_declarationContext.prototype.initializer_body = function() {
    return this.getTypedRuleContext(Initializer_bodyContext,0);
};

Initializer_declarationContext.prototype.generic_parameter_clause = function() {
    return this.getTypedRuleContext(Generic_parameter_clauseContext,0);
};

Initializer_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInitializer_declaration(this);
	}
};

Initializer_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInitializer_declaration(this);
	}
};




CadenceParser.Initializer_declarationContext = Initializer_declarationContext;

CadenceParser.prototype.initializer_declaration = function() {

    var localctx = new Initializer_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, CadenceParser.RULE_initializer_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.initializer_head();
        this.state = 988;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.LT) {
            this.state = 987;
            this.generic_parameter_clause();
        }

        this.state = 990;
        this.parameter_clause();
        this.state = 991;
        this.initializer_body();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initializer_headContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_initializer_head;
    return this;
}

Initializer_headContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_headContext.prototype.constructor = Initializer_headContext;

Initializer_headContext.prototype.INIT = function() {
    return this.getToken(CadenceParser.INIT, 0);
};

Initializer_headContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInitializer_head(this);
	}
};

Initializer_headContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInitializer_head(this);
	}
};




CadenceParser.Initializer_headContext = Initializer_headContext;

CadenceParser.prototype.initializer_head = function() {

    var localctx = new Initializer_headContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, CadenceParser.RULE_initializer_head);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 993;
        this.match(CadenceParser.INIT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Initializer_bodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_initializer_body;
    return this;
}

Initializer_bodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_bodyContext.prototype.constructor = Initializer_bodyContext;

Initializer_bodyContext.prototype.code_block = function() {
    return this.getTypedRuleContext(Code_blockContext,0);
};

Initializer_bodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterInitializer_body(this);
	}
};

Initializer_bodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitInitializer_body(this);
	}
};




CadenceParser.Initializer_bodyContext = Initializer_bodyContext;

CadenceParser.prototype.initializer_body = function() {

    var localctx = new Initializer_bodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, CadenceParser.RULE_initializer_body);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 995;
        this.code_block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Protocol_composition_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_protocol_composition_type;
    return this;
}

Protocol_composition_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Protocol_composition_typeContext.prototype.constructor = Protocol_composition_typeContext;

Protocol_composition_typeContext.prototype.type_identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Type_identifierContext);
    } else {
        return this.getTypedRuleContext(Type_identifierContext,i);
    }
};

Protocol_composition_typeContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CadenceParser.AND);
    } else {
        return this.getToken(CadenceParser.AND, i);
    }
};


Protocol_composition_typeContext.prototype.trailing_composition_and = function() {
    return this.getTypedRuleContext(Trailing_composition_andContext,0);
};

Protocol_composition_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterProtocol_composition_type(this);
	}
};

Protocol_composition_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitProtocol_composition_type(this);
	}
};




CadenceParser.Protocol_composition_typeContext = Protocol_composition_typeContext;

CadenceParser.prototype.protocol_composition_type = function() {

    var localctx = new Protocol_composition_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, CadenceParser.RULE_protocol_composition_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.type_identifier();
        this.state = 1002;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,103,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 998;
                this.match(CadenceParser.AND);
                this.state = 999;
                this.type_identifier(); 
            }
            this.state = 1004;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,103,this._ctx);
        }

        this.state = 1006;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CadenceParser.AND) {
            this.state = 1005;
            this.trailing_composition_and();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Trailing_composition_andContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CadenceParser.RULE_trailing_composition_and;
    return this;
}

Trailing_composition_andContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trailing_composition_andContext.prototype.constructor = Trailing_composition_andContext;

Trailing_composition_andContext.prototype.AND = function() {
    return this.getToken(CadenceParser.AND, 0);
};

Trailing_composition_andContext.prototype.enterRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.enterTrailing_composition_and(this);
	}
};

Trailing_composition_andContext.prototype.exitRule = function(listener) {
    if(listener instanceof CadenceParserListener ) {
        listener.exitTrailing_composition_and(this);
	}
};




CadenceParser.Trailing_composition_andContext = Trailing_composition_andContext;

CadenceParser.prototype.trailing_composition_and = function() {

    var localctx = new Trailing_composition_andContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, CadenceParser.RULE_trailing_composition_and);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1008;
        this.match(CadenceParser.AND);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CadenceParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 55:
			return this.operator_characters_sempred(localctx, predIndex);
	case 58:
			return this.dot_operator_characters_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CadenceParser.prototype.operator_characters_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return _input.get(_input.index()-1).getType()!=WS;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CadenceParser.prototype.dot_operator_characters_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return _input.get(_input.index()-1).getType()!=WS;
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CadenceParser = CadenceParser;
